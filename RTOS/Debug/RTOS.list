
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005598  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005898  08005898  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005898  08005898  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005898  08005898  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080058a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d74  20000010  080058b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d84  080058b0  00021d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001442a  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003174  00000000  00000000  000344ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00037628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0e  00000000  00000000  000389c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002797c  00000000  00000000  000398d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149e9  00000000  00000000  00061252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6b86  00000000  00000000  00075c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000513c  00000000  00000000  0016c7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00171900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005710 	.word	0x08005710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005710 	.word	0x08005710

080001d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem */
  myBinarySemHandle = osSemaphoreNew(1, 1, &myBinarySem_attributes);
 80001d4:	4a18      	ldr	r2, [pc, #96]	; (8000238 <MX_FREERTOS_Init+0x68>)
 80001d6:	2101      	movs	r1, #1
 80001d8:	2001      	movs	r0, #1
 80001da:	f002 f848 	bl	800226e <osSemaphoreNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a16      	ldr	r2, [pc, #88]	; (800023c <MX_FREERTOS_Init+0x6c>)
 80001e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001e4:	4a16      	ldr	r2, [pc, #88]	; (8000240 <MX_FREERTOS_Init+0x70>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4816      	ldr	r0, [pc, #88]	; (8000244 <MX_FREERTOS_Init+0x74>)
 80001ea:	f001 ff93 	bl	8002114 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a15      	ldr	r2, [pc, #84]	; (8000248 <MX_FREERTOS_Init+0x78>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* creation of Blink1Task */
  Blink1TaskHandle = osThreadNew(Blink1, NULL, &Blink1Task_attributes);
 80001f4:	4a15      	ldr	r2, [pc, #84]	; (800024c <MX_FREERTOS_Init+0x7c>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <MX_FREERTOS_Init+0x80>)
 80001fa:	f001 ff8b 	bl	8002114 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a14      	ldr	r2, [pc, #80]	; (8000254 <MX_FREERTOS_Init+0x84>)
 8000202:	6013      	str	r3, [r2, #0]

  /* creation of Blink2Task */
  Blink2TaskHandle = osThreadNew(Blink2, NULL, &Blink2Task_attributes);
 8000204:	4a14      	ldr	r2, [pc, #80]	; (8000258 <MX_FREERTOS_Init+0x88>)
 8000206:	2100      	movs	r1, #0
 8000208:	4814      	ldr	r0, [pc, #80]	; (800025c <MX_FREERTOS_Init+0x8c>)
 800020a:	f001 ff83 	bl	8002114 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a13      	ldr	r2, [pc, #76]	; (8000260 <MX_FREERTOS_Init+0x90>)
 8000212:	6013      	str	r3, [r2, #0]

  /* creation of TriggTask */
  TriggTaskHandle = osThreadNew(Trigg, NULL, &TriggTask_attributes);
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <MX_FREERTOS_Init+0x94>)
 8000216:	2100      	movs	r1, #0
 8000218:	4813      	ldr	r0, [pc, #76]	; (8000268 <MX_FREERTOS_Init+0x98>)
 800021a:	f001 ff7b 	bl	8002114 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a12      	ldr	r2, [pc, #72]	; (800026c <MX_FREERTOS_Init+0x9c>)
 8000222:	6013      	str	r3, [r2, #0]

  /* creation of UserbuttonTask */
  UserbuttonTaskHandle = osThreadNew(Userbutton, NULL, &UserbuttonTask_attributes);
 8000224:	4a12      	ldr	r2, [pc, #72]	; (8000270 <MX_FREERTOS_Init+0xa0>)
 8000226:	2100      	movs	r1, #0
 8000228:	4812      	ldr	r0, [pc, #72]	; (8000274 <MX_FREERTOS_Init+0xa4>)
 800022a:	f001 ff73 	bl	8002114 <osThreadNew>
 800022e:	4603      	mov	r3, r0
 8000230:	4a11      	ldr	r2, [pc, #68]	; (8000278 <MX_FREERTOS_Init+0xa8>)
 8000232:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	08005840 	.word	0x08005840
 800023c:	20000040 	.word	0x20000040
 8000240:	0800578c 	.word	0x0800578c
 8000244:	0800027d 	.word	0x0800027d
 8000248:	2000002c 	.word	0x2000002c
 800024c:	080057b0 	.word	0x080057b0
 8000250:	0800028d 	.word	0x0800028d
 8000254:	20000030 	.word	0x20000030
 8000258:	080057d4 	.word	0x080057d4
 800025c:	080002d5 	.word	0x080002d5
 8000260:	20000034 	.word	0x20000034
 8000264:	080057f8 	.word	0x080057f8
 8000268:	080002e5 	.word	0x080002e5
 800026c:	20000038 	.word	0x20000038
 8000270:	0800581c 	.word	0x0800581c
 8000274:	0800030d 	.word	0x0800030d
 8000278:	2000003c 	.word	0x2000003c

0800027c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000284:	2001      	movs	r0, #1
 8000286:	f001 ffd7 	bl	8002238 <osDelay>
 800028a:	e7fb      	b.n	8000284 <StartDefaultTask+0x8>

0800028c <Blink1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink1 */
void Blink1(void *argument)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink1 */
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(100) ; // ms to ticks
 8000294:	2364      	movs	r3, #100	; 0x64
 8000296:	60fb      	str	r3, [r7, #12]
    // Initialise the xLastWakeTime variable with the current time.
    xLastWakeTime = xTaskGetTickCount();
 8000298:	f003 fd64 	bl	8003d64 <xTaskGetTickCount>
 800029c:	4603      	mov	r3, r0
 800029e:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for(;;)
    {
         osSemaphoreAcquire(myBinarySemHandle, osWaitForever); // Acquire semaphore
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <Blink1+0x44>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 f869 	bl	8002380 <osSemaphoreAcquire>


             // Toggle the green LED
             HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002ae:	2120      	movs	r1, #32
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b4:	f000 fd52 	bl	8000d5c <HAL_GPIO_TogglePin>

             // Wait for 200ms
            // wait_cycles(200000);


         osSemaphoreRelease(myBinarySemHandle); // Release semaphore
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <Blink1+0x44>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4618      	mov	r0, r3
 80002be:	f002 f8b1 	bl	8002424 <osSemaphoreRelease>


            vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80002c2:	f107 0308 	add.w	r3, r7, #8
 80002c6:	68f9      	ldr	r1, [r7, #12]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fb87 	bl	80039dc <vTaskDelayUntil>
         osSemaphoreAcquire(myBinarySemHandle, osWaitForever); // Acquire semaphore
 80002ce:	e7e7      	b.n	80002a0 <Blink1+0x14>
 80002d0:	20000040 	.word	0x20000040

080002d4 <Blink2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink2 */
void Blink2(void *argument)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002dc:	2001      	movs	r0, #1
 80002de:	f001 ffab 	bl	8002238 <osDelay>
 80002e2:	e7fb      	b.n	80002dc <Blink2+0x8>

080002e4 <Trigg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Trigg */
void Trigg(void *argument)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Trigg */
  TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(200) ; // ms to ticks
 80002ec:	23c8      	movs	r3, #200	; 0xc8
 80002ee:	60fb      	str	r3, [r7, #12]
  // Initialise the xLastWakeTime variable with the current time.
  xLastWakeTime = xTaskGetTickCount();
 80002f0:	f003 fd38 	bl	8003d64 <xTaskGetTickCount>
 80002f4:	4603      	mov	r3, r0
 80002f6:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80002f8:	f107 0308 	add.w	r3, r7, #8
 80002fc:	68f9      	ldr	r1, [r7, #12]
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fb6c 	bl	80039dc <vTaskDelayUntil>
	  wait_cycles(10); //add a breakpoint in this line
 8000304:	200a      	movs	r0, #10
 8000306:	f000 f835 	bl	8000374 <wait_cycles>
	  vTaskDelayUntil( &xLastWakeTime, xPeriod );
 800030a:	e7f5      	b.n	80002f8 <Trigg+0x14>

0800030c <Userbutton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Userbutton */
void Userbutton(void *argument)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Userbutton */
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(20);
 8000314:	2314      	movs	r3, #20
 8000316:	60fb      	str	r3, [r7, #12]
    // Initialise the xLastWakeTime variable with the current time.
    xLastWakeTime = xTaskGetTickCount();
 8000318:	f003 fd24 	bl	8003d64 <xTaskGetTickCount>
 800031c:	4603      	mov	r3, r0
 800031e:	60bb      	str	r3, [r7, #8]
    osSemaphoreRelease(myBinarySemHandle);
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <Userbutton+0x5c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4618      	mov	r0, r3
 8000326:	f002 f87d 	bl	8002424 <osSemaphoreRelease>
    /* Infinite loop */
    for(;;)
    {
         if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800032a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032e:	480f      	ldr	r0, [pc, #60]	; (800036c <Userbutton+0x60>)
 8000330:	f000 fce4 	bl	8000cfc <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d109      	bne.n	800034e <Userbutton+0x42>
                {
                    // Button is pressed, disable blinking
                    osSemaphoreAcquire(myBinarySemHandle, 10); // Acquire semaphore
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <Userbutton+0x5c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	210a      	movs	r1, #10
 8000340:	4618      	mov	r0, r3
 8000342:	f002 f81d 	bl	8002380 <osSemaphoreAcquire>

                    wait_cycles(250000);
 8000346:	480a      	ldr	r0, [pc, #40]	; (8000370 <Userbutton+0x64>)
 8000348:	f000 f814 	bl	8000374 <wait_cycles>
 800034c:	e004      	b.n	8000358 <Userbutton+0x4c>
                }
                else
                {
                    // Button is not pressed, enable blinking

                    osSemaphoreRelease(myBinarySemHandle); // Release semaphore
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <Userbutton+0x5c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	f002 f866 	bl	8002424 <osSemaphoreRelease>

                }


            vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000358:	f107 0308 	add.w	r3, r7, #8
 800035c:	68f9      	ldr	r1, [r7, #12]
 800035e:	4618      	mov	r0, r3
 8000360:	f003 fb3c 	bl	80039dc <vTaskDelayUntil>
         if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000364:	e7e1      	b.n	800032a <Userbutton+0x1e>
 8000366:	bf00      	nop
 8000368:	20000040 	.word	0x20000040
 800036c:	48000800 	.word	0x48000800
 8000370:	0003d090 	.word	0x0003d090

08000374 <wait_cycles>:
  /* USER CODE END Userbutton */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void wait_cycles( uint32_t n ) {
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
uint32_t l = n/3; //cycles per loop is 3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a07      	ldr	r2, [pc, #28]	; (800039c <wait_cycles+0x28>)
 8000380:	fba2 2303 	umull	r2, r3, r2, r3
 8000384:	085b      	lsrs	r3, r3, #1
 8000386:	60fb      	str	r3, [r7, #12]
asm volatile( "0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l) );
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b01      	subs	r3, #1
 800038c:	d1fd      	bne.n	800038a <wait_cycles+0x16>
 800038e:	60fb      	str	r3, [r7, #12]
}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	aaaaaaab 	.word	0xaaaaaaab

080003a0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b6:	4b34      	ldr	r3, [pc, #208]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	4a33      	ldr	r2, [pc, #204]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c2:	4b31      	ldr	r3, [pc, #196]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	f003 0304 	and.w	r3, r3, #4
 80003ca:	613b      	str	r3, [r7, #16]
 80003cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003ce:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	4a2d      	ldr	r2, [pc, #180]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	4a27      	ldr	r2, [pc, #156]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f2:	4b25      	ldr	r3, [pc, #148]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b22      	ldr	r3, [pc, #136]	; (8000488 <MX_GPIO_Init+0xe8>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4a21      	ldr	r2, [pc, #132]	; (8000488 <MX_GPIO_Init+0xe8>)
 8000404:	f043 0302 	orr.w	r3, r3, #2
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <MX_GPIO_Init+0xe8>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0302 	and.w	r3, r3, #2
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2120      	movs	r1, #32
 800041a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041e:	f000 fc85 	bl	8000d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000428:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4619      	mov	r1, r3
 8000438:	4814      	ldr	r0, [pc, #80]	; (800048c <MX_GPIO_Init+0xec>)
 800043a:	f000 fab5 	bl	80009a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800043e:	230c      	movs	r3, #12
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000442:	2302      	movs	r3, #2
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800044a:	2303      	movs	r3, #3
 800044c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800044e:	2307      	movs	r3, #7
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045c:	f000 faa4 	bl	80009a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000460:	2320      	movs	r3, #32
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2300      	movs	r3, #0
 800046e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f000 fa95 	bl	80009a8 <HAL_GPIO_Init>

}
 800047e:	bf00      	nop
 8000480:	3728      	adds	r7, #40	; 0x28
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	48000800 	.word	0x48000800

08000490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000494:	f000 f966 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000498:	f000 f809 	bl	80004ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f7ff ff80 	bl	80003a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80004a0:	f001 fdee 	bl	8002080 <osKernelInitialize>
  MX_FREERTOS_Init();
 80004a4:	f7ff fe94 	bl	80001d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80004a8:	f001 fe0e 	bl	80020c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <main+0x1c>

080004ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b096      	sub	sp, #88	; 0x58
 80004b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	2244      	movs	r2, #68	; 0x44
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f005 f8ed 	bl	800569c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004d4:	f000 fc6a 	bl	8000dac <HAL_PWREx_ControlVoltageScaling>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004de:	f000 f849 	bl	8000574 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e2:	2302      	movs	r3, #2
 80004e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ec:	2310      	movs	r3, #16
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f0:	2302      	movs	r3, #2
 80004f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f4:	2302      	movs	r3, #2
 80004f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80004fc:	230a      	movs	r3, #10
 80004fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000500:	2307      	movs	r3, #7
 8000502:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000504:	2302      	movs	r3, #2
 8000506:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000508:	2302      	movs	r3, #2
 800050a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fca1 	bl	8000e58 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800051c:	f000 f82a 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	2303      	movs	r3, #3
 8000526:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	2104      	movs	r1, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f001 f869 	bl	8001610 <HAL_RCC_ClockConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000544:	f000 f816 	bl	8000574 <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3758      	adds	r7, #88	; 0x58
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d101      	bne.n	8000566 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000562:	f000 f91f 	bl	80007a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40012c00 	.word	0x40012c00

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <HAL_MspInit+0x4c>)
 8000588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <HAL_MspInit+0x4c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6613      	str	r3, [r2, #96]	; 0x60
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_MspInit+0x4c>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <HAL_MspInit+0x4c>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <HAL_MspInit+0x4c>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	6593      	str	r3, [r2, #88]	; 0x58
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_MspInit+0x4c>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	210f      	movs	r1, #15
 80005ba:	f06f 0001 	mvn.w	r0, #1
 80005be:	f000 f9c9 	bl	8000954 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <HAL_InitTick+0xc8>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e2:	4a2d      	ldr	r2, [pc, #180]	; (8000698 <HAL_InitTick+0xc8>)
 80005e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005e8:	6613      	str	r3, [r2, #96]	; 0x60
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <HAL_InitTick+0xc8>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005f6:	f107 020c 	add.w	r2, r7, #12
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4611      	mov	r1, r2
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f9b3 	bl	800196c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000606:	f001 f99b 	bl	8001940 <HAL_RCC_GetPCLK2Freq>
 800060a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800060c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800060e:	4a23      	ldr	r2, [pc, #140]	; (800069c <HAL_InitTick+0xcc>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	0c9b      	lsrs	r3, r3, #18
 8000616:	3b01      	subs	r3, #1
 8000618:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <HAL_InitTick+0xd0>)
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <HAL_InitTick+0xd4>)
 800061e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <HAL_InitTick+0xd0>)
 8000622:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000626:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000628:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <HAL_InitTick+0xd0>)
 800062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <HAL_InitTick+0xd0>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <HAL_InitTick+0xd0>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <HAL_InitTick+0xd0>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000640:	4817      	ldr	r0, [pc, #92]	; (80006a0 <HAL_InitTick+0xd0>)
 8000642:	f001 fa25 	bl	8001a90 <HAL_TIM_Base_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800064c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000650:	2b00      	cmp	r3, #0
 8000652:	d11b      	bne.n	800068c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <HAL_InitTick+0xd0>)
 8000656:	f001 fa7d 	bl	8001b54 <HAL_TIM_Base_Start_IT>
 800065a:	4603      	mov	r3, r0
 800065c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000664:	2b00      	cmp	r3, #0
 8000666:	d111      	bne.n	800068c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000668:	2019      	movs	r0, #25
 800066a:	f000 f98f 	bl	800098c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d808      	bhi.n	8000686 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	2019      	movs	r0, #25
 800067a:	f000 f96b 	bl	8000954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <HAL_InitTick+0xd8>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	e002      	b.n	800068c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800068c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000690:	4618      	mov	r0, r3
 8000692:	3730      	adds	r7, #48	; 0x30
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	431bde83 	.word	0x431bde83
 80006a0:	20000044 	.word	0x20000044
 80006a4:	40012c00 	.word	0x40012c00
 80006a8:	20000004 	.word	0x20000004

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <NMI_Handler+0x4>

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <MemManage_Handler+0x4>

080006be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <UsageFault_Handler+0x4>

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80006de:	f001 faa9 	bl	8001c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000044 	.word	0x20000044

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000748 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff ffea 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f004 ffb5 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000742:	f7ff fea5 	bl	8000490 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000748:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000754:	080058a0 	.word	0x080058a0
  ldr r2, =_sbss
 8000758:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800075c:	20001d84 	.word	0x20001d84

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_Init+0x3c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <HAL_Init+0x3c>)
 8000774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000778:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077a:	2003      	movs	r0, #3
 800077c:	f000 f8df 	bl	800093e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000780:	200f      	movs	r0, #15
 8000782:	f7ff ff25 	bl	80005d0 <HAL_InitTick>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d002      	beq.n	8000792 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	e001      	b.n	8000796 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000792:	f7ff fef5 	bl	8000580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000796:	79fb      	ldrb	r3, [r7, #7]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000090 	.word	0x20000090

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000090 	.word	0x20000090

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0b      	blt.n	8000872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 021f 	and.w	r2, r3, #31
 8000860:	4907      	ldr	r1, [pc, #28]	; (8000880 <__NVIC_EnableIRQ+0x38>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	2001      	movs	r0, #1
 800086a:	fa00 f202 	lsl.w	r2, r0, r2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db0a      	blt.n	80008ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <__NVIC_SetPriority+0x4c>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ac:	e00a      	b.n	80008c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <__NVIC_SetPriority+0x50>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	3b04      	subs	r3, #4
 80008bc:	0112      	lsls	r2, r2, #4
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	440b      	add	r3, r1
 80008c2:	761a      	strb	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f1c3 0307 	rsb	r3, r3, #7
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	bf28      	it	cs
 80008f6:	2304      	movcs	r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3304      	adds	r3, #4
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d902      	bls.n	8000908 <NVIC_EncodePriority+0x30>
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b03      	subs	r3, #3
 8000906:	e000      	b.n	800090a <NVIC_EncodePriority+0x32>
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43da      	mvns	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43d9      	mvns	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	4313      	orrs	r3, r2
         );
}
 8000932:	4618      	mov	r0, r3
 8000934:	3724      	adds	r7, #36	; 0x24
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ff4c 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000966:	f7ff ff61 	bl	800082c <__NVIC_GetPriorityGrouping>
 800096a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	68b9      	ldr	r1, [r7, #8]
 8000970:	6978      	ldr	r0, [r7, #20]
 8000972:	f7ff ffb1 	bl	80008d8 <NVIC_EncodePriority>
 8000976:	4602      	mov	r2, r0
 8000978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff80 	bl	8000884 <__NVIC_SetPriority>
}
 8000984:	bf00      	nop
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff54 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b6:	e17f      	b.n	8000cb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 8171 	beq.w	8000cb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d005      	beq.n	80009e8 <HAL_GPIO_Init+0x40>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d130      	bne.n	8000a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2203      	movs	r2, #3
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a1e:	2201      	movs	r2, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	f003 0201 	and.w	r2, r3, #1
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d118      	bne.n	8000a88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	f003 0201 	and.w	r2, r3, #1
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d017      	beq.n	8000ac4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d123      	bne.n	8000b18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	08da      	lsrs	r2, r3, #3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3208      	adds	r2, #8
 8000ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	691a      	ldr	r2, [r3, #16]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	6939      	ldr	r1, [r7, #16]
 8000b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0203 	and.w	r2, r3, #3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 80ac 	beq.w	8000cb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b5f      	ldr	r3, [pc, #380]	; (8000cd8 <HAL_GPIO_Init+0x330>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	4a5e      	ldr	r2, [pc, #376]	; (8000cd8 <HAL_GPIO_Init+0x330>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6613      	str	r3, [r2, #96]	; 0x60
 8000b66:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <HAL_GPIO_Init+0x330>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b72:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <HAL_GPIO_Init+0x334>)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b9c:	d025      	beq.n	8000bea <HAL_GPIO_Init+0x242>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4f      	ldr	r2, [pc, #316]	; (8000ce0 <HAL_GPIO_Init+0x338>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d01f      	beq.n	8000be6 <HAL_GPIO_Init+0x23e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4e      	ldr	r2, [pc, #312]	; (8000ce4 <HAL_GPIO_Init+0x33c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d019      	beq.n	8000be2 <HAL_GPIO_Init+0x23a>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4d      	ldr	r2, [pc, #308]	; (8000ce8 <HAL_GPIO_Init+0x340>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0x236>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4c      	ldr	r2, [pc, #304]	; (8000cec <HAL_GPIO_Init+0x344>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00d      	beq.n	8000bda <HAL_GPIO_Init+0x232>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4b      	ldr	r2, [pc, #300]	; (8000cf0 <HAL_GPIO_Init+0x348>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0x22e>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <HAL_GPIO_Init+0x34c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_GPIO_Init+0x22a>
 8000bce:	2306      	movs	r3, #6
 8000bd0:	e00c      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	e00a      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	e008      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bde:	2303      	movs	r3, #3
 8000be0:	e004      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000be2:	2302      	movs	r3, #2
 8000be4:	e002      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bea:	2300      	movs	r3, #0
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	f002 0203 	and.w	r2, r2, #3
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	4093      	lsls	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bfc:	4937      	ldr	r1, [pc, #220]	; (8000cdc <HAL_GPIO_Init+0x334>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c2e:	4a32      	ldr	r2, [pc, #200]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c34:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c82:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f47f ae78 	bne.w	80009b8 <HAL_GPIO_Init+0x10>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	48000c00 	.word	0x48000c00
 8000cec:	48001000 	.word	0x48001000
 8000cf0:	48001400 	.word	0x48001400
 8000cf4:	48001800 	.word	0x48001800
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e001      	b.n	8000d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d3c:	787b      	ldrb	r3, [r7, #1]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d42:	887a      	ldrh	r2, [r7, #2]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4013      	ands	r3, r2
 8000d74:	041a      	lsls	r2, r3, #16
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43d9      	mvns	r1, r3
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	619a      	str	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40007000 	.word	0x40007000

08000dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dba:	d130      	bne.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc8:	d038      	beq.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2232      	movs	r2, #50	; 0x32
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df0:	e002      	b.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e04:	d102      	bne.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f2      	bne.n	8000df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e18:	d110      	bne.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e00f      	b.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2a:	d007      	beq.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e34:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40007000 	.word	0x40007000
 8000e50:	20000000 	.word	0x20000000
 8000e54:	431bde83 	.word	0x431bde83

08000e58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e3ca      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e6a:	4b97      	ldr	r3, [pc, #604]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e74:	4b94      	ldr	r3, [pc, #592]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80e4 	beq.w	8001054 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d007      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x4a>
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b0c      	cmp	r3, #12
 8000e96:	f040 808b 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	f040 8087 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ea2:	4b89      	ldr	r3, [pc, #548]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_RCC_OscConfig+0x62>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e3a2      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1a      	ldr	r2, [r3, #32]
 8000ebe:	4b82      	ldr	r3, [pc, #520]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x7c>
 8000eca:	4b7f      	ldr	r3, [pc, #508]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ed2:	e005      	b.n	8000ee0 <HAL_RCC_OscConfig+0x88>
 8000ed4:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d223      	bcs.n	8000f2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fd71 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e383      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef8:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000efe:	f043 0308 	orr.w	r3, r3, #8
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	496d      	ldr	r1, [pc, #436]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f16:	4b6c      	ldr	r3, [pc, #432]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	4968      	ldr	r1, [pc, #416]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	604b      	str	r3, [r1, #4]
 8000f2a:	e025      	b.n	8000f78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2c:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4960      	ldr	r1, [pc, #384]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4a:	4b5f      	ldr	r3, [pc, #380]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	495b      	ldr	r1, [pc, #364]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d109      	bne.n	8000f78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fd31 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e343      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f78:	f000 fc4a 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	4950      	ldr	r1, [pc, #320]	; (80010cc <HAL_RCC_OscConfig+0x274>)
 8000f8a:	5ccb      	ldrb	r3, [r1, r3]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_RCC_OscConfig+0x278>)
 8000f96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f98:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <HAL_RCC_OscConfig+0x27c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fb17 	bl	80005d0 <HAL_InitTick>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d052      	beq.n	8001052 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	e327      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d032      	beq.n	800101e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fb8:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a42      	ldr	r2, [pc, #264]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc02 	bl	80007cc <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fbfe 	bl	80007cc <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e310      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a36      	ldr	r2, [pc, #216]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4931      	ldr	r1, [pc, #196]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	492c      	ldr	r1, [pc, #176]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
 800101c:	e01a      	b.n	8001054 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800102a:	f7ff fbcf 	bl	80007cc <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001032:	f7ff fbcb 	bl	80007cc <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e2dd      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f0      	bne.n	8001032 <HAL_RCC_OscConfig+0x1da>
 8001050:	e000      	b.n	8001054 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001052:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d074      	beq.n	800114a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b08      	cmp	r3, #8
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x21a>
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d10e      	bne.n	800108a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d10b      	bne.n	800108a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d064      	beq.n	8001148 <HAL_RCC_OscConfig+0x2f0>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d160      	bne.n	8001148 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e2ba      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x24a>
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e026      	b.n	80010f0 <HAL_RCC_OscConfig+0x298>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010aa:	d115      	bne.n	80010d8 <HAL_RCC_OscConfig+0x280>
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a02      	ldr	r2, [pc, #8]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e014      	b.n	80010f0 <HAL_RCC_OscConfig+0x298>
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	08005850 	.word	0x08005850
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004
 80010d8:	4ba0      	ldr	r3, [pc, #640]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a9f      	ldr	r2, [pc, #636]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b9d      	ldr	r3, [pc, #628]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a9c      	ldr	r2, [pc, #624]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb68 	bl	80007cc <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fb64 	bl	80007cc <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e276      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001112:	4b92      	ldr	r3, [pc, #584]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x2a8>
 800111e:	e014      	b.n	800114a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fb54 	bl	80007cc <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fb50 	bl	80007cc <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e262      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113a:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x2d0>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d060      	beq.n	8001218 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b04      	cmp	r3, #4
 800115a:	d005      	beq.n	8001168 <HAL_RCC_OscConfig+0x310>
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d119      	bne.n	8001196 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d116      	bne.n	8001196 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001168:	4b7c      	ldr	r3, [pc, #496]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_OscConfig+0x328>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e23f      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b76      	ldr	r3, [pc, #472]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	061b      	lsls	r3, r3, #24
 800118e:	4973      	ldr	r1, [pc, #460]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001194:	e040      	b.n	8001218 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d023      	beq.n	80011e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119e:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6e      	ldr	r2, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fb0f 	bl	80007cc <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fb0b 	bl	80007cc <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e21d      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c4:	4b65      	ldr	r3, [pc, #404]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b62      	ldr	r3, [pc, #392]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	495f      	ldr	r1, [pc, #380]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	e018      	b.n	8001218 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5c      	ldr	r2, [pc, #368]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff faeb 	bl	80007cc <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fae7 	bl	80007cc <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1f9      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d03c      	beq.n	800129e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01c      	beq.n	8001266 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800122e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001232:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff fac6 	bl	80007cc <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fac2 	bl	80007cc <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e1d4      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0ef      	beq.n	8001244 <HAL_RCC_OscConfig+0x3ec>
 8001264:	e01b      	b.n	800129e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126c:	4a3b      	ldr	r2, [pc, #236]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001276:	f7ff faa9 	bl	80007cc <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff faa5 	bl	80007cc <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1b7      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1ef      	bne.n	800127e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80a6 	beq.w	80013f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d4:	2301      	movs	r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d118      	bne.n	8001316 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fa6c 	bl	80007cc <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f8:	f7ff fa68 	bl	80007cc <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e17a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_RCC_OscConfig+0x4d8>
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800132e:	e029      	b.n	8001384 <HAL_RCC_OscConfig+0x52c>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b05      	cmp	r3, #5
 8001336:	d115      	bne.n	8001364 <HAL_RCC_OscConfig+0x50c>
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800133a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134e:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001358:	e014      	b.n	8001384 <HAL_RCC_OscConfig+0x52c>
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	40007000 	.word	0x40007000
 8001364:	4b9c      	ldr	r3, [pc, #624]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136a:	4a9b      	ldr	r2, [pc, #620]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001374:	4b98      	ldr	r3, [pc, #608]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137a:	4a97      	ldr	r2, [pc, #604]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d016      	beq.n	80013ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fa1e 	bl	80007cc <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff fa1a 	bl	80007cc <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e12a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013aa:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ed      	beq.n	8001394 <HAL_RCC_OscConfig+0x53c>
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff fa07 	bl	80007cc <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fa03 	bl	80007cc <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e113      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d8:	4b7f      	ldr	r3, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ed      	bne.n	80013c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ec:	4b7a      	ldr	r3, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	4a79      	ldr	r2, [pc, #484]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80fe 	beq.w	80015fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	2b02      	cmp	r3, #2
 8001408:	f040 80d0 	bne.w	80015ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800140c:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	429a      	cmp	r2, r3
 800141e:	d130      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	3b01      	subs	r3, #1
 800142c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	429a      	cmp	r2, r3
 8001430:	d127      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800143e:	429a      	cmp	r2, r3
 8001440:	d11f      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800144c:	2a07      	cmp	r2, #7
 800144e:	bf14      	ite	ne
 8001450:	2201      	movne	r2, #1
 8001452:	2200      	moveq	r2, #0
 8001454:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001456:	4293      	cmp	r3, r2
 8001458:	d113      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d109      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	3b01      	subs	r3, #1
 800147c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d06e      	beq.n	8001560 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d069      	beq.n	800155c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0ad      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014a4:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b0:	f7ff f98c 	bl	80007cc <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f988 	bl	80007cc <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e09a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <HAL_RCC_OscConfig+0x784>)
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014e6:	3a01      	subs	r2, #1
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014f0:	0212      	lsls	r2, r2, #8
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014f8:	0852      	lsrs	r2, r2, #1
 80014fa:	3a01      	subs	r2, #1
 80014fc:	0552      	lsls	r2, r2, #21
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	3a01      	subs	r2, #1
 8001508:	0652      	lsls	r2, r2, #25
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001510:	0912      	lsrs	r2, r2, #4
 8001512:	0452      	lsls	r2, r2, #17
 8001514:	430a      	orrs	r2, r1
 8001516:	4930      	ldr	r1, [pc, #192]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001518:	4313      	orrs	r3, r2
 800151a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001526:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001534:	f7ff f94a 	bl	80007cc <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff f946 	bl	80007cc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e058      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155a:	e050      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e04f      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d148      	bne.n	80015fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001584:	f7ff f922 	bl	80007cc <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff f91e 	bl	80007cc <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e030      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x734>
 80015aa:	e028      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d023      	beq.n	80015fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff f905 	bl	80007cc <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c4:	e00c      	b.n	80015e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff f901 	bl	80007cc <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d905      	bls.n	80015e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e013      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1ec      	bne.n	80015c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4905      	ldr	r1, [pc, #20]	; (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_RCC_OscConfig+0x7b4>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e001      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	feeefffc 	.word	0xfeeefffc

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0e7      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b75      	ldr	r3, [pc, #468]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d910      	bls.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4970      	ldr	r1, [pc, #448]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b6e      	ldr	r3, [pc, #440]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cf      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d010      	beq.n	8001682 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800166c:	429a      	cmp	r2, r3
 800166e:	d908      	bls.n	8001682 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001670:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4960      	ldr	r1, [pc, #384]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d04c      	beq.n	8001728 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001696:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0a6      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ae:	4b54      	ldr	r3, [pc, #336]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d115      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e09a      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c6:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e08e      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e086      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4943      	ldr	r1, [pc, #268]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016f8:	f7ff f868 	bl	80007cc <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff f864 	bl	80007cc <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	; 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e06e      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d010      	beq.n	8001756 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001740:	429a      	cmp	r2, r3
 8001742:	d208      	bcs.n	8001756 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	492b      	ldr	r1, [pc, #172]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d210      	bcs.n	8001786 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 0207 	bic.w	r2, r3, #7
 800176c:	4923      	ldr	r1, [pc, #140]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e036      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4918      	ldr	r1, [pc, #96]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4910      	ldr	r1, [pc, #64]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c4:	f000 f824 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	490b      	ldr	r1, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x1f4>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1f8>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1fc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fef1 	bl	80005d0 <HAL_InitTick>
 80017ee:	4603      	mov	r3, r0
 80017f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80017f2:	7afb      	ldrb	r3, [r7, #11]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40022000 	.word	0x40022000
 8001800:	40021000 	.word	0x40021000
 8001804:	08005850 	.word	0x08005850
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x34>
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d121      	bne.n	8001882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d11e      	bne.n	8001882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001844:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001850:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e005      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800186c:	4a2b      	ldr	r2, [pc, #172]	; (800191c <HAL_RCC_GetSysClockFreq+0x10c>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b04      	cmp	r3, #4
 8001886:	d102      	bne.n	800188e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_GetSysClockFreq+0x110>)
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	e004      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d101      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_RCC_GetSysClockFreq+0x114>)
 8001896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d134      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d003      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xac>
 80018b4:	e005      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_RCC_GetSysClockFreq+0x110>)
 80018b8:	617b      	str	r3, [r7, #20]
      break;
 80018ba:	e005      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_GetSysClockFreq+0x114>)
 80018be:	617b      	str	r3, [r7, #20]
      break;
 80018c0:	e002      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	617b      	str	r3, [r7, #20]
      break;
 80018c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	3301      	adds	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	fb03 f202 	mul.w	r2, r3, r2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	0e5b      	lsrs	r3, r3, #25
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	3301      	adds	r3, #1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001908:	69bb      	ldr	r3, [r7, #24]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	08005868 	.word	0x08005868
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200

08001928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_RCC_GetHCLKFreq+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001944:	f7ff fff0 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_GetPCLK2Freq+0x24>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0adb      	lsrs	r3, r3, #11
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4904      	ldr	r1, [pc, #16]	; (8001968 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	08005860 	.word	0x08005860

0800196c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	220f      	movs	r2, #15
 800197a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_RCC_GetClockConfig+0x60>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0207 	and.w	r2, r3, #7
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40022000 	.word	0x40022000

080019d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019e8:	f7ff f9d2 	bl	8000d90 <HAL_PWREx_GetVoltageRange>
 80019ec:	6178      	str	r0, [r7, #20]
 80019ee:	e014      	b.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	; 0x58
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a08:	f7ff f9c2 	bl	8000d90 <HAL_PWREx_GetVoltageRange>
 8001a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d10b      	bne.n	8001a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b80      	cmp	r3, #128	; 0x80
 8001a26:	d919      	bls.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a2c:	d902      	bls.n	8001a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a2e:	2302      	movs	r3, #2
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e013      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e010      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b80      	cmp	r3, #128	; 0x80
 8001a3e:	d902      	bls.n	8001a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a40:	2303      	movs	r3, #3
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e00a      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	d102      	bne.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	e004      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b70      	cmp	r3, #112	; 0x70
 8001a56:	d101      	bne.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 0207 	bic.w	r2, r3, #7
 8001a64:	4909      	ldr	r1, [pc, #36]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e049      	b.n	8001b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f841 	bl	8001b3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3304      	adds	r3, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f000 f9da 	bl	8001e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e04f      	b.n	8001c0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01d      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b96:	d018      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <HAL_TIM_Base_Start_IT+0xc8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00e      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d004      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_TIM_Base_Start_IT+0xd8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d115      	bne.n	8001bf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d015      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d011      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf4:	e008      	b.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e000      	b.n	8001c0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40000800 	.word	0x40000800
 8001c24:	40000c00 	.word	0x40000c00
 8001c28:	40013400 	.word	0x40013400
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	00010007 	.word	0x00010007

08001c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0202 	mvn.w	r2, #2
 8001c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8e4 	bl	8001e4c <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8d6 	bl	8001e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8e7 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0204 	mvn.w	r2, #4
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8be 	bl	8001e4c <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8b0 	bl	8001e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8c1 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0208 	mvn.w	r2, #8
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f898 	bl	8001e4c <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f88a 	bl	8001e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f89b 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d020      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0210 	mvn.w	r2, #16
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2208      	movs	r2, #8
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f872 	bl	8001e4c <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f864 	bl	8001e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f875 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0201 	mvn.w	r2, #1
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fbd8 	bl	8000550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f906 	bl	8001fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8fe 	bl	8001fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f834 	bl	8001e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0220 	mvn.w	r2, #32
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8c6 	bl	8001fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <TIM_Base_SetConfig+0x114>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea6:	d00f      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3d      	ldr	r2, [pc, #244]	; (8001fa0 <TIM_Base_SetConfig+0x118>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00b      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3c      	ldr	r2, [pc, #240]	; (8001fa4 <TIM_Base_SetConfig+0x11c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d007      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3b      	ldr	r2, [pc, #236]	; (8001fa8 <TIM_Base_SetConfig+0x120>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <TIM_Base_SetConfig+0x124>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d108      	bne.n	8001eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <TIM_Base_SetConfig+0x114>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d01b      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2c      	ldr	r2, [pc, #176]	; (8001fa0 <TIM_Base_SetConfig+0x118>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d017      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <TIM_Base_SetConfig+0x11c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <TIM_Base_SetConfig+0x120>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00f      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a29      	ldr	r2, [pc, #164]	; (8001fac <TIM_Base_SetConfig+0x124>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <TIM_Base_SetConfig+0x128>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <TIM_Base_SetConfig+0x12c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <TIM_Base_SetConfig+0x130>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d108      	bne.n	8001f34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <TIM_Base_SetConfig+0x114>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00f      	beq.n	8001f80 <TIM_Base_SetConfig+0xf8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <TIM_Base_SetConfig+0x124>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00b      	beq.n	8001f80 <TIM_Base_SetConfig+0xf8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <TIM_Base_SetConfig+0x128>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <TIM_Base_SetConfig+0xf8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <TIM_Base_SetConfig+0x12c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <TIM_Base_SetConfig+0xf8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <TIM_Base_SetConfig+0x130>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d103      	bne.n	8001f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	615a      	str	r2, [r3, #20]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40000800 	.word	0x40000800
 8001fa8:	40000c00 	.word	0x40000c00
 8001fac:	40013400 	.word	0x40013400
 8001fb0:	40014000 	.word	0x40014000
 8001fb4:	40014400 	.word	0x40014400
 8001fb8:	40014800 	.word	0x40014800

08001fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <__NVIC_SetPriority>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <SysTick_Handler+0x1c>)
 8002052:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002054:	f002 f9bc 	bl	80043d0 <xTaskGetSchedulerState>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	d001      	beq.n	8002062 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800205e:	f003 f8a3 	bl	80051a8 <xPortSysTickHandler>
  }
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002070:	2100      	movs	r1, #0
 8002072:	f06f 0004 	mvn.w	r0, #4
 8002076:	f7ff ffbf 	bl	8001ff8 <__NVIC_SetPriority>
#endif
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002086:	f3ef 8305 	mrs	r3, IPSR
 800208a:	603b      	str	r3, [r7, #0]
  return(result);
 800208c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002092:	f06f 0305 	mvn.w	r3, #5
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	e00c      	b.n	80020b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <osKernelInitialize+0x44>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <osKernelInitialize+0x44>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	e002      	b.n	80020b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020b4:	687b      	ldr	r3, [r7, #4]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000094 	.word	0x20000094

080020c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020ce:	f3ef 8305 	mrs	r3, IPSR
 80020d2:	603b      	str	r3, [r7, #0]
  return(result);
 80020d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80020da:	f06f 0305 	mvn.w	r3, #5
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	e010      	b.n	8002104 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <osKernelStart+0x48>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d109      	bne.n	80020fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80020ea:	f7ff ffbf 	bl	800206c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <osKernelStart+0x48>)
 80020f0:	2202      	movs	r2, #2
 80020f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80020f4:	f001 fd24 	bl	8003b40 <vTaskStartScheduler>
      stat = osOK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	e002      	b.n	8002104 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002102:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002104:	687b      	ldr	r3, [r7, #4]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000094 	.word	0x20000094

08002114 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b08e      	sub	sp, #56	; 0x38
 8002118:	af04      	add	r7, sp, #16
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002124:	f3ef 8305 	mrs	r3, IPSR
 8002128:	617b      	str	r3, [r7, #20]
  return(result);
 800212a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800212c:	2b00      	cmp	r3, #0
 800212e:	d17e      	bne.n	800222e <osThreadNew+0x11a>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d07b      	beq.n	800222e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800213a:	2318      	movs	r3, #24
 800213c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002146:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d045      	beq.n	80021da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <osThreadNew+0x48>
        name = attr->name;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <osThreadNew+0x6e>
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b38      	cmp	r3, #56	; 0x38
 8002174:	d805      	bhi.n	8002182 <osThreadNew+0x6e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <osThreadNew+0x72>
        return (NULL);
 8002182:	2300      	movs	r3, #0
 8002184:	e054      	b.n	8002230 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00e      	beq.n	80021bc <osThreadNew+0xa8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b5b      	cmp	r3, #91	; 0x5b
 80021a4:	d90a      	bls.n	80021bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d006      	beq.n	80021bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <osThreadNew+0xa8>
        mem = 1;
 80021b6:	2301      	movs	r3, #1
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	e010      	b.n	80021de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10c      	bne.n	80021de <osThreadNew+0xca>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d108      	bne.n	80021de <osThreadNew+0xca>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d104      	bne.n	80021de <osThreadNew+0xca>
          mem = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	e001      	b.n	80021de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d110      	bne.n	8002206 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021ec:	9202      	str	r2, [sp, #8]
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6a3a      	ldr	r2, [r7, #32]
 80021f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f001 fa4c 	bl	8003698 <xTaskCreateStatic>
 8002200:	4603      	mov	r3, r0
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e013      	b.n	800222e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d110      	bne.n	800222e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	b29a      	uxth	r2, r3
 8002210:	f107 0310 	add.w	r3, r7, #16
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f001 fa97 	bl	8003752 <xTaskCreate>
 8002224:	4603      	mov	r3, r0
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <osThreadNew+0x11a>
            hTask = NULL;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800222e:	693b      	ldr	r3, [r7, #16]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3728      	adds	r7, #40	; 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002240:	f3ef 8305 	mrs	r3, IPSR
 8002244:	60bb      	str	r3, [r7, #8]
  return(result);
 8002246:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <osDelay+0x1c>
    stat = osErrorISR;
 800224c:	f06f 0305 	mvn.w	r3, #5
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e007      	b.n	8002264 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <osDelay+0x2c>
      vTaskDelay(ticks);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f001 fc3a 	bl	8003ad8 <vTaskDelay>
    }
  }

  return (stat);
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800226e:	b580      	push	{r7, lr}
 8002270:	b08a      	sub	sp, #40	; 0x28
 8002272:	af02      	add	r7, sp, #8
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800227e:	f3ef 8305 	mrs	r3, IPSR
 8002282:	613b      	str	r3, [r7, #16]
  return(result);
 8002284:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002286:	2b00      	cmp	r3, #0
 8002288:	d175      	bne.n	8002376 <osSemaphoreNew+0x108>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d072      	beq.n	8002376 <osSemaphoreNew+0x108>
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d86e      	bhi.n	8002376 <osSemaphoreNew+0x108>
    mem = -1;
 8002298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800229c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <osSemaphoreNew+0x4c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b4f      	cmp	r3, #79	; 0x4f
 80022b2:	d902      	bls.n	80022ba <osSemaphoreNew+0x4c>
        mem = 1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	e00c      	b.n	80022d4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <osSemaphoreNew+0x66>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d104      	bne.n	80022d4 <osSemaphoreNew+0x66>
          mem = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e001      	b.n	80022d4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022da:	d04c      	beq.n	8002376 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d128      	bne.n	8002334 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d10a      	bne.n	80022fe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2203      	movs	r2, #3
 80022ee:	9200      	str	r2, [sp, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	2001      	movs	r0, #1
 80022f6:	f000 fa29 	bl	800274c <xQueueGenericCreateStatic>
 80022fa:	61f8      	str	r0, [r7, #28]
 80022fc:	e005      	b.n	800230a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80022fe:	2203      	movs	r2, #3
 8002300:	2100      	movs	r1, #0
 8002302:	2001      	movs	r0, #1
 8002304:	f000 fa9a 	bl	800283c <xQueueGenericCreate>
 8002308:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d022      	beq.n	8002356 <osSemaphoreNew+0xe8>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01f      	beq.n	8002356 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002316:	2300      	movs	r3, #0
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	69f8      	ldr	r0, [r7, #28]
 800231e:	f000 fb55 	bl	80029cc <xQueueGenericSend>
 8002322:	4603      	mov	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d016      	beq.n	8002356 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002328:	69f8      	ldr	r0, [r7, #28]
 800232a:	f000 ffe1 	bl	80032f0 <vQueueDelete>
            hSemaphore = NULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	e010      	b.n	8002356 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	461a      	mov	r2, r3
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fad7 	bl	80028f6 <xQueueCreateCountingSemaphoreStatic>
 8002348:	61f8      	str	r0, [r7, #28]
 800234a:	e004      	b.n	8002356 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fb08 	bl	8002964 <xQueueCreateCountingSemaphore>
 8002354:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00c      	beq.n	8002376 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <osSemaphoreNew+0xfc>
          name = attr->name;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	e001      	b.n	800236e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800236e:	6979      	ldr	r1, [r7, #20]
 8002370:	69f8      	ldr	r0, [r7, #28]
 8002372:	f001 f909 	bl	8003588 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002376:	69fb      	ldr	r3, [r7, #28]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002398:	f06f 0303 	mvn.w	r3, #3
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e039      	b.n	8002414 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023a0:	f3ef 8305 	mrs	r3, IPSR
 80023a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80023a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d022      	beq.n	80023f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80023b2:	f06f 0303 	mvn.w	r3, #3
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e02c      	b.n	8002414 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	461a      	mov	r2, r3
 80023c4:	2100      	movs	r1, #0
 80023c6:	6938      	ldr	r0, [r7, #16]
 80023c8:	f000 ff12 	bl	80031f0 <xQueueReceiveFromISR>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d003      	beq.n	80023da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80023d2:	f06f 0302 	mvn.w	r3, #2
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e01c      	b.n	8002414 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d019      	beq.n	8002414 <osSemaphoreAcquire+0x94>
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <osSemaphoreAcquire+0xa0>)
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	e010      	b.n	8002414 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	6938      	ldr	r0, [r7, #16]
 80023f6:	f000 fdef 	bl	8002fd8 <xQueueSemaphoreTake>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d009      	beq.n	8002414 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002406:	f06f 0301 	mvn.w	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e002      	b.n	8002414 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800240e:	f06f 0302 	mvn.w	r3, #2
 8002412:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002414:	697b      	ldr	r3, [r7, #20]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000ed04 	.word	0xe000ed04

08002424 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800243a:	f06f 0303 	mvn.w	r3, #3
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e02c      	b.n	800249c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002442:	f3ef 8305 	mrs	r3, IPSR
 8002446:	60fb      	str	r3, [r7, #12]
  return(result);
 8002448:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01a      	beq.n	8002484 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002452:	f107 0308 	add.w	r3, r7, #8
 8002456:	4619      	mov	r1, r3
 8002458:	6938      	ldr	r0, [r7, #16]
 800245a:	f000 fc50 	bl	8002cfe <xQueueGiveFromISR>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d003      	beq.n	800246c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002464:	f06f 0302 	mvn.w	r3, #2
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e017      	b.n	800249c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <osSemaphoreRelease+0x78>
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <osSemaphoreRelease+0x84>)
 8002474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	e00b      	b.n	800249c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002484:	2300      	movs	r3, #0
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	6938      	ldr	r0, [r7, #16]
 800248c:	f000 fa9e 	bl	80029cc <xQueueGenericSend>
 8002490:	4603      	mov	r3, r0
 8002492:	2b01      	cmp	r3, #1
 8002494:	d002      	beq.n	800249c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002496:	f06f 0302 	mvn.w	r3, #2
 800249a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800249c:	697b      	ldr	r3, [r7, #20]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000ed04 	.word	0xe000ed04

080024ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80024bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <vApplicationGetIdleTaskMemory+0x30>)
 80024c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	601a      	str	r2, [r3, #0]
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000098 	.word	0x20000098
 80024dc:	200000f4 	.word	0x200000f4

080024e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <vApplicationGetTimerTaskMemory+0x2c>)
 80024f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <vApplicationGetTimerTaskMemory+0x30>)
 80024f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	200002f4 	.word	0x200002f4
 8002510:	20000350 	.word	0x20000350

08002514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0208 	add.w	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800252c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 0208 	add.w	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f103 0208 	add.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	601a      	str	r2, [r3, #0]
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025cc:	d103      	bne.n	80025d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e00c      	b.n	80025f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3308      	adds	r3, #8
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e002      	b.n	80025e4 <vListInsert+0x2e>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d2f6      	bcs.n	80025de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6892      	ldr	r2, [r2, #8]
 800263e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6852      	ldr	r2, [r2, #4]
 8002648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d103      	bne.n	800265c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026a2:	bf00      	nop
 80026a4:	e7fe      	b.n	80026a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026a6:	f002 fced 	bl	8005084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	68f9      	ldr	r1, [r7, #12]
 80026b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	441a      	add	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	3b01      	subs	r3, #1
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	441a      	add	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	22ff      	movs	r2, #255	; 0xff
 80026ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	22ff      	movs	r2, #255	; 0xff
 80026f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d114      	bne.n	8002726 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01a      	beq.n	800273a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3310      	adds	r3, #16
 8002708:	4618      	mov	r0, r3
 800270a:	f001 fca3 	bl	8004054 <xTaskRemoveFromEventList>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d012      	beq.n	800273a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <xQueueGenericReset+0xcc>)
 8002716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	e009      	b.n	800273a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3310      	adds	r3, #16
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fef2 	bl	8002514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3324      	adds	r3, #36	; 0x24
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff feed 	bl	8002514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800273a:	f002 fcd3 	bl	80050e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002772:	bf00      	nop
 8002774:	e7fe      	b.n	8002774 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800278e:	bf00      	nop
 8002790:	e7fe      	b.n	8002790 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <xQueueGenericCreateStatic+0x52>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <xQueueGenericCreateStatic+0x56>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <xQueueGenericCreateStatic+0x58>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	623b      	str	r3, [r7, #32]
}
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <xQueueGenericCreateStatic+0x7e>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <xQueueGenericCreateStatic+0x82>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <xQueueGenericCreateStatic+0x84>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	61fb      	str	r3, [r7, #28]
}
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027ea:	2350      	movs	r3, #80	; 0x50
 80027ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b50      	cmp	r3, #80	; 0x50
 80027f2:	d00a      	beq.n	800280a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	61bb      	str	r3, [r7, #24]
}
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800280a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800281e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f83f 	bl	80028b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002834:	4618      	mov	r0, r3
 8002836:	3730      	adds	r7, #48	; 0x30
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	613b      	str	r3, [r7, #16]
}
 8002862:	bf00      	nop
 8002864:	e7fe      	b.n	8002864 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	3350      	adds	r3, #80	; 0x50
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fd27 	bl	80052c8 <pvPortMalloc>
 800287a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d011      	beq.n	80028a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3350      	adds	r3, #80	; 0x50
 800288a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002894:	79fa      	ldrb	r2, [r7, #7]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f805 	bl	80028b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028a6:	69bb      	ldr	r3, [r7, #24]
	}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e002      	b.n	80028d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028de:	2101      	movs	r1, #1
 80028e0:	69b8      	ldr	r0, [r7, #24]
 80028e2:	f7ff fecb 	bl	800267c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b08a      	sub	sp, #40	; 0x28
 80028fa:	af02      	add	r7, sp, #8
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	61bb      	str	r3, [r7, #24]
}
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	429a      	cmp	r2, r3
 8002924:	d90a      	bls.n	800293c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	617b      	str	r3, [r7, #20]
}
 8002938:	bf00      	nop
 800293a:	e7fe      	b.n	800293a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800293c:	2302      	movs	r3, #2
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff ff00 	bl	800274c <xQueueGenericCreateStatic>
 800294c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800295a:	69fb      	ldr	r3, [r7, #28]
	}
 800295c:	4618      	mov	r0, r3
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	613b      	str	r3, [r7, #16]
}
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d90a      	bls.n	80029a8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	60fb      	str	r3, [r7, #12]
}
 80029a4:	bf00      	nop
 80029a6:	e7fe      	b.n	80029a6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80029a8:	2202      	movs	r2, #2
 80029aa:	2100      	movs	r1, #0
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff45 	bl	800283c <xQueueGenericCreate>
 80029b2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80029c0:	697b      	ldr	r3, [r7, #20]
	}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08e      	sub	sp, #56	; 0x38
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029da:	2300      	movs	r3, #0
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <xQueueGenericSend+0x32>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <xQueueGenericSend+0x40>
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <xQueueGenericSend+0x44>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <xQueueGenericSend+0x46>
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <xQueueGenericSend+0x60>
	__asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a28:	bf00      	nop
 8002a2a:	e7fe      	b.n	8002a2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d103      	bne.n	8002a3a <xQueueGenericSend+0x6e>
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <xQueueGenericSend+0x72>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <xQueueGenericSend+0x74>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <xQueueGenericSend+0x8e>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	623b      	str	r3, [r7, #32]
}
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a5a:	f001 fcb9 	bl	80043d0 <xTaskGetSchedulerState>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <xQueueGenericSend+0x9e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <xQueueGenericSend+0xa2>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <xQueueGenericSend+0xa4>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <xQueueGenericSend+0xbe>
	__asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	61fb      	str	r3, [r7, #28]
}
 8002a86:	bf00      	nop
 8002a88:	e7fe      	b.n	8002a88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a8a:	f002 fafb 	bl	8005084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d302      	bcc.n	8002aa0 <xQueueGenericSend+0xd4>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d129      	bne.n	8002af4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aa6:	f000 fc5e 	bl	8003366 <prvCopyDataToQueue>
 8002aaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	3324      	adds	r3, #36	; 0x24
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 facb 	bl	8004054 <xTaskRemoveFromEventList>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <xQueueGenericSend+0x1f8>)
 8002ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	e00a      	b.n	8002aec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002adc:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <xQueueGenericSend+0x1f8>)
 8002ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002aec:	f002 fafa 	bl	80050e4 <vPortExitCritical>
				return pdPASS;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e063      	b.n	8002bbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d103      	bne.n	8002b02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002afa:	f002 faf3 	bl	80050e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e05c      	b.n	8002bbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d106      	bne.n	8002b16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f001 fb05 	bl	800411c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b12:	2301      	movs	r3, #1
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b16:	f002 fae5 	bl	80050e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b1a:	f001 f877 	bl	8003c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b1e:	f002 fab1 	bl	8005084 <vPortEnterCritical>
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2e:	d103      	bne.n	8002b38 <xQueueGenericSend+0x16c>
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b44:	d103      	bne.n	8002b4e <xQueueGenericSend+0x182>
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b4e:	f002 fac9 	bl	80050e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b52:	1d3a      	adds	r2, r7, #4
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 faf4 	bl	8004148 <xTaskCheckForTimeOut>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d124      	bne.n	8002bb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b68:	f000 fcf5 	bl	8003556 <prvIsQueueFull>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d018      	beq.n	8002ba4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	3310      	adds	r3, #16
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 fa1a 	bl	8003fb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b82:	f000 fc80 	bl	8003486 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b86:	f001 f84f 	bl	8003c28 <xTaskResumeAll>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f af7c 	bne.w	8002a8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <xQueueGenericSend+0x1f8>)
 8002b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	e772      	b.n	8002a8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba6:	f000 fc6e 	bl	8003486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002baa:	f001 f83d 	bl	8003c28 <xTaskResumeAll>
 8002bae:	e76c      	b.n	8002a8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bb2:	f000 fc68 	bl	8003486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bb6:	f001 f837 	bl	8003c28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3738      	adds	r7, #56	; 0x38
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	e000ed04 	.word	0xe000ed04

08002bc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b090      	sub	sp, #64	; 0x40
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <xQueueGenericSendFromISR+0x3c>
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <xQueueGenericSendFromISR+0x40>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <xQueueGenericSendFromISR+0x42>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c20:	bf00      	nop
 8002c22:	e7fe      	b.n	8002c22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d103      	bne.n	8002c32 <xQueueGenericSendFromISR+0x6a>
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <xQueueGenericSendFromISR+0x6e>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <xQueueGenericSendFromISR+0x70>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	623b      	str	r3, [r7, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c52:	f002 faf9 	bl	8005248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c56:	f3ef 8211 	mrs	r2, BASEPRI
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	61fa      	str	r2, [r7, #28]
 8002c6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d302      	bcc.n	8002c84 <xQueueGenericSendFromISR+0xbc>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d12f      	bne.n	8002ce4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c9a:	f000 fb64 	bl	8003366 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca6:	d112      	bne.n	8002cce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d016      	beq.n	8002cde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	3324      	adds	r3, #36	; 0x24
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f9cd 	bl	8004054 <xTaskRemoveFromEventList>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00e      	beq.n	8002cde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e007      	b.n	8002cde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	b25a      	sxtb	r2, r3
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002ce2:	e001      	b.n	8002ce8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cf2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3740      	adds	r7, #64	; 0x40
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08e      	sub	sp, #56	; 0x38
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	623b      	str	r3, [r7, #32]
}
 8002d24:	bf00      	nop
 8002d26:	e7fe      	b.n	8002d26 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	61fb      	str	r3, [r7, #28]
}
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <xQueueGiveFromISR+0x58>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <xQueueGiveFromISR+0x5c>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <xQueueGiveFromISR+0x5e>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	61bb      	str	r3, [r7, #24]
}
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d76:	f002 fa67 	bl	8005248 <vPortValidateInterruptPriority>
	__asm volatile
 8002d7a:	f3ef 8211 	mrs	r2, BASEPRI
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	617a      	str	r2, [r7, #20]
 8002d90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002d92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d22b      	bcs.n	8002dfe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002db8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc0:	d112      	bne.n	8002de8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	3324      	adds	r3, #36	; 0x24
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 f940 	bl	8004054 <xTaskRemoveFromEventList>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00e      	beq.n	8002df8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e007      	b.n	8002df8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	b25a      	sxtb	r2, r3
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfc:	e001      	b.n	8002e02 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f383 8811 	msr	BASEPRI, r3
}
 8002e0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3738      	adds	r7, #56	; 0x38
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	; 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <xQueueReceive+0x30>
	__asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	623b      	str	r3, [r7, #32]
}
 8002e44:	bf00      	nop
 8002e46:	e7fe      	b.n	8002e46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <xQueueReceive+0x3e>
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <xQueueReceive+0x42>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <xQueueReceive+0x44>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <xQueueReceive+0x5e>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	61fb      	str	r3, [r7, #28]
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e76:	f001 faab 	bl	80043d0 <xTaskGetSchedulerState>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <xQueueReceive+0x6e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <xQueueReceive+0x72>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueReceive+0x74>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueReceive+0x8e>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	61bb      	str	r3, [r7, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ea6:	f002 f8ed 	bl	8005084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01f      	beq.n	8002ef6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eba:	f000 fabe 	bl	800343a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	1e5a      	subs	r2, r3, #1
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00f      	beq.n	8002eee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	3310      	adds	r3, #16
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 f8be 	bl	8004054 <xTaskRemoveFromEventList>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ede:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <xQueueReceive+0x1bc>)
 8002ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002eee:	f002 f8f9 	bl	80050e4 <vPortExitCritical>
				return pdPASS;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e069      	b.n	8002fca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d103      	bne.n	8002f04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002efc:	f002 f8f2 	bl	80050e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e062      	b.n	8002fca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f0a:	f107 0310 	add.w	r3, r7, #16
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f904 	bl	800411c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f14:	2301      	movs	r3, #1
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f18:	f002 f8e4 	bl	80050e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f1c:	f000 fe76 	bl	8003c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f20:	f002 f8b0 	bl	8005084 <vPortEnterCritical>
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f30:	d103      	bne.n	8002f3a <xQueueReceive+0x122>
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f40:	b25b      	sxtb	r3, r3
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f46:	d103      	bne.n	8002f50 <xQueueReceive+0x138>
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f50:	f002 f8c8 	bl	80050e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f54:	1d3a      	adds	r2, r7, #4
 8002f56:	f107 0310 	add.w	r3, r7, #16
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 f8f3 	bl	8004148 <xTaskCheckForTimeOut>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d123      	bne.n	8002fb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f6a:	f000 fade 	bl	800352a <prvIsQueueEmpty>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	3324      	adds	r3, #36	; 0x24
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 f819 	bl	8003fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f84:	f000 fa7f 	bl	8003486 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f88:	f000 fe4e 	bl	8003c28 <xTaskResumeAll>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d189      	bne.n	8002ea6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <xQueueReceive+0x1bc>)
 8002f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	e780      	b.n	8002ea6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa6:	f000 fa6e 	bl	8003486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002faa:	f000 fe3d 	bl	8003c28 <xTaskResumeAll>
 8002fae:	e77a      	b.n	8002ea6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb2:	f000 fa68 	bl	8003486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fb6:	f000 fe37 	bl	8003c28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fbc:	f000 fab5 	bl	800352a <prvIsQueueEmpty>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f43f af6f 	beq.w	8002ea6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3730      	adds	r7, #48	; 0x30
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08e      	sub	sp, #56	; 0x38
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	623b      	str	r3, [r7, #32]
}
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	61fb      	str	r3, [r7, #28]
}
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003028:	f001 f9d2 	bl	80043d0 <xTaskGetSchedulerState>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <xQueueSemaphoreTake+0x60>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <xQueueSemaphoreTake+0x64>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <xQueueSemaphoreTake+0x66>
 800303c:	2300      	movs	r3, #0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	61bb      	str	r3, [r7, #24]
}
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003058:	f002 f814 	bl	8005084 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d024      	beq.n	80030b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	1e5a      	subs	r2, r3, #1
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003078:	f001 fb20 	bl	80046bc <pvTaskIncrementMutexHeldCount>
 800307c:	4602      	mov	r2, r0
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00f      	beq.n	80030aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	3310      	adds	r3, #16
 800308e:	4618      	mov	r0, r3
 8003090:	f000 ffe0 	bl	8004054 <xTaskRemoveFromEventList>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800309a:	4b54      	ldr	r3, [pc, #336]	; (80031ec <xQueueSemaphoreTake+0x214>)
 800309c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030aa:	f002 f81b 	bl	80050e4 <vPortExitCritical>
				return pdPASS;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e097      	b.n	80031e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	617b      	str	r3, [r7, #20]
}
 80030d0:	bf00      	nop
 80030d2:	e7fe      	b.n	80030d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80030d4:	f002 f806 	bl	80050e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030d8:	2300      	movs	r3, #0
 80030da:	e082      	b.n	80031e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e2:	f107 030c 	add.w	r3, r7, #12
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 f818 	bl	800411c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030f0:	f001 fff8 	bl	80050e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030f4:	f000 fd8a 	bl	8003c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030f8:	f001 ffc4 	bl	8005084 <vPortEnterCritical>
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003102:	b25b      	sxtb	r3, r3
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003108:	d103      	bne.n	8003112 <xQueueSemaphoreTake+0x13a>
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003118:	b25b      	sxtb	r3, r3
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800311e:	d103      	bne.n	8003128 <xQueueSemaphoreTake+0x150>
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003128:	f001 ffdc 	bl	80050e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800312c:	463a      	mov	r2, r7
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f001 f807 	bl	8004148 <xTaskCheckForTimeOut>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d132      	bne.n	80031a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003140:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003142:	f000 f9f2 	bl	800352a <prvIsQueueEmpty>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d026      	beq.n	800319a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003154:	f001 ff96 	bl	8005084 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f955 	bl	800440c <xTaskPriorityInherit>
 8003162:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003164:	f001 ffbe 	bl	80050e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	3324      	adds	r3, #36	; 0x24
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 ff1f 	bl	8003fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003176:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003178:	f000 f985 	bl	8003486 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800317c:	f000 fd54 	bl	8003c28 <xTaskResumeAll>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	f47f af68 	bne.w	8003058 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <xQueueSemaphoreTake+0x214>)
 800318a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	e75e      	b.n	8003058 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800319a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800319c:	f000 f973 	bl	8003486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031a0:	f000 fd42 	bl	8003c28 <xTaskResumeAll>
 80031a4:	e758      	b.n	8003058 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80031a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031a8:	f000 f96d 	bl	8003486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ac:	f000 fd3c 	bl	8003c28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031b2:	f000 f9ba 	bl	800352a <prvIsQueueEmpty>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f43f af4d 	beq.w	8003058 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00d      	beq.n	80031e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80031c4:	f001 ff5e 	bl	8005084 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031ca:	f000 f8b4 	bl	8003336 <prvGetDisinheritPriorityAfterTimeout>
 80031ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f9ee 	bl	80045b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80031dc:	f001 ff82 	bl	80050e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3738      	adds	r7, #56	; 0x38
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08e      	sub	sp, #56	; 0x38
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	623b      	str	r3, [r7, #32]
}
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <xQueueReceiveFromISR+0x3a>
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <xQueueReceiveFromISR+0x3e>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <xQueueReceiveFromISR+0x40>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	61fb      	str	r3, [r7, #28]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800324a:	f001 fffd 	bl	8005248 <vPortValidateInterruptPriority>
	__asm volatile
 800324e:	f3ef 8211 	mrs	r2, BASEPRI
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	61ba      	str	r2, [r7, #24]
 8003264:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003266:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02f      	beq.n	80032d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800327c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003284:	f000 f8d9 	bl	800343a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	1e5a      	subs	r2, r3, #1
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003290:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003298:	d112      	bne.n	80032c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	3310      	adds	r3, #16
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fed4 	bl	8004054 <xTaskRemoveFromEventList>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00e      	beq.n	80032d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e007      	b.n	80032d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80032c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032c4:	3301      	adds	r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	b25a      	sxtb	r2, r3
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80032d0:	2301      	movs	r3, #1
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
 80032d4:	e001      	b.n	80032da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f383 8811 	msr	BASEPRI, r3
}
 80032e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3738      	adds	r7, #56	; 0x38
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <vQueueDelete+0x28>
	__asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	60bb      	str	r3, [r7, #8]
}
 8003314:	bf00      	nop
 8003316:	e7fe      	b.n	8003316 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f95f 	bl	80035dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f002 f899 	bl	8005460 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e001      	b.n	8003358 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003358:	68fb      	ldr	r3, [r7, #12]
	}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d14d      	bne.n	8003428 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f001 f8a3 	bl	80044dc <xTaskPriorityDisinherit>
 8003396:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	e043      	b.n	8003428 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d119      	bne.n	80033da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6858      	ldr	r0, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	461a      	mov	r2, r3
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	f002 f99f 	bl	80056f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d32b      	bcc.n	8003428 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	e026      	b.n	8003428 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	68d8      	ldr	r0, [r3, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	461a      	mov	r2, r3
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	f002 f985 	bl	80056f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	425b      	negs	r3, r3
 80033f4:	441a      	add	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d207      	bcs.n	8003416 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	425b      	negs	r3, r3
 8003410:	441a      	add	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d105      	bne.n	8003428 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	3b01      	subs	r3, #1
 8003426:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003430:	697b      	ldr	r3, [r7, #20]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d018      	beq.n	800347e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	441a      	add	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	d303      	bcc.n	800346e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68d9      	ldr	r1, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	461a      	mov	r2, r3
 8003478:	6838      	ldr	r0, [r7, #0]
 800347a:	f002 f93b 	bl	80056f4 <memcpy>
	}
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800348e:	f001 fdf9 	bl	8005084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003498:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800349a:	e011      	b.n	80034c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3324      	adds	r3, #36	; 0x24
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fdd3 	bl	8004054 <xTaskRemoveFromEventList>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034b4:	f000 feaa 	bl	800420c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	dce9      	bgt.n	800349c <prvUnlockQueue+0x16>
 80034c8:	e000      	b.n	80034cc <prvUnlockQueue+0x46>
					break;
 80034ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	22ff      	movs	r2, #255	; 0xff
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034d4:	f001 fe06 	bl	80050e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034d8:	f001 fdd4 	bl	8005084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034e4:	e011      	b.n	800350a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3310      	adds	r3, #16
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fdae 	bl	8004054 <xTaskRemoveFromEventList>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034fe:	f000 fe85 	bl	800420c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	3b01      	subs	r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800350a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800350e:	2b00      	cmp	r3, #0
 8003510:	dce9      	bgt.n	80034e6 <prvUnlockQueue+0x60>
 8003512:	e000      	b.n	8003516 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003514:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	22ff      	movs	r2, #255	; 0xff
 800351a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800351e:	f001 fde1 	bl	80050e4 <vPortExitCritical>
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003532:	f001 fda7 	bl	8005084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800353e:	2301      	movs	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e001      	b.n	8003548 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003548:	f001 fdcc 	bl	80050e4 <vPortExitCritical>

	return xReturn;
 800354c:	68fb      	ldr	r3, [r7, #12]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800355e:	f001 fd91 	bl	8005084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	429a      	cmp	r2, r3
 800356c:	d102      	bne.n	8003574 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800356e:	2301      	movs	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e001      	b.n	8003578 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003578:	f001 fdb4 	bl	80050e4 <vPortExitCritical>

	return xReturn;
 800357c:	68fb      	ldr	r3, [r7, #12]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e014      	b.n	80035c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003598:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <vQueueAddToRegistry+0x50>)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <vQueueAddToRegistry+0x50>)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <vQueueAddToRegistry+0x50>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035ba:	e006      	b.n	80035ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b07      	cmp	r3, #7
 80035c6:	d9e7      	bls.n	8003598 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000750 	.word	0x20000750

080035dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e016      	b.n	8003618 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80035ea:	4a10      	ldr	r2, [pc, #64]	; (800362c <vQueueUnregisterQueue+0x50>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10b      	bne.n	8003612 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80035fa:	4a0c      	ldr	r2, [pc, #48]	; (800362c <vQueueUnregisterQueue+0x50>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2100      	movs	r1, #0
 8003600:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003604:	4a09      	ldr	r2, [pc, #36]	; (800362c <vQueueUnregisterQueue+0x50>)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	2200      	movs	r2, #0
 800360e:	605a      	str	r2, [r3, #4]
				break;
 8003610:	e006      	b.n	8003620 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3301      	adds	r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b07      	cmp	r3, #7
 800361c:	d9e5      	bls.n	80035ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20000750 	.word	0x20000750

08003630 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003640:	f001 fd20 	bl	8005084 <vPortEnterCritical>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800364a:	b25b      	sxtb	r3, r3
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003650:	d103      	bne.n	800365a <vQueueWaitForMessageRestricted+0x2a>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003660:	b25b      	sxtb	r3, r3
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003666:	d103      	bne.n	8003670 <vQueueWaitForMessageRestricted+0x40>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003670:	f001 fd38 	bl	80050e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fcb9 	bl	8003ffc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff fefb 	bl	8003486 <prvUnlockQueue>
	}
 8003690:	bf00      	nop
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af04      	add	r7, sp, #16
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	623b      	str	r3, [r7, #32]
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <xTaskCreateStatic+0x46>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	61fb      	str	r3, [r7, #28]
}
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036de:	235c      	movs	r3, #92	; 0x5c
 80036e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b5c      	cmp	r3, #92	; 0x5c
 80036e6:	d00a      	beq.n	80036fe <xTaskCreateStatic+0x66>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	61bb      	str	r3, [r7, #24]
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01e      	beq.n	8003744 <xTaskCreateStatic+0xac>
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01b      	beq.n	8003744 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003714:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800371e:	2300      	movs	r3, #0
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	9302      	str	r3, [sp, #8]
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f850 	bl	80037dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800373c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800373e:	f000 f8dd 	bl	80038fc <prvAddNewTaskToReadyList>
 8003742:	e001      	b.n	8003748 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003748:	697b      	ldr	r3, [r7, #20]
	}
 800374a:	4618      	mov	r0, r3
 800374c:	3728      	adds	r7, #40	; 0x28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003752:	b580      	push	{r7, lr}
 8003754:	b08c      	sub	sp, #48	; 0x30
 8003756:	af04      	add	r7, sp, #16
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fdae 	bl	80052c8 <pvPortMalloc>
 800376c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00e      	beq.n	8003792 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003774:	205c      	movs	r0, #92	; 0x5c
 8003776:	f001 fda7 	bl	80052c8 <pvPortMalloc>
 800377a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
 8003788:	e005      	b.n	8003796 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f001 fe68 	bl	8005460 <vPortFree>
 8003790:	e001      	b.n	8003796 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d017      	beq.n	80037cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9303      	str	r3, [sp, #12]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	9302      	str	r3, [sp, #8]
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f80e 	bl	80037dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037c0:	69f8      	ldr	r0, [r7, #28]
 80037c2:	f000 f89b 	bl	80038fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e002      	b.n	80037d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037d2:	69bb      	ldr	r3, [r7, #24]
	}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	461a      	mov	r2, r3
 80037f4:	21a5      	movs	r1, #165	; 0xa5
 80037f6:	f001 ff51 	bl	800569c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003804:	3b01      	subs	r3, #1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f023 0307 	bic.w	r3, r3, #7
 8003812:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <prvInitialiseNewTask+0x58>
	__asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	617b      	str	r3, [r7, #20]
}
 8003830:	bf00      	nop
 8003832:	e7fe      	b.n	8003832 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01f      	beq.n	800387a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	e012      	b.n	8003866 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	7819      	ldrb	r1, [r3, #0]
 8003848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	3334      	adds	r3, #52	; 0x34
 8003850:	460a      	mov	r2, r1
 8003852:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d006      	beq.n	800386e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d9e9      	bls.n	8003840 <prvInitialiseNewTask+0x64>
 800386c:	e000      	b.n	8003870 <prvInitialiseNewTask+0x94>
			{
				break;
 800386e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003878:	e003      	b.n	8003882 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	2b37      	cmp	r3, #55	; 0x37
 8003886:	d901      	bls.n	800388c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003888:	2337      	movs	r3, #55	; 0x37
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003896:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	2200      	movs	r2, #0
 800389c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	3304      	adds	r3, #4
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fe56 	bl	8002554 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	3318      	adds	r3, #24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fe fe51 	bl	8002554 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	69b8      	ldr	r0, [r7, #24]
 80038dc:	f001 faa4 	bl	8004e28 <pxPortInitialiseStack>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038f2:	bf00      	nop
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003904:	f001 fbbe 	bl	8005084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003908:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <prvAddNewTaskToReadyList+0xc4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	4a2c      	ldr	r2, [pc, #176]	; (80039c0 <prvAddNewTaskToReadyList+0xc4>)
 8003910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003912:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <prvAddNewTaskToReadyList+0xc8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800391a:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <prvAddNewTaskToReadyList+0xc8>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <prvAddNewTaskToReadyList+0xc4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d110      	bne.n	800394a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003928:	f000 fc94 	bl	8004254 <prvInitialiseTaskLists>
 800392c:	e00d      	b.n	800394a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <prvAddNewTaskToReadyList+0xcc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003936:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <prvAddNewTaskToReadyList+0xc8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	429a      	cmp	r2, r3
 8003942:	d802      	bhi.n	800394a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003944:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <prvAddNewTaskToReadyList+0xc8>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <prvAddNewTaskToReadyList+0xd0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <prvAddNewTaskToReadyList+0xd0>)
 8003952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003954:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <prvAddNewTaskToReadyList+0xd0>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <prvAddNewTaskToReadyList+0xd4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d903      	bls.n	8003970 <prvAddNewTaskToReadyList+0x74>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <prvAddNewTaskToReadyList+0xd4>)
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <prvAddNewTaskToReadyList+0xd8>)
 800397e:	441a      	add	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f7fe fdf1 	bl	800256e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800398c:	f001 fbaa 	bl	80050e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003990:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <prvAddNewTaskToReadyList+0xcc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00e      	beq.n	80039b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <prvAddNewTaskToReadyList+0xc8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d207      	bcs.n	80039b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <prvAddNewTaskToReadyList+0xdc>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000c64 	.word	0x20000c64
 80039c4:	20000790 	.word	0x20000790
 80039c8:	20000c70 	.word	0x20000c70
 80039cc:	20000c80 	.word	0x20000c80
 80039d0:	20000c6c 	.word	0x20000c6c
 80039d4:	20000794 	.word	0x20000794
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <vTaskDelayUntil+0x2a>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	617b      	str	r3, [r7, #20]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <vTaskDelayUntil+0x46>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	613b      	str	r3, [r7, #16]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003a22:	4b2a      	ldr	r3, [pc, #168]	; (8003acc <vTaskDelayUntil+0xf0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <vTaskDelayUntil+0x64>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	60fb      	str	r3, [r7, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003a40:	f000 f8e4 	bl	8003c0c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003a44:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <vTaskDelayUntil+0xf4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d20b      	bcs.n	8003a76 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d211      	bcs.n	8003a8c <vTaskDelayUntil+0xb0>
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d90d      	bls.n	8003a8c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003a70:	2301      	movs	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
 8003a74:	e00a      	b.n	8003a8c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d303      	bcc.n	8003a88 <vTaskDelayUntil+0xac>
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d901      	bls.n	8003a8c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fe1f 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003aa6:	f000 f8bf 	bl	8003c28 <xTaskResumeAll>
 8003aaa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d107      	bne.n	8003ac2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <vTaskDelayUntil+0xf8>)
 8003ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ac2:	bf00      	nop
 8003ac4:	3728      	adds	r7, #40	; 0x28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000c8c 	.word	0x20000c8c
 8003ad0:	20000c68 	.word	0x20000c68
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d017      	beq.n	8003b1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003aea:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <vTaskDelay+0x60>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <vTaskDelay+0x30>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60bb      	str	r3, [r7, #8]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b08:	f000 f880 	bl	8003c0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fde8 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b14:	f000 f888 	bl	8003c28 <xTaskResumeAll>
 8003b18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d107      	bne.n	8003b30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <vTaskDelay+0x64>)
 8003b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000c8c 	.word	0x20000c8c
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b4e:	463a      	mov	r2, r7
 8003b50:	1d39      	adds	r1, r7, #4
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe fca8 	bl	80024ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b5c:	6839      	ldr	r1, [r7, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	9202      	str	r2, [sp, #8]
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	4921      	ldr	r1, [pc, #132]	; (8003bf4 <vTaskStartScheduler+0xb4>)
 8003b70:	4821      	ldr	r0, [pc, #132]	; (8003bf8 <vTaskStartScheduler+0xb8>)
 8003b72:	f7ff fd91 	bl	8003698 <xTaskCreateStatic>
 8003b76:	4603      	mov	r3, r0
 8003b78:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <vTaskStartScheduler+0xbc>)
 8003b7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <vTaskStartScheduler+0xbc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b84:	2301      	movs	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e001      	b.n	8003b8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b94:	f000 fdfa 	bl	800478c <xTimerCreateTimerTask>
 8003b98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d116      	bne.n	8003bce <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	613b      	str	r3, [r7, #16]
}
 8003bb2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <vTaskStartScheduler+0xc0>)
 8003bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <vTaskStartScheduler+0xc4>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <vTaskStartScheduler+0xc8>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bc8:	f001 f9ba 	bl	8004f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bcc:	e00e      	b.n	8003bec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd4:	d10a      	bne.n	8003bec <vTaskStartScheduler+0xac>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	60fb      	str	r3, [r7, #12]
}
 8003be8:	bf00      	nop
 8003bea:	e7fe      	b.n	8003bea <vTaskStartScheduler+0xaa>
}
 8003bec:	bf00      	nop
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	08005774 	.word	0x08005774
 8003bf8:	08004225 	.word	0x08004225
 8003bfc:	20000c88 	.word	0x20000c88
 8003c00:	20000c84 	.word	0x20000c84
 8003c04:	20000c70 	.word	0x20000c70
 8003c08:	20000c68 	.word	0x20000c68

08003c0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <vTaskSuspendAll+0x18>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	4a03      	ldr	r2, [pc, #12]	; (8003c24 <vTaskSuspendAll+0x18>)
 8003c18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	20000c8c 	.word	0x20000c8c

08003c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c36:	4b42      	ldr	r3, [pc, #264]	; (8003d40 <xTaskResumeAll+0x118>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	603b      	str	r3, [r7, #0]
}
 8003c50:	bf00      	nop
 8003c52:	e7fe      	b.n	8003c52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c54:	f001 fa16 	bl	8005084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c58:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <xTaskResumeAll+0x118>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	4a38      	ldr	r2, [pc, #224]	; (8003d40 <xTaskResumeAll+0x118>)
 8003c60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <xTaskResumeAll+0x118>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d162      	bne.n	8003d30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c6a:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <xTaskResumeAll+0x11c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d05e      	beq.n	8003d30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c72:	e02f      	b.n	8003cd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c74:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <xTaskResumeAll+0x120>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3318      	adds	r3, #24
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fcd1 	bl	8002628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fccc 	bl	8002628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <xTaskResumeAll+0x124>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d903      	bls.n	8003ca4 <xTaskResumeAll+0x7c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <xTaskResumeAll+0x124>)
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <xTaskResumeAll+0x128>)
 8003cb2:	441a      	add	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f7fe fc57 	bl	800256e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <xTaskResumeAll+0x12c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d302      	bcc.n	8003cd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cce:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <xTaskResumeAll+0x130>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cd4:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <xTaskResumeAll+0x120>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1cb      	bne.n	8003c74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ce2:	f000 fb55 	bl	8004390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ce6:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <xTaskResumeAll+0x134>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d010      	beq.n	8003d14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cf2:	f000 f847 	bl	8003d84 <xTaskIncrementTick>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003cfc:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <xTaskResumeAll+0x130>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f1      	bne.n	8003cf2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <xTaskResumeAll+0x134>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <xTaskResumeAll+0x130>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d009      	beq.n	8003d30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <xTaskResumeAll+0x138>)
 8003d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d30:	f001 f9d8 	bl	80050e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003d34:	68bb      	ldr	r3, [r7, #8]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000c8c 	.word	0x20000c8c
 8003d44:	20000c64 	.word	0x20000c64
 8003d48:	20000c24 	.word	0x20000c24
 8003d4c:	20000c6c 	.word	0x20000c6c
 8003d50:	20000794 	.word	0x20000794
 8003d54:	20000790 	.word	0x20000790
 8003d58:	20000c78 	.word	0x20000c78
 8003d5c:	20000c74 	.word	0x20000c74
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <xTaskGetTickCount+0x1c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d70:	687b      	ldr	r3, [r7, #4]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000c68 	.word	0x20000c68

08003d84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d8e:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <xTaskIncrementTick+0x148>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 808f 	bne.w	8003eb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <xTaskIncrementTick+0x14c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003da0:	4a4b      	ldr	r2, [pc, #300]	; (8003ed0 <xTaskIncrementTick+0x14c>)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d120      	bne.n	8003dee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dac:	4b49      	ldr	r3, [pc, #292]	; (8003ed4 <xTaskIncrementTick+0x150>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <xTaskIncrementTick+0x48>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	603b      	str	r3, [r7, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <xTaskIncrementTick+0x46>
 8003dcc:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <xTaskIncrementTick+0x150>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <xTaskIncrementTick+0x154>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3f      	ldr	r2, [pc, #252]	; (8003ed4 <xTaskIncrementTick+0x150>)
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4a3f      	ldr	r2, [pc, #252]	; (8003ed8 <xTaskIncrementTick+0x154>)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b3e      	ldr	r3, [pc, #248]	; (8003edc <xTaskIncrementTick+0x158>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	4a3d      	ldr	r2, [pc, #244]	; (8003edc <xTaskIncrementTick+0x158>)
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	f000 fad1 	bl	8004390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dee:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <xTaskIncrementTick+0x15c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d349      	bcc.n	8003e8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df8:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <xTaskIncrementTick+0x150>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e02:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <xTaskIncrementTick+0x15c>)
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e08:	601a      	str	r2, [r3, #0]
					break;
 8003e0a:	e03f      	b.n	8003e8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0c:	4b31      	ldr	r3, [pc, #196]	; (8003ed4 <xTaskIncrementTick+0x150>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d203      	bcs.n	8003e2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e24:	4a2e      	ldr	r2, [pc, #184]	; (8003ee0 <xTaskIncrementTick+0x15c>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e2a:	e02f      	b.n	8003e8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fbf9 	bl	8002628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	3318      	adds	r3, #24
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fbf0 	bl	8002628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <xTaskIncrementTick+0x160>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d903      	bls.n	8003e5c <xTaskIncrementTick+0xd8>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4a22      	ldr	r2, [pc, #136]	; (8003ee4 <xTaskIncrementTick+0x160>)
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4a1f      	ldr	r2, [pc, #124]	; (8003ee8 <xTaskIncrementTick+0x164>)
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7fe fb7b 	bl	800256e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <xTaskIncrementTick+0x168>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d3b8      	bcc.n	8003df8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e86:	2301      	movs	r3, #1
 8003e88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e8a:	e7b5      	b.n	8003df8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <xTaskIncrementTick+0x168>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	4915      	ldr	r1, [pc, #84]	; (8003ee8 <xTaskIncrementTick+0x164>)
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d901      	bls.n	8003ea8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <xTaskIncrementTick+0x16c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e004      	b.n	8003ec0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <xTaskIncrementTick+0x170>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	; (8003ef4 <xTaskIncrementTick+0x170>)
 8003ebe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ec0:	697b      	ldr	r3, [r7, #20]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000c8c 	.word	0x20000c8c
 8003ed0:	20000c68 	.word	0x20000c68
 8003ed4:	20000c1c 	.word	0x20000c1c
 8003ed8:	20000c20 	.word	0x20000c20
 8003edc:	20000c7c 	.word	0x20000c7c
 8003ee0:	20000c84 	.word	0x20000c84
 8003ee4:	20000c6c 	.word	0x20000c6c
 8003ee8:	20000794 	.word	0x20000794
 8003eec:	20000790 	.word	0x20000790
 8003ef0:	20000c78 	.word	0x20000c78
 8003ef4:	20000c74 	.word	0x20000c74

08003ef8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003efe:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <vTaskSwitchContext+0xa8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f06:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <vTaskSwitchContext+0xac>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f0c:	e041      	b.n	8003f92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f0e:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <vTaskSwitchContext+0xac>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <vTaskSwitchContext+0xb0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e010      	b.n	8003f3e <vTaskSwitchContext+0x46>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	607b      	str	r3, [r7, #4]
}
 8003f34:	bf00      	nop
 8003f36:	e7fe      	b.n	8003f36 <vTaskSwitchContext+0x3e>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	491b      	ldr	r1, [pc, #108]	; (8003fac <vTaskSwitchContext+0xb4>)
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0e4      	beq.n	8003f1c <vTaskSwitchContext+0x24>
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <vTaskSwitchContext+0xb4>)
 8003f5e:	4413      	add	r3, r2
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3308      	adds	r3, #8
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d104      	bne.n	8003f82 <vTaskSwitchContext+0x8a>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <vTaskSwitchContext+0xb8>)
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4a06      	ldr	r2, [pc, #24]	; (8003fa8 <vTaskSwitchContext+0xb0>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6013      	str	r3, [r2, #0]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000c8c 	.word	0x20000c8c
 8003fa4:	20000c78 	.word	0x20000c78
 8003fa8:	20000c6c 	.word	0x20000c6c
 8003fac:	20000794 	.word	0x20000794
 8003fb0:	20000790 	.word	0x20000790

08003fb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <vTaskPlaceOnEventList+0x44>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3318      	adds	r3, #24
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fe fae7 	bl	80025b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fe8:	2101      	movs	r1, #1
 8003fea:	6838      	ldr	r0, [r7, #0]
 8003fec:	f000 fb7a 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000790 	.word	0x20000790

08003ffc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	617b      	str	r3, [r7, #20]
}
 8004020:	bf00      	nop
 8004022:	e7fe      	b.n	8004022 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <vTaskPlaceOnEventListRestricted+0x54>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3318      	adds	r3, #24
 800402a:	4619      	mov	r1, r3
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f7fe fa9e 	bl	800256e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800403c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	68b8      	ldr	r0, [r7, #8]
 8004042:	f000 fb4f 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
	}
 8004046:	bf00      	nop
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000790 	.word	0x20000790

08004054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	60fb      	str	r3, [r7, #12]
}
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	3318      	adds	r3, #24
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe facf 	bl	8002628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800408a:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <xTaskRemoveFromEventList+0xb0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11d      	bne.n	80040ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3304      	adds	r3, #4
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fac6 	bl	8002628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a0:	4b19      	ldr	r3, [pc, #100]	; (8004108 <xTaskRemoveFromEventList+0xb4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d903      	bls.n	80040b0 <xTaskRemoveFromEventList+0x5c>
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4a16      	ldr	r2, [pc, #88]	; (8004108 <xTaskRemoveFromEventList+0xb4>)
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4a13      	ldr	r2, [pc, #76]	; (800410c <xTaskRemoveFromEventList+0xb8>)
 80040be:	441a      	add	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f7fe fa51 	bl	800256e <vListInsertEnd>
 80040cc:	e005      	b.n	80040da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3318      	adds	r3, #24
 80040d2:	4619      	mov	r1, r3
 80040d4:	480e      	ldr	r0, [pc, #56]	; (8004110 <xTaskRemoveFromEventList+0xbc>)
 80040d6:	f7fe fa4a 	bl	800256e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <xTaskRemoveFromEventList+0xc0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d905      	bls.n	80040f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <xTaskRemoveFromEventList+0xc4>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e001      	b.n	80040f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040f8:	697b      	ldr	r3, [r7, #20]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000c8c 	.word	0x20000c8c
 8004108:	20000c6c 	.word	0x20000c6c
 800410c:	20000794 	.word	0x20000794
 8004110:	20000c24 	.word	0x20000c24
 8004114:	20000790 	.word	0x20000790
 8004118:	20000c78 	.word	0x20000c78

0800411c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <vTaskInternalSetTimeOutState+0x24>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <vTaskInternalSetTimeOutState+0x28>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	605a      	str	r2, [r3, #4]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	20000c7c 	.word	0x20000c7c
 8004144:	20000c68 	.word	0x20000c68

08004148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	613b      	str	r3, [r7, #16]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60fb      	str	r3, [r7, #12]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800418a:	f000 ff7b 	bl	8005084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <xTaskCheckForTimeOut+0xbc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a6:	d102      	bne.n	80041ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	e023      	b.n	80041f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <xTaskCheckForTimeOut+0xc0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d007      	beq.n	80041ca <xTaskCheckForTimeOut+0x82>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e015      	b.n	80041f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d20b      	bcs.n	80041ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff9b 	bl	800411c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e004      	b.n	80041f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041f6:	f000 ff75 	bl	80050e4 <vPortExitCritical>

	return xReturn;
 80041fa:	69fb      	ldr	r3, [r7, #28]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000c68 	.word	0x20000c68
 8004208:	20000c7c 	.word	0x20000c7c

0800420c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004210:	4b03      	ldr	r3, [pc, #12]	; (8004220 <vTaskMissedYield+0x14>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]
}
 8004216:	bf00      	nop
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	20000c78 	.word	0x20000c78

08004224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800422c:	f000 f852 	bl	80042d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <prvIdleTask+0x28>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d9f9      	bls.n	800422c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <prvIdleTask+0x2c>)
 800423a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004248:	e7f0      	b.n	800422c <prvIdleTask+0x8>
 800424a:	bf00      	nop
 800424c:	20000794 	.word	0x20000794
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800425a:	2300      	movs	r3, #0
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	e00c      	b.n	800427a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <prvInitialiseTaskLists+0x60>)
 800426c:	4413      	add	r3, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe f950 	bl	8002514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3301      	adds	r3, #1
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b37      	cmp	r3, #55	; 0x37
 800427e:	d9ef      	bls.n	8004260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004280:	480d      	ldr	r0, [pc, #52]	; (80042b8 <prvInitialiseTaskLists+0x64>)
 8004282:	f7fe f947 	bl	8002514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004286:	480d      	ldr	r0, [pc, #52]	; (80042bc <prvInitialiseTaskLists+0x68>)
 8004288:	f7fe f944 	bl	8002514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800428c:	480c      	ldr	r0, [pc, #48]	; (80042c0 <prvInitialiseTaskLists+0x6c>)
 800428e:	f7fe f941 	bl	8002514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004292:	480c      	ldr	r0, [pc, #48]	; (80042c4 <prvInitialiseTaskLists+0x70>)
 8004294:	f7fe f93e 	bl	8002514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004298:	480b      	ldr	r0, [pc, #44]	; (80042c8 <prvInitialiseTaskLists+0x74>)
 800429a:	f7fe f93b 	bl	8002514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <prvInitialiseTaskLists+0x78>)
 80042a0:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <prvInitialiseTaskLists+0x64>)
 80042a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <prvInitialiseTaskLists+0x7c>)
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <prvInitialiseTaskLists+0x68>)
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000794 	.word	0x20000794
 80042b8:	20000bf4 	.word	0x20000bf4
 80042bc:	20000c08 	.word	0x20000c08
 80042c0:	20000c24 	.word	0x20000c24
 80042c4:	20000c38 	.word	0x20000c38
 80042c8:	20000c50 	.word	0x20000c50
 80042cc:	20000c1c 	.word	0x20000c1c
 80042d0:	20000c20 	.word	0x20000c20

080042d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042da:	e019      	b.n	8004310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042dc:	f000 fed2 	bl	8005084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <prvCheckTasksWaitingTermination+0x50>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe f99b 	bl	8002628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <prvCheckTasksWaitingTermination+0x54>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	4a0b      	ldr	r2, [pc, #44]	; (8004328 <prvCheckTasksWaitingTermination+0x54>)
 80042fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <prvCheckTasksWaitingTermination+0x58>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <prvCheckTasksWaitingTermination+0x58>)
 8004304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004306:	f000 feed 	bl	80050e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f810 	bl	8004330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <prvCheckTasksWaitingTermination+0x58>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e1      	bne.n	80042dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000c38 	.word	0x20000c38
 8004328:	20000c64 	.word	0x20000c64
 800432c:	20000c4c 	.word	0x20000c4c

08004330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4618      	mov	r0, r3
 8004348:	f001 f88a 	bl	8005460 <vPortFree>
				vPortFree( pxTCB );
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f001 f887 	bl	8005460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004352:	e018      	b.n	8004386 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800435a:	2b01      	cmp	r3, #1
 800435c:	d103      	bne.n	8004366 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f001 f87e 	bl	8005460 <vPortFree>
	}
 8004364:	e00f      	b.n	8004386 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800436c:	2b02      	cmp	r3, #2
 800436e:	d00a      	beq.n	8004386 <prvDeleteTCB+0x56>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60fb      	str	r3, [r7, #12]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <prvDeleteTCB+0x54>
	}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <prvResetNextTaskUnblockTime+0x38>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <prvResetNextTaskUnblockTime+0x3c>)
 80043a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043a8:	e008      	b.n	80043bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <prvResetNextTaskUnblockTime+0x38>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a04      	ldr	r2, [pc, #16]	; (80043cc <prvResetNextTaskUnblockTime+0x3c>)
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000c1c 	.word	0x20000c1c
 80043cc:	20000c84 	.word	0x20000c84

080043d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <xTaskGetSchedulerState+0x34>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043de:	2301      	movs	r3, #1
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	e008      	b.n	80043f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <xTaskGetSchedulerState+0x38>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043ec:	2302      	movs	r3, #2
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	e001      	b.n	80043f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043f6:	687b      	ldr	r3, [r7, #4]
	}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	20000c70 	.word	0x20000c70
 8004408:	20000c8c 	.word	0x20000c8c

0800440c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d051      	beq.n	80044c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <xTaskPriorityInherit+0xc4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	429a      	cmp	r2, r3
 800442e:	d241      	bcs.n	80044b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	db06      	blt.n	8004446 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <xTaskPriorityInherit+0xc4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6959      	ldr	r1, [r3, #20]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <xTaskPriorityInherit+0xc8>)
 8004458:	4413      	add	r3, r2
 800445a:	4299      	cmp	r1, r3
 800445c:	d122      	bne.n	80044a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3304      	adds	r3, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe f8e0 	bl	8002628 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <xTaskPriorityInherit+0xc4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004476:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <xTaskPriorityInherit+0xcc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d903      	bls.n	8004486 <xTaskPriorityInherit+0x7a>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <xTaskPriorityInherit+0xcc>)
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <xTaskPriorityInherit+0xc8>)
 8004494:	441a      	add	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	3304      	adds	r3, #4
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f7fe f866 	bl	800256e <vListInsertEnd>
 80044a2:	e004      	b.n	80044ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <xTaskPriorityInherit+0xc4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	e008      	b.n	80044c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <xTaskPriorityInherit+0xc4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	429a      	cmp	r2, r3
 80044c0:	d201      	bcs.n	80044c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80044c2:	2301      	movs	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044c6:	68fb      	ldr	r3, [r7, #12]
	}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000790 	.word	0x20000790
 80044d4:	20000794 	.word	0x20000794
 80044d8:	20000c6c 	.word	0x20000c6c

080044dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d056      	beq.n	80045a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044f2:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <xTaskPriorityDisinherit+0xd0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d00a      	beq.n	8004512 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60fb      	str	r3, [r7, #12]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	60bb      	str	r3, [r7, #8]
}
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004534:	1e5a      	subs	r2, r3, #1
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	429a      	cmp	r2, r3
 8004544:	d02c      	beq.n	80045a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	2b00      	cmp	r3, #0
 800454c:	d128      	bne.n	80045a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3304      	adds	r3, #4
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe f868 	bl	8002628 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <xTaskPriorityDisinherit+0xd4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d903      	bls.n	8004580 <xTaskPriorityDisinherit+0xa4>
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <xTaskPriorityDisinherit+0xd4>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <xTaskPriorityDisinherit+0xd8>)
 800458e:	441a      	add	r2, r3
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fd ffe9 	bl	800256e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045a0:	697b      	ldr	r3, [r7, #20]
	}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000790 	.word	0x20000790
 80045b0:	20000c6c 	.word	0x20000c6c
 80045b4:	20000794 	.word	0x20000794

080045b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d06a      	beq.n	80046a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	60fb      	str	r3, [r7, #12]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d902      	bls.n	80045fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e002      	b.n	8004604 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	429a      	cmp	r2, r3
 800460c:	d04b      	beq.n	80046a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	429a      	cmp	r2, r3
 8004616:	d146      	bne.n	80046a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	429a      	cmp	r2, r3
 8004620:	d10a      	bne.n	8004638 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	60bb      	str	r3, [r7, #8]
}
 8004634:	bf00      	nop
 8004636:	e7fe      	b.n	8004636 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	db04      	blt.n	8004656 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	6959      	ldr	r1, [r3, #20]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004666:	4413      	add	r3, r2
 8004668:	4299      	cmp	r1, r3
 800466a:	d11c      	bne.n	80046a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	3304      	adds	r3, #4
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd ffd9 	bl	8002628 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d903      	bls.n	800468a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004698:	441a      	add	r2, r3
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7fd ff64 	bl	800256e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046a6:	bf00      	nop
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000790 	.word	0x20000790
 80046b4:	20000794 	.word	0x20000794
 80046b8:	20000c6c 	.word	0x20000c6c

080046bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046ce:	3201      	adds	r2, #1
 80046d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80046d2:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80046d4:	681b      	ldr	r3, [r3, #0]
	}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	20000790 	.word	0x20000790

080046e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046ee:	4b21      	ldr	r3, [pc, #132]	; (8004774 <prvAddCurrentTaskToDelayedList+0x90>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046f4:	4b20      	ldr	r3, [pc, #128]	; (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fd ff94 	bl	8002628 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004706:	d10a      	bne.n	800471e <prvAddCurrentTaskToDelayedList+0x3a>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4819      	ldr	r0, [pc, #100]	; (800477c <prvAddCurrentTaskToDelayedList+0x98>)
 8004718:	f7fd ff29 	bl	800256e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800471c:	e026      	b.n	800476c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4413      	add	r3, r2
 8004724:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	429a      	cmp	r2, r3
 8004734:	d209      	bcs.n	800474a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f7fd ff37 	bl	80025b6 <vListInsert>
}
 8004748:	e010      	b.n	800476c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <prvAddCurrentTaskToDelayedList+0xa0>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <prvAddCurrentTaskToDelayedList+0x94>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f7fd ff2d 	bl	80025b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <prvAddCurrentTaskToDelayedList+0xa4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	d202      	bcs.n	800476c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004766:	4a08      	ldr	r2, [pc, #32]	; (8004788 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6013      	str	r3, [r2, #0]
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000c68 	.word	0x20000c68
 8004778:	20000790 	.word	0x20000790
 800477c:	20000c50 	.word	0x20000c50
 8004780:	20000c20 	.word	0x20000c20
 8004784:	20000c1c 	.word	0x20000c1c
 8004788:	20000c84 	.word	0x20000c84

0800478c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004796:	f000 fb07 	bl	8004da8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800479a:	4b1c      	ldr	r3, [pc, #112]	; (800480c <xTimerCreateTimerTask+0x80>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d021      	beq.n	80047e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047aa:	1d3a      	adds	r2, r7, #4
 80047ac:	f107 0108 	add.w	r1, r7, #8
 80047b0:	f107 030c 	add.w	r3, r7, #12
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fd fe93 	bl	80024e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	2302      	movs	r3, #2
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2300      	movs	r3, #0
 80047ca:	460a      	mov	r2, r1
 80047cc:	4910      	ldr	r1, [pc, #64]	; (8004810 <xTimerCreateTimerTask+0x84>)
 80047ce:	4811      	ldr	r0, [pc, #68]	; (8004814 <xTimerCreateTimerTask+0x88>)
 80047d0:	f7fe ff62 	bl	8003698 <xTaskCreateStatic>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4a10      	ldr	r2, [pc, #64]	; (8004818 <xTimerCreateTimerTask+0x8c>)
 80047d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047da:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <xTimerCreateTimerTask+0x8c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047e2:	2301      	movs	r3, #1
 80047e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	613b      	str	r3, [r7, #16]
}
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004802:	697b      	ldr	r3, [r7, #20]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000cc0 	.word	0x20000cc0
 8004810:	0800577c 	.word	0x0800577c
 8004814:	08004951 	.word	0x08004951
 8004818:	20000cc4 	.word	0x20000cc4

0800481c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800482a:	2300      	movs	r3, #0
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	623b      	str	r3, [r7, #32]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800484a:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <xTimerGenericCommand+0x98>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d02a      	beq.n	80048a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b05      	cmp	r3, #5
 8004862:	dc18      	bgt.n	8004896 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004864:	f7ff fdb4 	bl	80043d0 <xTaskGetSchedulerState>
 8004868:	4603      	mov	r3, r0
 800486a:	2b02      	cmp	r3, #2
 800486c:	d109      	bne.n	8004882 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <xTimerGenericCommand+0x98>)
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	f107 0110 	add.w	r1, r7, #16
 8004876:	2300      	movs	r3, #0
 8004878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800487a:	f7fe f8a7 	bl	80029cc <xQueueGenericSend>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24
 8004880:	e012      	b.n	80048a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004882:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <xTimerGenericCommand+0x98>)
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	f107 0110 	add.w	r1, r7, #16
 800488a:	2300      	movs	r3, #0
 800488c:	2200      	movs	r2, #0
 800488e:	f7fe f89d 	bl	80029cc <xQueueGenericSend>
 8004892:	6278      	str	r0, [r7, #36]	; 0x24
 8004894:	e008      	b.n	80048a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <xTimerGenericCommand+0x98>)
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	f107 0110 	add.w	r1, r7, #16
 800489e:	2300      	movs	r3, #0
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	f7fe f991 	bl	8002bc8 <xQueueGenericSendFromISR>
 80048a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3728      	adds	r7, #40	; 0x28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000cc0 	.word	0x20000cc0

080048b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af02      	add	r7, sp, #8
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c2:	4b22      	ldr	r3, [pc, #136]	; (800494c <prvProcessExpiredTimer+0x94>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fd fea9 	bl	8002628 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d022      	beq.n	800492a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	18d1      	adds	r1, r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	6978      	ldr	r0, [r7, #20]
 80048f2:	f000 f8d1 	bl	8004a98 <prvInsertTimerInActiveList>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01f      	beq.n	800493c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048fc:	2300      	movs	r3, #0
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	2100      	movs	r1, #0
 8004906:	6978      	ldr	r0, [r7, #20]
 8004908:	f7ff ff88 	bl	800481c <xTimerGenericCommand>
 800490c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d113      	bne.n	800493c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	60fb      	str	r3, [r7, #12]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	b2da      	uxtb	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	6978      	ldr	r0, [r7, #20]
 8004942:	4798      	blx	r3
}
 8004944:	bf00      	nop
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20000cb8 	.word	0x20000cb8

08004950 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f857 	bl	8004a10 <prvGetNextExpireTime>
 8004962:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4619      	mov	r1, r3
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f803 	bl	8004974 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800496e:	f000 f8d5 	bl	8004b1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004972:	e7f1      	b.n	8004958 <prvTimerTask+0x8>

08004974 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800497e:	f7ff f945 	bl	8003c0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004982:	f107 0308 	add.w	r3, r7, #8
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f866 	bl	8004a58 <prvSampleTimeNow>
 800498c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d130      	bne.n	80049f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <prvProcessTimerOrBlockTask+0x3c>
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d806      	bhi.n	80049b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049a2:	f7ff f941 	bl	8003c28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff85 	bl	80048b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049ae:	e024      	b.n	80049fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049b6:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <prvProcessTimerOrBlockTask+0x90>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <prvProcessTimerOrBlockTask+0x50>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <prvProcessTimerOrBlockTask+0x52>
 80049c4:	2300      	movs	r3, #0
 80049c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <prvProcessTimerOrBlockTask+0x94>)
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	4619      	mov	r1, r3
 80049d6:	f7fe fe2b 	bl	8003630 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049da:	f7ff f925 	bl	8003c28 <xTaskResumeAll>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <prvProcessTimerOrBlockTask+0x98>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
}
 80049f4:	e001      	b.n	80049fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049f6:	f7ff f917 	bl	8003c28 <xTaskResumeAll>
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000cbc 	.word	0x20000cbc
 8004a08:	20000cc0 	.word	0x20000cc0
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <prvGetNextExpireTime+0x44>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <prvGetNextExpireTime+0x16>
 8004a22:	2201      	movs	r2, #1
 8004a24:	e000      	b.n	8004a28 <prvGetNextExpireTime+0x18>
 8004a26:	2200      	movs	r2, #0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <prvGetNextExpireTime+0x44>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e001      	b.n	8004a44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	20000cb8 	.word	0x20000cb8

08004a58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a60:	f7ff f980 	bl	8003d64 <xTaskGetTickCount>
 8004a64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <prvSampleTimeNow+0x3c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d205      	bcs.n	8004a7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a70:	f000 f936 	bl	8004ce0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e002      	b.n	8004a82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a82:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <prvSampleTimeNow+0x3c>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a88:	68fb      	ldr	r3, [r7, #12]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000cc8 	.word	0x20000cc8

08004a98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d812      	bhi.n	8004ae4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	1ad2      	subs	r2, r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d302      	bcc.n	8004ad2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e01b      	b.n	8004b0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <prvInsertTimerInActiveList+0x7c>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7fd fd6a 	bl	80025b6 <vListInsert>
 8004ae2:	e012      	b.n	8004b0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d206      	bcs.n	8004afa <prvInsertTimerInActiveList+0x62>
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004af4:	2301      	movs	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e007      	b.n	8004b0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004afa:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <prvInsertTimerInActiveList+0x80>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3304      	adds	r3, #4
 8004b02:	4619      	mov	r1, r3
 8004b04:	4610      	mov	r0, r2
 8004b06:	f7fd fd56 	bl	80025b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b0a:	697b      	ldr	r3, [r7, #20]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000cbc 	.word	0x20000cbc
 8004b18:	20000cb8 	.word	0x20000cb8

08004b1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08e      	sub	sp, #56	; 0x38
 8004b20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b22:	e0ca      	b.n	8004cba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da18      	bge.n	8004b5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	61fb      	str	r3, [r7, #28]
}
 8004b48:	bf00      	nop
 8004b4a:	e7fe      	b.n	8004b4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b52:	6850      	ldr	r0, [r2, #4]
 8004b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b56:	6892      	ldr	r2, [r2, #8]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f2c0 80ab 	blt.w	8004cba <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	3304      	adds	r3, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fd fd57 	bl	8002628 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b7a:	463b      	mov	r3, r7
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff6b 	bl	8004a58 <prvSampleTimeNow>
 8004b82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	f200 8096 	bhi.w	8004cb8 <prvProcessReceivedCommands+0x19c>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <prvProcessReceivedCommands+0x78>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004bbd 	.word	0x08004bbd
 8004ba0:	08004c31 	.word	0x08004c31
 8004ba4:	08004c45 	.word	0x08004c45
 8004ba8:	08004c8f 	.word	0x08004c8f
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bbd 	.word	0x08004bbd
 8004bb4:	08004c31 	.word	0x08004c31
 8004bb8:	08004c45 	.word	0x08004c45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	18d1      	adds	r1, r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bdc:	f7ff ff5c 	bl	8004a98 <prvInsertTimerInActiveList>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d069      	beq.n	8004cba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05e      	beq.n	8004cba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	441a      	add	r2, r3
 8004c04:	2300      	movs	r3, #0
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c0e:	f7ff fe05 	bl	800481c <xTimerGenericCommand>
 8004c12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d14f      	bne.n	8004cba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	61bb      	str	r3, [r7, #24]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004c42:	e03a      	b.n	8004cba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	617b      	str	r3, [r7, #20]
}
 8004c76:	bf00      	nop
 8004c78:	e7fe      	b.n	8004c78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	18d1      	adds	r1, r2, r3
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c88:	f7ff ff06 	bl	8004a98 <prvInsertTimerInActiveList>
					break;
 8004c8c:	e015      	b.n	8004cba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9e:	f000 fbdf 	bl	8005460 <vPortFree>
 8004ca2:	e00a      	b.n	8004cba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cb6:	e000      	b.n	8004cba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004cb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cba:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <prvProcessReceivedCommands+0x1c0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	1d39      	adds	r1, r7, #4
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe f8a8 	bl	8002e18 <xQueueReceive>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f47f af2a 	bne.w	8004b24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	3730      	adds	r7, #48	; 0x30
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000cc0 	.word	0x20000cc0

08004ce0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ce6:	e048      	b.n	8004d7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <prvSwitchTimerLists+0xc0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf2:	4b2b      	ldr	r3, [pc, #172]	; (8004da0 <prvSwitchTimerLists+0xc0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fd fc91 	bl	8002628 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d02e      	beq.n	8004d7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d90e      	bls.n	8004d4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d3a:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <prvSwitchTimerLists+0xc0>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3304      	adds	r3, #4
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f7fd fc36 	bl	80025b6 <vListInsert>
 8004d4a:	e016      	b.n	8004d7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2300      	movs	r3, #0
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	2100      	movs	r1, #0
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fd60 	bl	800481c <xTimerGenericCommand>
 8004d5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	603b      	str	r3, [r7, #0]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <prvSwitchTimerLists+0xc0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1b1      	bne.n	8004ce8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <prvSwitchTimerLists+0xc0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <prvSwitchTimerLists+0xc4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <prvSwitchTimerLists+0xc0>)
 8004d90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d92:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <prvSwitchTimerLists+0xc4>)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6013      	str	r3, [r2, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000cb8 	.word	0x20000cb8
 8004da4:	20000cbc 	.word	0x20000cbc

08004da8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dae:	f000 f969 	bl	8005084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004db2:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <prvCheckForValidListAndQueue+0x60>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d120      	bne.n	8004dfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dba:	4814      	ldr	r0, [pc, #80]	; (8004e0c <prvCheckForValidListAndQueue+0x64>)
 8004dbc:	f7fd fbaa 	bl	8002514 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dc0:	4813      	ldr	r0, [pc, #76]	; (8004e10 <prvCheckForValidListAndQueue+0x68>)
 8004dc2:	f7fd fba7 	bl	8002514 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dc6:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <prvCheckForValidListAndQueue+0x6c>)
 8004dc8:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <prvCheckForValidListAndQueue+0x64>)
 8004dca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004dcc:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <prvCheckForValidListAndQueue+0x70>)
 8004dce:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <prvCheckForValidListAndQueue+0x68>)
 8004dd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <prvCheckForValidListAndQueue+0x74>)
 8004dd8:	4a11      	ldr	r2, [pc, #68]	; (8004e20 <prvCheckForValidListAndQueue+0x78>)
 8004dda:	2110      	movs	r1, #16
 8004ddc:	200a      	movs	r0, #10
 8004dde:	f7fd fcb5 	bl	800274c <xQueueGenericCreateStatic>
 8004de2:	4603      	mov	r3, r0
 8004de4:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <prvCheckForValidListAndQueue+0x60>)
 8004de6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <prvCheckForValidListAndQueue+0x60>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <prvCheckForValidListAndQueue+0x60>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	490b      	ldr	r1, [pc, #44]	; (8004e24 <prvCheckForValidListAndQueue+0x7c>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fbc6 	bl	8003588 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dfc:	f000 f972 	bl	80050e4 <vPortExitCritical>
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000cc0 	.word	0x20000cc0
 8004e0c:	20000c90 	.word	0x20000c90
 8004e10:	20000ca4 	.word	0x20000ca4
 8004e14:	20000cb8 	.word	0x20000cb8
 8004e18:	20000cbc 	.word	0x20000cbc
 8004e1c:	20000d6c 	.word	0x20000d6c
 8004e20:	20000ccc 	.word	0x20000ccc
 8004e24:	08005784 	.word	0x08005784

08004e28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3b04      	subs	r3, #4
 8004e38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3b04      	subs	r3, #4
 8004e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f023 0201 	bic.w	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e58:	4a0c      	ldr	r2, [pc, #48]	; (8004e8c <pxPortInitialiseStack+0x64>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b14      	subs	r3, #20
 8004e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b04      	subs	r3, #4
 8004e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f06f 0202 	mvn.w	r2, #2
 8004e76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3b20      	subs	r3, #32
 8004e7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	08004e91 	.word	0x08004e91

08004e90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <prvTaskExitError+0x54>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea2:	d00a      	beq.n	8004eba <prvTaskExitError+0x2a>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <prvTaskExitError+0x28>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60bb      	str	r3, [r7, #8]
}
 8004ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ece:	bf00      	nop
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0fc      	beq.n	8004ed0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ed6:	bf00      	nop
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	2000000c 	.word	0x2000000c
	...

08004ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <pxCurrentTCBConst2>)
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	f380 8809 	msr	PSP, r0
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8811 	msr	BASEPRI, r0
 8004f0a:	4770      	bx	lr
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst2>:
 8004f10:	20000790 	.word	0x20000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f18:	4808      	ldr	r0, [pc, #32]	; (8004f3c <prvPortStartFirstTask+0x24>)
 8004f1a:	6800      	ldr	r0, [r0, #0]
 8004f1c:	6800      	ldr	r0, [r0, #0]
 8004f1e:	f380 8808 	msr	MSP, r0
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8814 	msr	CONTROL, r0
 8004f2a:	b662      	cpsie	i
 8004f2c:	b661      	cpsie	f
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	df00      	svc	0
 8004f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f3a:	bf00      	nop
 8004f3c:	e000ed08 	.word	0xe000ed08

08004f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f46:	4b46      	ldr	r3, [pc, #280]	; (8005060 <xPortStartScheduler+0x120>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a46      	ldr	r2, [pc, #280]	; (8005064 <xPortStartScheduler+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10a      	bne.n	8004f66 <xPortStartScheduler+0x26>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f66:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <xPortStartScheduler+0x120>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3f      	ldr	r2, [pc, #252]	; (8005068 <xPortStartScheduler+0x128>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10a      	bne.n	8004f86 <xPortStartScheduler+0x46>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60fb      	str	r3, [r7, #12]
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f86:	4b39      	ldr	r3, [pc, #228]	; (800506c <xPortStartScheduler+0x12c>)
 8004f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	22ff      	movs	r2, #255	; 0xff
 8004f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	4b31      	ldr	r3, [pc, #196]	; (8005070 <xPortStartScheduler+0x130>)
 8004fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fae:	4b31      	ldr	r3, [pc, #196]	; (8005074 <xPortStartScheduler+0x134>)
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fb4:	e009      	b.n	8004fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004fb6:	4b2f      	ldr	r3, [pc, #188]	; (8005074 <xPortStartScheduler+0x134>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	4a2d      	ldr	r2, [pc, #180]	; (8005074 <xPortStartScheduler+0x134>)
 8004fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b80      	cmp	r3, #128	; 0x80
 8004fd4:	d0ef      	beq.n	8004fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fd6:	4b27      	ldr	r3, [pc, #156]	; (8005074 <xPortStartScheduler+0x134>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1c3 0307 	rsb	r3, r3, #7
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d00a      	beq.n	8004ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60bb      	str	r3, [r7, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <xPortStartScheduler+0x134>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <xPortStartScheduler+0x134>)
 8005000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005002:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <xPortStartScheduler+0x134>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800500a:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <xPortStartScheduler+0x134>)
 800500c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005016:	4b18      	ldr	r3, [pc, #96]	; (8005078 <xPortStartScheduler+0x138>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a17      	ldr	r2, [pc, #92]	; (8005078 <xPortStartScheduler+0x138>)
 800501c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <xPortStartScheduler+0x138>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a14      	ldr	r2, [pc, #80]	; (8005078 <xPortStartScheduler+0x138>)
 8005028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800502c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800502e:	f000 f8dd 	bl	80051ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <xPortStartScheduler+0x13c>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005038:	f000 f8fc 	bl	8005234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800503c:	4b10      	ldr	r3, [pc, #64]	; (8005080 <xPortStartScheduler+0x140>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0f      	ldr	r2, [pc, #60]	; (8005080 <xPortStartScheduler+0x140>)
 8005042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005048:	f7ff ff66 	bl	8004f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800504c:	f7fe ff54 	bl	8003ef8 <vTaskSwitchContext>
	prvTaskExitError();
 8005050:	f7ff ff1e 	bl	8004e90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	e000ed00 	.word	0xe000ed00
 8005064:	410fc271 	.word	0x410fc271
 8005068:	410fc270 	.word	0x410fc270
 800506c:	e000e400 	.word	0xe000e400
 8005070:	20000dbc 	.word	0x20000dbc
 8005074:	20000dc0 	.word	0x20000dc0
 8005078:	e000ed20 	.word	0xe000ed20
 800507c:	2000000c 	.word	0x2000000c
 8005080:	e000ef34 	.word	0xe000ef34

08005084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	607b      	str	r3, [r7, #4]
}
 800509c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800509e:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <vPortEnterCritical+0x58>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3301      	adds	r3, #1
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <vPortEnterCritical+0x58>)
 80050a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <vPortEnterCritical+0x58>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d10f      	bne.n	80050d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortEnterCritical+0x5c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	603b      	str	r3, [r7, #0]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <vPortEnterCritical+0x4a>
	}
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	2000000c 	.word	0x2000000c
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ea:	4b12      	ldr	r3, [pc, #72]	; (8005134 <vPortExitCritical+0x50>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <vPortExitCritical+0x24>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	607b      	str	r3, [r7, #4]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <vPortExitCritical+0x50>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3b01      	subs	r3, #1
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <vPortExitCritical+0x50>)
 8005110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <vPortExitCritical+0x50>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d105      	bne.n	8005126 <vPortExitCritical+0x42>
 800511a:	2300      	movs	r3, #0
 800511c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f383 8811 	msr	BASEPRI, r3
}
 8005124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	2000000c 	.word	0x2000000c
	...

08005140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005140:	f3ef 8009 	mrs	r0, PSP
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <pxCurrentTCBConst>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f01e 0f10 	tst.w	lr, #16
 8005150:	bf08      	it	eq
 8005152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	6010      	str	r0, [r2, #0]
 800515c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005164:	f380 8811 	msr	BASEPRI, r0
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f7fe fec2 	bl	8003ef8 <vTaskSwitchContext>
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	f380 8811 	msr	BASEPRI, r0
 800517c:	bc09      	pop	{r0, r3}
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	6808      	ldr	r0, [r1, #0]
 8005182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005186:	f01e 0f10 	tst.w	lr, #16
 800518a:	bf08      	it	eq
 800518c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005190:	f380 8809 	msr	PSP, r0
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w

080051a0 <pxCurrentTCBConst>:
 80051a0:	20000790 	.word	0x20000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
}
 80051c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051c2:	f7fe fddf 	bl	8003d84 <xTaskIncrementTick>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <xPortSysTickHandler+0x40>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f383 8811 	msr	BASEPRI, r3
}
 80051de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <vPortSetupTimerInterrupt+0x34>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <vPortSetupTimerInterrupt+0x38>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <vPortSetupTimerInterrupt+0x3c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0a      	ldr	r2, [pc, #40]	; (800522c <vPortSetupTimerInterrupt+0x40>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	099b      	lsrs	r3, r3, #6
 8005208:	4a09      	ldr	r2, [pc, #36]	; (8005230 <vPortSetupTimerInterrupt+0x44>)
 800520a:	3b01      	subs	r3, #1
 800520c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800520e:	4b04      	ldr	r3, [pc, #16]	; (8005220 <vPortSetupTimerInterrupt+0x34>)
 8005210:	2207      	movs	r2, #7
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	e000e010 	.word	0xe000e010
 8005224:	e000e018 	.word	0xe000e018
 8005228:	20000000 	.word	0x20000000
 800522c:	10624dd3 	.word	0x10624dd3
 8005230:	e000e014 	.word	0xe000e014

08005234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005244 <vPortEnableVFP+0x10>
 8005238:	6801      	ldr	r1, [r0, #0]
 800523a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800523e:	6001      	str	r1, [r0, #0]
 8005240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005242:	bf00      	nop
 8005244:	e000ed88 	.word	0xe000ed88

08005248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800524e:	f3ef 8305 	mrs	r3, IPSR
 8005252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d914      	bls.n	8005284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800525a:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <vPortValidateInterruptPriority+0x70>)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005264:	4b15      	ldr	r3, [pc, #84]	; (80052bc <vPortValidateInterruptPriority+0x74>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	7afa      	ldrb	r2, [r7, #11]
 800526a:	429a      	cmp	r2, r3
 800526c:	d20a      	bcs.n	8005284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
}
 8005280:	bf00      	nop
 8005282:	e7fe      	b.n	8005282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005284:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <vPortValidateInterruptPriority+0x78>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800528c:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <vPortValidateInterruptPriority+0x7c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d90a      	bls.n	80052aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	603b      	str	r3, [r7, #0]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <vPortValidateInterruptPriority+0x60>
	}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	e000e3f0 	.word	0xe000e3f0
 80052bc:	20000dbc 	.word	0x20000dbc
 80052c0:	e000ed0c 	.word	0xe000ed0c
 80052c4:	20000dc0 	.word	0x20000dc0

080052c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052d4:	f7fe fc9a 	bl	8003c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052d8:	4b5b      	ldr	r3, [pc, #364]	; (8005448 <pvPortMalloc+0x180>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052e0:	f000 f920 	bl	8005524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052e4:	4b59      	ldr	r3, [pc, #356]	; (800544c <pvPortMalloc+0x184>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 8093 	bne.w	8005418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01d      	beq.n	8005334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052f8:	2208      	movs	r2, #8
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	2b00      	cmp	r3, #0
 8005308:	d014      	beq.n	8005334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f023 0307 	bic.w	r3, r3, #7
 8005310:	3308      	adds	r3, #8
 8005312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <pvPortMalloc+0x6c>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	617b      	str	r3, [r7, #20]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d06e      	beq.n	8005418 <pvPortMalloc+0x150>
 800533a:	4b45      	ldr	r3, [pc, #276]	; (8005450 <pvPortMalloc+0x188>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d869      	bhi.n	8005418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005344:	4b43      	ldr	r3, [pc, #268]	; (8005454 <pvPortMalloc+0x18c>)
 8005346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005348:	4b42      	ldr	r3, [pc, #264]	; (8005454 <pvPortMalloc+0x18c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800534e:	e004      	b.n	800535a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	d903      	bls.n	800536c <pvPortMalloc+0xa4>
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f1      	bne.n	8005350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800536c:	4b36      	ldr	r3, [pc, #216]	; (8005448 <pvPortMalloc+0x180>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005372:	429a      	cmp	r2, r3
 8005374:	d050      	beq.n	8005418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2208      	movs	r2, #8
 800537c:	4413      	add	r3, r2
 800537e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	2308      	movs	r3, #8
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	429a      	cmp	r2, r3
 8005396:	d91f      	bls.n	80053d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <pvPortMalloc+0xf8>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	613b      	str	r3, [r7, #16]
}
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	1ad2      	subs	r2, r2, r3
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053d2:	69b8      	ldr	r0, [r7, #24]
 80053d4:	f000 f908 	bl	80055e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053d8:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <pvPortMalloc+0x188>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <pvPortMalloc+0x188>)
 80053e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053e6:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <pvPortMalloc+0x188>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <pvPortMalloc+0x190>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d203      	bcs.n	80053fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053f2:	4b17      	ldr	r3, [pc, #92]	; (8005450 <pvPortMalloc+0x188>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a18      	ldr	r2, [pc, #96]	; (8005458 <pvPortMalloc+0x190>)
 80053f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	4b13      	ldr	r3, [pc, #76]	; (800544c <pvPortMalloc+0x184>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	431a      	orrs	r2, r3
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <pvPortMalloc+0x194>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3301      	adds	r3, #1
 8005414:	4a11      	ldr	r2, [pc, #68]	; (800545c <pvPortMalloc+0x194>)
 8005416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005418:	f7fe fc06 	bl	8003c28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <pvPortMalloc+0x174>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	60fb      	str	r3, [r7, #12]
}
 8005438:	bf00      	nop
 800543a:	e7fe      	b.n	800543a <pvPortMalloc+0x172>
	return pvReturn;
 800543c:	69fb      	ldr	r3, [r7, #28]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3728      	adds	r7, #40	; 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20001d6c 	.word	0x20001d6c
 800544c:	20001d80 	.word	0x20001d80
 8005450:	20001d70 	.word	0x20001d70
 8005454:	20001d64 	.word	0x20001d64
 8005458:	20001d74 	.word	0x20001d74
 800545c:	20001d78 	.word	0x20001d78

08005460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d04d      	beq.n	800550e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005472:	2308      	movs	r3, #8
 8005474:	425b      	negs	r3, r3
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4413      	add	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4b24      	ldr	r3, [pc, #144]	; (8005518 <vPortFree+0xb8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <vPortFree+0x44>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	60fb      	str	r3, [r7, #12]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <vPortFree+0x62>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60bb      	str	r3, [r7, #8]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <vPortFree+0xb8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01e      	beq.n	800550e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d11a      	bne.n	800550e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <vPortFree+0xb8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054e8:	f7fe fb90 	bl	8003c0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <vPortFree+0xbc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <vPortFree+0xbc>)
 80054f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054fa:	6938      	ldr	r0, [r7, #16]
 80054fc:	f000 f874 	bl	80055e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <vPortFree+0xc0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	4a06      	ldr	r2, [pc, #24]	; (8005520 <vPortFree+0xc0>)
 8005508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800550a:	f7fe fb8d 	bl	8003c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800550e:	bf00      	nop
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20001d80 	.word	0x20001d80
 800551c:	20001d70 	.word	0x20001d70
 8005520:	20001d7c 	.word	0x20001d7c

08005524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800552a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800552e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005530:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <prvHeapInit+0xac>)
 8005532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00c      	beq.n	8005558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3307      	adds	r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0307 	bic.w	r3, r3, #7
 800554a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	4a1f      	ldr	r2, [pc, #124]	; (80055d0 <prvHeapInit+0xac>)
 8005554:	4413      	add	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800555c:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <prvHeapInit+0xb0>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <prvHeapInit+0xb0>)
 8005564:	2200      	movs	r2, #0
 8005566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	4413      	add	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005570:	2208      	movs	r2, #8
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0307 	bic.w	r3, r3, #7
 800557e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <prvHeapInit+0xb4>)
 8005584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <prvHeapInit+0xb4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2200      	movs	r2, #0
 800558c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <prvHeapInit+0xb4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	1ad2      	subs	r2, r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055a4:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <prvHeapInit+0xb4>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <prvHeapInit+0xb8>)
 80055b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <prvHeapInit+0xbc>)
 80055ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055bc:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <prvHeapInit+0xc0>)
 80055be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055c2:	601a      	str	r2, [r3, #0]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20000dc4 	.word	0x20000dc4
 80055d4:	20001d64 	.word	0x20001d64
 80055d8:	20001d6c 	.word	0x20001d6c
 80055dc:	20001d74 	.word	0x20001d74
 80055e0:	20001d70 	.word	0x20001d70
 80055e4:	20001d80 	.word	0x20001d80

080055e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055f0:	4b28      	ldr	r3, [pc, #160]	; (8005694 <prvInsertBlockIntoFreeList+0xac>)
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e002      	b.n	80055fc <prvInsertBlockIntoFreeList+0x14>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	d8f7      	bhi.n	80055f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4413      	add	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d108      	bne.n	800562a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	441a      	add	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	441a      	add	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d118      	bne.n	8005670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b15      	ldr	r3, [pc, #84]	; (8005698 <prvInsertBlockIntoFreeList+0xb0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d00d      	beq.n	8005666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	441a      	add	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e008      	b.n	8005678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <prvInsertBlockIntoFreeList+0xb0>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e003      	b.n	8005678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d002      	beq.n	8005686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20001d64 	.word	0x20001d64
 8005698:	20001d6c 	.word	0x20001d6c

0800569c <memset>:
 800569c:	4402      	add	r2, r0
 800569e:	4603      	mov	r3, r0
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d100      	bne.n	80056a6 <memset+0xa>
 80056a4:	4770      	bx	lr
 80056a6:	f803 1b01 	strb.w	r1, [r3], #1
 80056aa:	e7f9      	b.n	80056a0 <memset+0x4>

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	4d0d      	ldr	r5, [pc, #52]	; (80056e4 <__libc_init_array+0x38>)
 80056b0:	4c0d      	ldr	r4, [pc, #52]	; (80056e8 <__libc_init_array+0x3c>)
 80056b2:	1b64      	subs	r4, r4, r5
 80056b4:	10a4      	asrs	r4, r4, #2
 80056b6:	2600      	movs	r6, #0
 80056b8:	42a6      	cmp	r6, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	4d0b      	ldr	r5, [pc, #44]	; (80056ec <__libc_init_array+0x40>)
 80056be:	4c0c      	ldr	r4, [pc, #48]	; (80056f0 <__libc_init_array+0x44>)
 80056c0:	f000 f826 	bl	8005710 <_init>
 80056c4:	1b64      	subs	r4, r4, r5
 80056c6:	10a4      	asrs	r4, r4, #2
 80056c8:	2600      	movs	r6, #0
 80056ca:	42a6      	cmp	r6, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d4:	4798      	blx	r3
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	f855 3b04 	ldr.w	r3, [r5], #4
 80056de:	4798      	blx	r3
 80056e0:	3601      	adds	r6, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	08005898 	.word	0x08005898
 80056e8:	08005898 	.word	0x08005898
 80056ec:	08005898 	.word	0x08005898
 80056f0:	0800589c 	.word	0x0800589c

080056f4 <memcpy>:
 80056f4:	440a      	add	r2, r1
 80056f6:	4291      	cmp	r1, r2
 80056f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80056fc:	d100      	bne.n	8005700 <memcpy+0xc>
 80056fe:	4770      	bx	lr
 8005700:	b510      	push	{r4, lr}
 8005702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800570a:	4291      	cmp	r1, r2
 800570c:	d1f9      	bne.n	8005702 <memcpy+0xe>
 800570e:	bd10      	pop	{r4, pc}

08005710 <_init>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr

0800571c <_fini>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr


RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007078  08007078  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007078  08007078  00017078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007080  08007080  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e00  20000010  08007098  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e10  08007098  00021e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019aae  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038df  00000000  00000000  00039b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119e  00000000  00000000  0003eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028685  00000000  00000000  0003fc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192bb  00000000  00000000  000682eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc38c  00000000  00000000  000815a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f04  00000000  00000000  0017d934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00183838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ef0 	.word	0x08006ef0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006ef0 	.word	0x08006ef0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem */
  myBinarySemHandle = osSemaphoreNew(1, 1, &myBinarySem_attributes);
 80004d0:	4a18      	ldr	r2, [pc, #96]	; (8000534 <MX_FREERTOS_Init+0x68>)
 80004d2:	2101      	movs	r1, #1
 80004d4:	2001      	movs	r0, #1
 80004d6:	f003 fabc 	bl	8003a52 <osSemaphoreNew>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a16      	ldr	r2, [pc, #88]	; (8000538 <MX_FREERTOS_Init+0x6c>)
 80004de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a16      	ldr	r2, [pc, #88]	; (800053c <MX_FREERTOS_Init+0x70>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4816      	ldr	r0, [pc, #88]	; (8000540 <MX_FREERTOS_Init+0x74>)
 80004e6:	f003 fa07 	bl	80038f8 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <MX_FREERTOS_Init+0x78>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of Blink1Task */
  Blink1TaskHandle = osThreadNew(Blink1, NULL, &Blink1Task_attributes);
 80004f0:	4a15      	ldr	r2, [pc, #84]	; (8000548 <MX_FREERTOS_Init+0x7c>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4815      	ldr	r0, [pc, #84]	; (800054c <MX_FREERTOS_Init+0x80>)
 80004f6:	f003 f9ff 	bl	80038f8 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <MX_FREERTOS_Init+0x84>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of Blink2Task */
  Blink2TaskHandle = osThreadNew(Blink2, NULL, &Blink2Task_attributes);
 8000500:	4a14      	ldr	r2, [pc, #80]	; (8000554 <MX_FREERTOS_Init+0x88>)
 8000502:	2100      	movs	r1, #0
 8000504:	4814      	ldr	r0, [pc, #80]	; (8000558 <MX_FREERTOS_Init+0x8c>)
 8000506:	f003 f9f7 	bl	80038f8 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <MX_FREERTOS_Init+0x90>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of TriggTask */
  TriggTaskHandle = osThreadNew(Trigg, NULL, &TriggTask_attributes);
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <MX_FREERTOS_Init+0x94>)
 8000512:	2100      	movs	r1, #0
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <MX_FREERTOS_Init+0x98>)
 8000516:	f003 f9ef 	bl	80038f8 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MX_FREERTOS_Init+0x9c>)
 800051e:	6013      	str	r3, [r2, #0]

  /* creation of UserbuttonTask */
  UserbuttonTaskHandle = osThreadNew(Userbutton, NULL, &UserbuttonTask_attributes);
 8000520:	4a12      	ldr	r2, [pc, #72]	; (800056c <MX_FREERTOS_Init+0xa0>)
 8000522:	2100      	movs	r1, #0
 8000524:	4812      	ldr	r0, [pc, #72]	; (8000570 <MX_FREERTOS_Init+0xa4>)
 8000526:	f003 f9e7 	bl	80038f8 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a11      	ldr	r2, [pc, #68]	; (8000574 <MX_FREERTOS_Init+0xa8>)
 800052e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	08007020 	.word	0x08007020
 8000538:	20000044 	.word	0x20000044
 800053c:	08006f6c 	.word	0x08006f6c
 8000540:	08000579 	.word	0x08000579
 8000544:	20000030 	.word	0x20000030
 8000548:	08006f90 	.word	0x08006f90
 800054c:	08000589 	.word	0x08000589
 8000550:	20000034 	.word	0x20000034
 8000554:	08006fb4 	.word	0x08006fb4
 8000558:	080005dd 	.word	0x080005dd
 800055c:	20000038 	.word	0x20000038
 8000560:	08006fd8 	.word	0x08006fd8
 8000564:	080005ed 	.word	0x080005ed
 8000568:	2000003c 	.word	0x2000003c
 800056c:	08006ffc 	.word	0x08006ffc
 8000570:	08000615 	.word	0x08000615
 8000574:	20000040 	.word	0x20000040

08000578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f003 fa4b 	bl	8003a1c <osDelay>
 8000586:	e7fb      	b.n	8000580 <StartDefaultTask+0x8>

08000588 <Blink1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink1 */
void Blink1(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink1 */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(100) ; // ms to ticks
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000594:	f004 ffd8 	bl	8005548 <xTaskGetTickCount>
 8000598:	4603      	mov	r3, r0
 800059a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		 osSemaphoreAcquire(myBinarySemHandle, portMAX_DELAY);
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <Blink1+0x4c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 fadd 	bl	8003b64 <osSemaphoreAcquire>
		      // Toggle the green LED
		      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Assuming the green LED is connected to GPIOB_PIN_0
 80005aa:	2120      	movs	r1, #32
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f000 fdd8 	bl	8001164 <HAL_GPIO_TogglePin>

		      // Wait for 200ms (assuming wait_cycles(200000) waits for 200ms)
		      wait_cycles(200000);
 80005b4:	4808      	ldr	r0, [pc, #32]	; (80005d8 <Blink1+0x50>)
 80005b6:	f000 f865 	bl	8000684 <wait_cycles>
		      osSemaphoreRelease(myBinarySemHandle);
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <Blink1+0x4c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fb22 	bl	8003c08 <osSemaphoreRelease>

		    vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	68f9      	ldr	r1, [r7, #12]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fdf8 	bl	80051c0 <vTaskDelayUntil>
		 osSemaphoreAcquire(myBinarySemHandle, portMAX_DELAY);
 80005d0:	e7e4      	b.n	800059c <Blink1+0x14>
 80005d2:	bf00      	nop
 80005d4:	20000044 	.word	0x20000044
 80005d8:	00030d40 	.word	0x00030d40

080005dc <Blink2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink2 */
void Blink2(void *argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f003 fa19 	bl	8003a1c <osDelay>
 80005ea:	e7fb      	b.n	80005e4 <Blink2+0x8>

080005ec <Trigg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Trigg */
void Trigg(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Trigg */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(200) ; // ms to ticks
 80005f4:	23c8      	movs	r3, #200	; 0xc8
 80005f6:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80005f8:	f004 ffa6 	bl	8005548 <xTaskGetTickCount>
 80005fc:	4603      	mov	r3, r0
 80005fe:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	68f9      	ldr	r1, [r7, #12]
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fdda 	bl	80051c0 <vTaskDelayUntil>
	wait_cycles(10); //add a breakpoint in this line
 800060c:	200a      	movs	r0, #10
 800060e:	f000 f839 	bl	8000684 <wait_cycles>
	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000612:	e7f5      	b.n	8000600 <Trigg+0x14>

08000614 <Userbutton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Userbutton */
void Userbutton(void *argument)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Userbutton */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20);
 800061c:	2314      	movs	r3, #20
 800061e:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000620:	f004 ff92 	bl	8005548 <xTaskGetTickCount>
 8000624:	4603      	mov	r3, r0
 8000626:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET)
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	4811      	ldr	r0, [pc, #68]	; (8000674 <Userbutton+0x60>)
 800062e:	f000 fd69 	bl	8001104 <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10b      	bne.n	8000650 <Userbutton+0x3c>
	{
		 // Button is pressed, disable blinking
		      varBlink1 = 0;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <Userbutton+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
		      osSemaphoreRelease(myBinarySemHandle);
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <Userbutton+0x68>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fae0 	bl	8003c08 <osSemaphoreRelease>
		      wait_cycles(250000);
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <Userbutton+0x6c>)
 800064a:	f000 f81b 	bl	8000684 <wait_cycles>
 800064e:	e009      	b.n	8000664 <Userbutton+0x50>
		    }
		    else
		    {
		      // Button is not pressed, enable blinking
		      varBlink1 = 1;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <Userbutton+0x64>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
		      osSemaphoreAcquire(myBinarySemHandle, portMAX_DELAY);
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <Userbutton+0x68>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fa80 	bl	8003b64 <osSemaphoreAcquire>
		    }

		    vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	68f9      	ldr	r1, [r7, #12]
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fda8 	bl	80051c0 <vTaskDelayUntil>
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET)
 8000670:	e7da      	b.n	8000628 <Userbutton+0x14>
 8000672:	bf00      	nop
 8000674:	48000800 	.word	0x48000800
 8000678:	2000002c 	.word	0x2000002c
 800067c:	20000044 	.word	0x20000044
 8000680:	0003d090 	.word	0x0003d090

08000684 <wait_cycles>:
  /* USER CODE END Userbutton */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void wait_cycles( uint32_t n ) {
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
uint32_t l = n/3; //cycles per loop is 3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <wait_cycles+0x28>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	085b      	lsrs	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
asm volatile( "0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l) );
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3b01      	subs	r3, #1
 800069c:	d1fd      	bne.n	800069a <wait_cycles+0x16>
 800069e:	60fb      	str	r3, [r7, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	aaaaaaab 	.word	0xaaaaaaab

080006b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a24      	ldr	r2, [pc, #144]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_GPIO_Init+0xc4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2120      	movs	r1, #32
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f000 fd01 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000738:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <MX_GPIO_Init+0xc8>)
 800074a:	f000 fb31 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800074e:	2320      	movs	r3, #32
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f000 fb22 	bl	8000db0 <HAL_GPIO_Init>

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	48000800 	.word	0x48000800

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 f9f4 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f80b 	bl	800079e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f7ff ff92 	bl	80006b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800078c:	f000 f938 	bl	8000a00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000790:	f003 f868 	bl	8003864 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000794:	f7ff fe9a 	bl	80004cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000798:	f003 f888 	bl	80038ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079c:	e7fe      	b.n	800079c <main+0x20>

0800079e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b096      	sub	sp, #88	; 0x58
 80007a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2244      	movs	r2, #68	; 0x44
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f006 fb65 	bl	8006e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c4:	f000 fcf6 	bl	80011b4 <HAL_PWREx_ControlVoltageScaling>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ce:	f000 f849 	bl	8000864 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d2:	2302      	movs	r3, #2
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e4:	2302      	movs	r3, #2
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007ec:	230a      	movs	r3, #10
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007f0:	2307      	movs	r3, #7
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fd2d 	bl	8001260 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800080c:	f000 f82a 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2303      	movs	r3, #3
 8000816:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	2104      	movs	r1, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f001 f8f5 	bl	8001a18 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000834:	f000 f816 	bl	8000864 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3758      	adds	r7, #88	; 0x58
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 f9ab 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40012c00 	.word	0x40012c00

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_MspInit+0x4c>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	; 0x60
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_MspInit+0x4c>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_MspInit+0x4c>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	210f      	movs	r1, #15
 80008aa:	f06f 0001 	mvn.w	r0, #1
 80008ae:	f000 fa55 	bl	8000d5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008ce:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <HAL_InitTick+0xc8>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	4a2d      	ldr	r2, [pc, #180]	; (8000988 <HAL_InitTick+0xc8>)
 80008d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d8:	6613      	str	r3, [r2, #96]	; 0x60
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <HAL_InitTick+0xc8>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e6:	f107 020c 	add.w	r2, r7, #12
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fa55 	bl	8001da0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008f6:	f001 fa3d 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 80008fa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fe:	4a23      	ldr	r2, [pc, #140]	; (800098c <HAL_InitTick+0xcc>)
 8000900:	fba2 2303 	umull	r2, r3, r2, r3
 8000904:	0c9b      	lsrs	r3, r3, #18
 8000906:	3b01      	subs	r3, #1
 8000908:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <HAL_InitTick+0xd0>)
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <HAL_InitTick+0xd4>)
 800090e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_InitTick+0xd0>)
 8000912:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000916:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000918:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <HAL_InitTick+0xd0>)
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_InitTick+0xd0>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_InitTick+0xd0>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_InitTick+0xd0>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000930:	4817      	ldr	r0, [pc, #92]	; (8000990 <HAL_InitTick+0xd0>)
 8000932:	f001 ff83 	bl	800283c <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800093c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000940:	2b00      	cmp	r3, #0
 8000942:	d11b      	bne.n	800097c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000944:	4812      	ldr	r0, [pc, #72]	; (8000990 <HAL_InitTick+0xd0>)
 8000946:	f001 ffdb 	bl	8002900 <HAL_TIM_Base_Start_IT>
 800094a:	4603      	mov	r3, r0
 800094c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000954:	2b00      	cmp	r3, #0
 8000956:	d111      	bne.n	800097c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000958:	2019      	movs	r0, #25
 800095a:	f000 fa1b 	bl	8000d94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d808      	bhi.n	8000976 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	2019      	movs	r0, #25
 800096a:	f000 f9f7 	bl	8000d5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_InitTick+0xd8>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	e002      	b.n	800097c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800097c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000980:	4618      	mov	r0, r3
 8000982:	3730      	adds	r7, #48	; 0x30
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	431bde83 	.word	0x431bde83
 8000990:	20000048 	.word	0x20000048
 8000994:	40012c00 	.word	0x40012c00
 8000998:	20000004 	.word	0x20000004

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009ce:	f002 f807 	bl	80029e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000048 	.word	0x20000048

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <MX_USART2_UART_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a44:	f002 f9ae 	bl	8002da4 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f7ff ff09 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000094 	.word	0x20000094
 8000a5c:	40004400 	.word	0x40004400

08000a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b0ac      	sub	sp, #176	; 0xb0
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2288      	movs	r2, #136	; 0x88
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f006 f9fb 	bl	8006e7c <memset>
  if(uartHandle->Instance==USART2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <HAL_UART_MspInit+0xb0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d13b      	bne.n	8000b08 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fa11 	bl	8001ec4 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa8:	f7ff fedc 	bl	8000864 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0xb4>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab0:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <HAL_UART_MspInit+0xb4>)
 8000ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_UART_MspInit+0xb4>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_UART_MspInit+0xb4>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <HAL_UART_MspInit+0xb4>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_UART_MspInit+0xb4>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000adc:	230c      	movs	r3, #12
 8000ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af4:	2307      	movs	r3, #7
 8000af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f000 f954 	bl	8000db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b08:	bf00      	nop
 8000b0a:	37b0      	adds	r7, #176	; 0xb0
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40004400 	.word	0x40004400
 8000b14:	40021000 	.word	0x40021000

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff ff5e 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	; (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f006 f9a1 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fe17 	bl	800077c <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b5c:	08007088 	.word	0x08007088
  ldr r2, =_sbss
 8000b60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b64:	20001e10 	.word	0x20001e10

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_Init+0x3c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HAL_Init+0x3c>)
 8000b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 f8df 	bl	8000d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b88:	200f      	movs	r0, #15
 8000b8a:	f7ff fe99 	bl	80008c0 <HAL_InitTick>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	e001      	b.n	8000b9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9a:	f7ff fe69 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	2000011c 	.word	0x2000011c

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000011c 	.word	0x2000011c

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6e:	f7ff ff61 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	6978      	ldr	r0, [r7, #20]
 8000d7a:	f7ff ffb1 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff80 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff54 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e17f      	b.n	80010c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 8171 	beq.w	80010ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_Init+0x40>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d130      	bne.n	8000e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	f003 0201 	and.w	r2, r3, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d118      	bne.n	8000e90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d017      	beq.n	8000ecc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d123      	bne.n	8000f20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	6939      	ldr	r1, [r7, #16]
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80ac 	beq.w	80010ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b5f      	ldr	r3, [pc, #380]	; (80010e0 <HAL_GPIO_Init+0x330>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	4a5e      	ldr	r2, [pc, #376]	; (80010e0 <HAL_GPIO_Init+0x330>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <HAL_GPIO_Init+0x330>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f7a:	4a5a      	ldr	r2, [pc, #360]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fa4:	d025      	beq.n	8000ff2 <HAL_GPIO_Init+0x242>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <HAL_GPIO_Init+0x338>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01f      	beq.n	8000fee <HAL_GPIO_Init+0x23e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4e      	ldr	r2, [pc, #312]	; (80010ec <HAL_GPIO_Init+0x33c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x23a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4d      	ldr	r2, [pc, #308]	; (80010f0 <HAL_GPIO_Init+0x340>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x236>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4c      	ldr	r2, [pc, #304]	; (80010f4 <HAL_GPIO_Init+0x344>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x232>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4b      	ldr	r2, [pc, #300]	; (80010f8 <HAL_GPIO_Init+0x348>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x22e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4a      	ldr	r2, [pc, #296]	; (80010fc <HAL_GPIO_Init+0x34c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x22a>
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	e00c      	b.n	8000ff4 <HAL_GPIO_Init+0x244>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e00a      	b.n	8000ff4 <HAL_GPIO_Init+0x244>
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e008      	b.n	8000ff4 <HAL_GPIO_Init+0x244>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x244>
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x244>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x244>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x244>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	f002 0203 	and.w	r2, r2, #3
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001004:	4937      	ldr	r1, [pc, #220]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001012:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <HAL_GPIO_Init+0x350>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001036:	4a32      	ldr	r2, [pc, #200]	; (8001100 <HAL_GPIO_Init+0x350>)
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800103c:	4b30      	ldr	r3, [pc, #192]	; (8001100 <HAL_GPIO_Init+0x350>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001060:	4a27      	ldr	r2, [pc, #156]	; (8001100 <HAL_GPIO_Init+0x350>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_GPIO_Init+0x350>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800108a:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_GPIO_Init+0x350>)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_GPIO_Init+0x350>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <HAL_GPIO_Init+0x350>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f47f ae78 	bne.w	8000dc0 <HAL_GPIO_Init+0x10>
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	48000800 	.word	0x48000800
 80010f0:	48000c00 	.word	0x48000c00
 80010f4:	48001000 	.word	0x48001000
 80010f8:	48001400 	.word	0x48001400
 80010fc:	48001800 	.word	0x48001800
 8001100:	40010400 	.word	0x40010400

08001104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e001      	b.n	8001126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001150:	e002      	b.n	8001158 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4013      	ands	r3, r2
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43d9      	mvns	r1, r3
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	400b      	ands	r3, r1
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40007000 	.word	0x40007000

080011b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c2:	d130      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d0:	d038      	beq.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2232      	movs	r2, #50	; 0x32
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	0c9b      	lsrs	r3, r3, #18
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f8:	e002      	b.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120c:	d102      	bne.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x60>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f2      	bne.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001220:	d110      	bne.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e00f      	b.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800122e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001232:	d007      	beq.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40007000 	.word	0x40007000
 8001258:	20000000 	.word	0x20000000
 800125c:	431bde83 	.word	0x431bde83

08001260 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e3ca      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001272:	4b97      	ldr	r3, [pc, #604]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800127c:	4b94      	ldr	r3, [pc, #592]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80e4 	beq.w	800145c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <HAL_RCC_OscConfig+0x4a>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	f040 808b 	bne.w	80013b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	f040 8087 	bne.w	80013b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012aa:	4b89      	ldr	r3, [pc, #548]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x62>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e3a2      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1a      	ldr	r2, [r3, #32]
 80012c6:	4b82      	ldr	r3, [pc, #520]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <HAL_RCC_OscConfig+0x7c>
 80012d2:	4b7f      	ldr	r3, [pc, #508]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012da:	e005      	b.n	80012e8 <HAL_RCC_OscConfig+0x88>
 80012dc:	4b7c      	ldr	r3, [pc, #496]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80012de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d223      	bcs.n	8001334 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fd87 	bl	8001e04 <RCC_SetFlashLatencyFromMSIRange>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e383      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001300:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a72      	ldr	r2, [pc, #456]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	496d      	ldr	r1, [pc, #436]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131e:	4b6c      	ldr	r3, [pc, #432]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	4968      	ldr	r1, [pc, #416]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
 8001332:	e025      	b.n	8001380 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4960      	ldr	r1, [pc, #384]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001352:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	495b      	ldr	r1, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fd47 	bl	8001e04 <RCC_SetFlashLatencyFromMSIRange>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e343      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001380:	f000 fc4a 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001384:	4602      	mov	r2, r0
 8001386:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	4950      	ldr	r1, [pc, #320]	; (80014d4 <HAL_RCC_OscConfig+0x274>)
 8001392:	5ccb      	ldrb	r3, [r1, r3]
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <HAL_RCC_OscConfig+0x278>)
 800139e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013a0:	4b4e      	ldr	r3, [pc, #312]	; (80014dc <HAL_RCC_OscConfig+0x27c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fa8b 	bl	80008c0 <HAL_InitTick>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d052      	beq.n	800145a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	e327      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d032      	beq.n	8001426 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c0:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a42      	ldr	r2, [pc, #264]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc02 	bl	8000bd4 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d4:	f7ff fbfe 	bl	8000bd4 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e310      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f2:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a36      	ldr	r2, [pc, #216]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4931      	ldr	r1, [pc, #196]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	492c      	ldr	r1, [pc, #176]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e01a      	b.n	800145c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001432:	f7ff fbcf 	bl	8000bd4 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800143a:	f7ff fbcb 	bl	8000bd4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e2dd      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x1da>
 8001458:	e000      	b.n	800145c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800145a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d074      	beq.n	8001552 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b08      	cmp	r3, #8
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x21a>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b0c      	cmp	r3, #12
 8001472:	d10e      	bne.n	8001492 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d10b      	bne.n	8001492 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d064      	beq.n	8001550 <HAL_RCC_OscConfig+0x2f0>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d160      	bne.n	8001550 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e2ba      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x24a>
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e026      	b.n	80014f8 <HAL_RCC_OscConfig+0x298>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b2:	d115      	bne.n	80014e0 <HAL_RCC_OscConfig+0x280>
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a02      	ldr	r2, [pc, #8]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x298>
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	08007030 	.word	0x08007030
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004
 80014e0:	4ba0      	ldr	r3, [pc, #640]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a9f      	ldr	r2, [pc, #636]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b9d      	ldr	r3, [pc, #628]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a9c      	ldr	r2, [pc, #624]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fb68 	bl	8000bd4 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fb64 	bl	8000bd4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e276      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151a:	4b92      	ldr	r3, [pc, #584]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x2a8>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fb54 	bl	8000bd4 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fb50 	bl	8000bd4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e262      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001542:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x2d0>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d060      	beq.n	8001620 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x310>
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d119      	bne.n	800159e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d116      	bne.n	800159e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001570:	4b7c      	ldr	r3, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x328>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e23f      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	4973      	ldr	r1, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159c:	e040      	b.n	8001620 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d023      	beq.n	80015ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a6:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fb0f 	bl	8000bd4 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fb0b 	bl	8000bd4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e21d      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015cc:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b62      	ldr	r3, [pc, #392]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	495f      	ldr	r1, [pc, #380]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e018      	b.n	8001620 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5c      	ldr	r2, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff faeb 	bl	8000bd4 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fae7 	bl	8000bd4 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e1f9      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d03c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d01c      	beq.n	800166e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001634:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fac6 	bl	8000bd4 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fac2 	bl	8000bd4 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1d4      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0ef      	beq.n	800164c <HAL_RCC_OscConfig+0x3ec>
 800166c:	e01b      	b.n	80016a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001674:	4a3b      	ldr	r2, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff faa9 	bl	8000bd4 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001686:	f7ff faa5 	bl	8000bd4 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1b7      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800169a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1ef      	bne.n	8001686 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80a6 	beq.w	8001800 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10d      	bne.n	80016e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a26      	ldr	r2, [pc, #152]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016dc:	2301      	movs	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_RCC_OscConfig+0x508>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d118      	bne.n	800171e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCC_OscConfig+0x508>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x508>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fa6c 	bl	8000bd4 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001700:	f7ff fa68 	bl	8000bd4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e17a      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x508>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_RCC_OscConfig+0x4d8>
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001736:	e029      	b.n	800178c <HAL_RCC_OscConfig+0x52c>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d115      	bne.n	800176c <HAL_RCC_OscConfig+0x50c>
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x52c>
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40007000 	.word	0x40007000
 800176c:	4b9c      	ldr	r3, [pc, #624]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	4a9b      	ldr	r2, [pc, #620]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177c:	4b98      	ldr	r3, [pc, #608]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	4a97      	ldr	r2, [pc, #604]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d016      	beq.n	80017c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fa1e 	bl	8000bd4 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff fa1a 	bl	8000bd4 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e12a      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b2:	4b8b      	ldr	r3, [pc, #556]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ed      	beq.n	800179c <HAL_RCC_OscConfig+0x53c>
 80017c0:	e015      	b.n	80017ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff fa07 	bl	8000bd4 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff fa03 	bl	8000bd4 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e113      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e0:	4b7f      	ldr	r3, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ed      	bne.n	80017ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80fe 	beq.w	8001a06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	2b02      	cmp	r3, #2
 8001810:	f040 80d0 	bne.w	80019b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001814:	4b72      	ldr	r3, [pc, #456]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 0203 	and.w	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	429a      	cmp	r2, r3
 8001826:	d130      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	3b01      	subs	r3, #1
 8001834:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d127      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001844:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d11f      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001854:	2a07      	cmp	r2, #7
 8001856:	bf14      	ite	ne
 8001858:	2201      	movne	r2, #1
 800185a:	2200      	moveq	r2, #0
 800185c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800185e:	4293      	cmp	r3, r2
 8001860:	d113      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	3b01      	subs	r3, #1
 8001870:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d109      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	3b01      	subs	r3, #1
 8001884:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d06e      	beq.n	8001968 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d069      	beq.n	8001964 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0ad      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80018b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018b8:	f7ff f98c 	bl	8000bd4 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f988 	bl	8000bd4 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e09a      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018de:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <HAL_RCC_OscConfig+0x784>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018ee:	3a01      	subs	r2, #1
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018f8:	0212      	lsls	r2, r2, #8
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001900:	0852      	lsrs	r2, r2, #1
 8001902:	3a01      	subs	r2, #1
 8001904:	0552      	lsls	r2, r2, #21
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800190c:	0852      	lsrs	r2, r2, #1
 800190e:	3a01      	subs	r2, #1
 8001910:	0652      	lsls	r2, r2, #25
 8001912:	4311      	orrs	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001918:	0912      	lsrs	r2, r2, #4
 800191a:	0452      	lsls	r2, r2, #17
 800191c:	430a      	orrs	r2, r1
 800191e:	4930      	ldr	r1, [pc, #192]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001920:	4313      	orrs	r3, r2
 8001922:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2d      	ldr	r2, [pc, #180]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a2a      	ldr	r2, [pc, #168]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800193c:	f7ff f94a 	bl	8000bd4 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f946 	bl	8000bd4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e058      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001962:	e050      	b.n	8001a06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e04f      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d148      	bne.n	8001a06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800198c:	f7ff f922 	bl	8000bd4 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff f91e 	bl	8000bd4 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e030      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x734>
 80019b2:	e028      	b.n	8001a06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d023      	beq.n	8001a02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80019c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff f905 	bl	8000bd4 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	e00c      	b.n	80019e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff f901 	bl	8000bd4 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d905      	bls.n	80019e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e013      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
 80019e0:	40021000 	.word	0x40021000
 80019e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_OscConfig+0x7b0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ec      	bne.n	80019ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x7b0>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4905      	ldr	r1, [pc, #20]	; (8001a10 <HAL_RCC_OscConfig+0x7b0>)
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_OscConfig+0x7b4>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e001      	b.n	8001a06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	feeefffc 	.word	0xfeeefffc

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0e7      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0207 	bic.w	r2, r3, #7
 8001a42:	4970      	ldr	r1, [pc, #448]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0cf      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d908      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4960      	ldr	r1, [pc, #384]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d04c      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d121      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0a6      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d115      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e09a      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e08e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e086      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4943      	ldr	r1, [pc, #268]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b00:	f7ff f868 	bl	8000bd4 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff f864 	bl	8000bd4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e06e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d010      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d208      	bcs.n	8001b5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	492b      	ldr	r1, [pc, #172]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d210      	bcs.n	8001b8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 0207 	bic.w	r2, r3, #7
 8001b74:	4923      	ldr	r1, [pc, #140]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e036      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	4918      	ldr	r1, [pc, #96]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4910      	ldr	r1, [pc, #64]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bcc:	f000 f824 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	490b      	ldr	r1, [pc, #44]	; (8001c0c <HAL_RCC_ClockConfig+0x1f4>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1fc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fe65 	bl	80008c0 <HAL_InitTick>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08007030 	.word	0x08007030
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c26:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c30:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x34>
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d121      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d11e      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c4c:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e005      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c74:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10d      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	e004      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c9c:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d134      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d003      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001cbc:	e005      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc0:	617b      	str	r3, [r7, #20]
      break;
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cc6:	617b      	str	r3, [r7, #20]
      break;
 8001cc8:	e002      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	617b      	str	r3, [r7, #20]
      break;
 8001cce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	fb03 f202 	mul.w	r2, r3, r2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0e5b      	lsrs	r3, r3, #25
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	3301      	adds	r3, #1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d10:	69bb      	ldr	r3, [r7, #24]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	08007048 	.word	0x08007048
 8001d28:	00f42400 	.word	0x00f42400
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000000 	.word	0x20000000

08001d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d4c:	f7ff fff0 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4904      	ldr	r1, [pc, #16]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08007040 	.word	0x08007040

08001d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d78:	f7ff ffda 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	0adb      	lsrs	r3, r3, #11
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4904      	ldr	r1, [pc, #16]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08007040 	.word	0x08007040

08001da0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	220f      	movs	r2, #15
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_RCC_GetClockConfig+0x60>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0207 	and.w	r2, r3, #7
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40022000 	.word	0x40022000

08001e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e1c:	f7ff f9bc 	bl	8001198 <HAL_PWREx_GetVoltageRange>
 8001e20:	6178      	str	r0, [r7, #20]
 8001e22:	e014      	b.n	8001e4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e3c:	f7ff f9ac 	bl	8001198 <HAL_PWREx_GetVoltageRange>
 8001e40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e54:	d10b      	bne.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b80      	cmp	r3, #128	; 0x80
 8001e5a:	d919      	bls.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e60:	d902      	bls.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e62:	2302      	movs	r3, #2
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	e013      	b.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e68:	2301      	movs	r3, #1
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e010      	b.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d902      	bls.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e74:	2303      	movs	r3, #3
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e00a      	b.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d102      	bne.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e80:	2302      	movs	r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	e004      	b.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b70      	cmp	r3, #112	; 0x70
 8001e8a:	d101      	bne.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 0207 	bic.w	r2, r3, #7
 8001e98:	4909      	ldr	r1, [pc, #36]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d001      	beq.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40022000 	.word	0x40022000

08001ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ecc:	2300      	movs	r3, #0
 8001ece:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d041      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ee4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ee8:	d02a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001eea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eee:	d824      	bhi.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ef4:	d008      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ef6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001efa:	d81e      	bhi.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f04:	d010      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f06:	e018      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f08:	4b86      	ldr	r3, [pc, #536]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a85      	ldr	r2, [pc, #532]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f14:	e015      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fabb 	bl	8002498 <RCCEx_PLLSAI1_Config>
 8001f22:	4603      	mov	r3, r0
 8001f24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f26:	e00c      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3320      	adds	r3, #32
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fba6 	bl	8002680 <RCCEx_PLLSAI2_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f38:	e003      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f3e:	e000      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f42:	7cfb      	ldrb	r3, [r7, #19]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10b      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f48:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f56:	4973      	ldr	r1, [pc, #460]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f5e:	e001      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f60:	7cfb      	ldrb	r3, [r7, #19]
 8001f62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d041      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f78:	d02a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f7e:	d824      	bhi.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f84:	d008      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f8a:	d81e      	bhi.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f94:	d010      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f96:	e018      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a61      	ldr	r2, [pc, #388]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fa73 	bl	8002498 <RCCEx_PLLSAI1_Config>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb6:	e00c      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3320      	adds	r3, #32
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fb5e 	bl	8002680 <RCCEx_PLLSAI2_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fc8:	e003      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	74fb      	strb	r3, [r7, #19]
      break;
 8001fce:	e000      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fd8:	4b52      	ldr	r3, [pc, #328]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe6:	494f      	ldr	r1, [pc, #316]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fee:	e001      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a0 	beq.w	8002142 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002016:	2300      	movs	r3, #0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	4a40      	ldr	r2, [pc, #256]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002026:	6593      	str	r3, [r2, #88]	; 0x58
 8002028:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002034:	2301      	movs	r3, #1
 8002036:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002042:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002044:	f7fe fdc6 	bl	8000bd4 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800204a:	e009      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204c:	f7fe fdc2 	bl	8000bd4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d902      	bls.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	74fb      	strb	r3, [r7, #19]
        break;
 800205e:	e005      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002060:	4b31      	ldr	r3, [pc, #196]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ef      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d15c      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002072:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01f      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	d019      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	4a20      	ldr	r2, [pc, #128]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d016      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7fe fd81 	bl	8000bd4 <HAL_GetTick>
 80020d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d4:	e00b      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7fe fd7d 	bl	8000bd4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d902      	bls.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	74fb      	strb	r3, [r7, #19]
            break;
 80020ec:	e006      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ec      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10c      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	4904      	ldr	r1, [pc, #16]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800211a:	e009      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
 8002120:	e006      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002130:	7c7b      	ldrb	r3, [r7, #17]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b9e      	ldr	r3, [pc, #632]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	4a9d      	ldr	r2, [pc, #628]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214e:	4b98      	ldr	r3, [pc, #608]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002154:	f023 0203 	bic.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	4994      	ldr	r1, [pc, #592]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002170:	4b8f      	ldr	r3, [pc, #572]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f023 020c 	bic.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	498c      	ldr	r1, [pc, #560]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002192:	4b87      	ldr	r3, [pc, #540]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002198:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	4983      	ldr	r1, [pc, #524]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021b4:	4b7e      	ldr	r3, [pc, #504]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	497b      	ldr	r1, [pc, #492]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021d6:	4b76      	ldr	r3, [pc, #472]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e4:	4972      	ldr	r1, [pc, #456]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021f8:	4b6d      	ldr	r3, [pc, #436]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	496a      	ldr	r1, [pc, #424]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800221a:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	4961      	ldr	r1, [pc, #388]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800223c:	4b5c      	ldr	r3, [pc, #368]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	4959      	ldr	r1, [pc, #356]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800225e:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002264:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226c:	4950      	ldr	r1, [pc, #320]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002280:	4b4b      	ldr	r3, [pc, #300]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	4948      	ldr	r1, [pc, #288]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022a2:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	493f      	ldr	r1, [pc, #252]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d028      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c4:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d2:	4937      	ldr	r1, [pc, #220]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e2:	d106      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e4:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a31      	ldr	r2, [pc, #196]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ee:	60d3      	str	r3, [r2, #12]
 80022f0:	e011      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022fa:	d10c      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	2101      	movs	r1, #1
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f8c8 	bl	8002498 <RCCEx_PLLSAI1_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d028      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	491f      	ldr	r1, [pc, #124]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002340:	d106      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800234c:	60d3      	str	r3, [r2, #12]
 800234e:	e011      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002358:	d10c      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f899 	bl	8002498 <RCCEx_PLLSAI1_Config>
 8002366:	4603      	mov	r3, r0
 8002368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d02b      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238e:	4908      	ldr	r1, [pc, #32]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800239e:	d109      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a02      	ldr	r2, [pc, #8]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023aa:	60d3      	str	r3, [r2, #12]
 80023ac:	e014      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f867 	bl	8002498 <RCCEx_PLLSAI1_Config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02f      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f2:	4928      	ldr	r1, [pc, #160]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002402:	d10d      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	2102      	movs	r1, #2
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f844 	bl	8002498 <RCCEx_PLLSAI1_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d014      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	74bb      	strb	r3, [r7, #18]
 800241e:	e011      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002428:	d10c      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3320      	adds	r3, #32
 800242e:	2102      	movs	r1, #2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f925 	bl	8002680 <RCCEx_PLLSAI2_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800245e:	490d      	ldr	r1, [pc, #52]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002482:	4904      	ldr	r1, [pc, #16]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800248a:	7cbb      	ldrb	r3, [r7, #18]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000

08002498 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024a6:	4b75      	ldr	r3, [pc, #468]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d018      	beq.n	80024e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f003 0203 	and.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d10d      	bne.n	80024de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
       ||
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024ca:	4b6c      	ldr	r3, [pc, #432]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
       ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d047      	beq.n	800256e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e044      	b.n	800256e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d018      	beq.n	800251e <RCCEx_PLLSAI1_Config+0x86>
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d825      	bhi.n	800253c <RCCEx_PLLSAI1_Config+0xa4>
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d002      	beq.n	80024fa <RCCEx_PLLSAI1_Config+0x62>
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d009      	beq.n	800250c <RCCEx_PLLSAI1_Config+0x74>
 80024f8:	e020      	b.n	800253c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024fa:	4b60      	ldr	r3, [pc, #384]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11d      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250a:	e01a      	b.n	8002542 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800250c:	4b5b      	ldr	r3, [pc, #364]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d116      	bne.n	8002546 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251c:	e013      	b.n	8002546 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800251e:	4b57      	ldr	r3, [pc, #348]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10f      	bne.n	800254a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800252a:	4b54      	ldr	r3, [pc, #336]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800253a:	e006      	b.n	800254a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      break;
 8002540:	e004      	b.n	800254c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002542:	bf00      	nop
 8002544:	e002      	b.n	800254c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002546:	bf00      	nop
 8002548:	e000      	b.n	800254c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254a:	bf00      	nop
    }

    if(status == HAL_OK)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10d      	bne.n	800256e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	430b      	orrs	r3, r1
 8002568:	4944      	ldr	r1, [pc, #272]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d17d      	bne.n	8002670 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002574:	4b41      	ldr	r3, [pc, #260]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a40      	ldr	r2, [pc, #256]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800257e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002580:	f7fe fb28 	bl	8000bd4 <HAL_GetTick>
 8002584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002586:	e009      	b.n	800259c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002588:	f7fe fb24 	bl	8000bd4 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d902      	bls.n	800259c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	73fb      	strb	r3, [r7, #15]
        break;
 800259a:	e005      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800259c:	4b37      	ldr	r3, [pc, #220]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ef      	bne.n	8002588 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d160      	bne.n	8002670 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d111      	bne.n	80025d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025b4:	4b31      	ldr	r3, [pc, #196]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6892      	ldr	r2, [r2, #8]
 80025c4:	0211      	lsls	r1, r2, #8
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68d2      	ldr	r2, [r2, #12]
 80025ca:	0912      	lsrs	r2, r2, #4
 80025cc:	0452      	lsls	r2, r2, #17
 80025ce:	430a      	orrs	r2, r1
 80025d0:	492a      	ldr	r1, [pc, #168]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	610b      	str	r3, [r1, #16]
 80025d6:	e027      	b.n	8002628 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d112      	bne.n	8002604 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025de:	4b27      	ldr	r3, [pc, #156]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6892      	ldr	r2, [r2, #8]
 80025ee:	0211      	lsls	r1, r2, #8
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6912      	ldr	r2, [r2, #16]
 80025f4:	0852      	lsrs	r2, r2, #1
 80025f6:	3a01      	subs	r2, #1
 80025f8:	0552      	lsls	r2, r2, #21
 80025fa:	430a      	orrs	r2, r1
 80025fc:	491f      	ldr	r1, [pc, #124]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	610b      	str	r3, [r1, #16]
 8002602:	e011      	b.n	8002628 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800260c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6892      	ldr	r2, [r2, #8]
 8002614:	0211      	lsls	r1, r2, #8
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6952      	ldr	r2, [r2, #20]
 800261a:	0852      	lsrs	r2, r2, #1
 800261c:	3a01      	subs	r2, #1
 800261e:	0652      	lsls	r2, r2, #25
 8002620:	430a      	orrs	r2, r1
 8002622:	4916      	ldr	r1, [pc, #88]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a13      	ldr	r2, [pc, #76]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002632:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe face 	bl	8000bd4 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800263a:	e009      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800263c:	f7fe faca 	bl	8000bd4 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d902      	bls.n	8002650 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	73fb      	strb	r3, [r7, #15]
          break;
 800264e:	e005      	b.n	800265c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ef      	beq.n	800263c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	4904      	ldr	r1, [pc, #16]	; (800267c <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000

08002680 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800268e:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d018      	beq.n	80026cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0203 	and.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d10d      	bne.n	80026c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
       ||
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026b2:	4b61      	ldr	r3, [pc, #388]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
       ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d047      	beq.n	8002756 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e044      	b.n	8002756 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d018      	beq.n	8002706 <RCCEx_PLLSAI2_Config+0x86>
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d825      	bhi.n	8002724 <RCCEx_PLLSAI2_Config+0xa4>
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d002      	beq.n	80026e2 <RCCEx_PLLSAI2_Config+0x62>
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d009      	beq.n	80026f4 <RCCEx_PLLSAI2_Config+0x74>
 80026e0:	e020      	b.n	8002724 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026e2:	4b55      	ldr	r3, [pc, #340]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11d      	bne.n	800272a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f2:	e01a      	b.n	800272a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d116      	bne.n	800272e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002704:	e013      	b.n	800272e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002706:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002712:	4b49      	ldr	r3, [pc, #292]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002722:	e006      	b.n	8002732 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      break;
 8002728:	e004      	b.n	8002734 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800272a:	bf00      	nop
 800272c:	e002      	b.n	8002734 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800272e:	bf00      	nop
 8002730:	e000      	b.n	8002734 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002732:	bf00      	nop
    }

    if(status == HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800273a:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	430b      	orrs	r3, r1
 8002750:	4939      	ldr	r1, [pc, #228]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d167      	bne.n	800282c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a35      	ldr	r2, [pc, #212]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002766:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002768:	f7fe fa34 	bl	8000bd4 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800276e:	e009      	b.n	8002784 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002770:	f7fe fa30 	bl	8000bd4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	73fb      	strb	r3, [r7, #15]
        break;
 8002782:	e005      	b.n	8002790 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002784:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ef      	bne.n	8002770 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d14a      	bne.n	800282c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d111      	bne.n	80027c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6892      	ldr	r2, [r2, #8]
 80027ac:	0211      	lsls	r1, r2, #8
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68d2      	ldr	r2, [r2, #12]
 80027b2:	0912      	lsrs	r2, r2, #4
 80027b4:	0452      	lsls	r2, r2, #17
 80027b6:	430a      	orrs	r2, r1
 80027b8:	491f      	ldr	r1, [pc, #124]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	614b      	str	r3, [r1, #20]
 80027be:	e011      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6892      	ldr	r2, [r2, #8]
 80027d0:	0211      	lsls	r1, r2, #8
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6912      	ldr	r2, [r2, #16]
 80027d6:	0852      	lsrs	r2, r2, #1
 80027d8:	3a01      	subs	r2, #1
 80027da:	0652      	lsls	r2, r2, #25
 80027dc:	430a      	orrs	r2, r1
 80027de:	4916      	ldr	r1, [pc, #88]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a13      	ldr	r2, [pc, #76]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe f9f0 	bl	8000bd4 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027f6:	e009      	b.n	800280c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027f8:	f7fe f9ec 	bl	8000bd4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d902      	bls.n	800280c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	73fb      	strb	r3, [r7, #15]
          break;
 800280a:	e005      	b.n	8002818 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ef      	beq.n	80027f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	4904      	ldr	r1, [pc, #16]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e049      	b.n	80028e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f841 	bl	80028ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 f9da 	bl	8002c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d001      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e04f      	b.n	80029b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01d      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d018      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_TIM_Base_Start_IT+0xcc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d009      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d115      	bne.n	80029a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_TIM_Base_Start_IT+0xdc>)
 800297e:	4013      	ands	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d015      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0xb4>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298e:	d011      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a0:	e008      	b.n	80029b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e000      	b.n	80029b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	40013400 	.word	0x40013400
 80029d8:	40014000 	.word	0x40014000
 80029dc:	00010007 	.word	0x00010007

080029e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0202 	mvn.w	r2, #2
 8002a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8e4 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8d6 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f8e7 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d020      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0204 	mvn.w	r2, #4
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8be 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8b0 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8c1 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0208 	mvn.w	r2, #8
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f898 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f88a 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f89b 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d020      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0210 	mvn.w	r2, #16
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2208      	movs	r2, #8
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f872 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f864 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f875 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0201 	mvn.w	r2, #1
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fd fe7a 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f906 	bl	8002d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8fe 	bl	8002d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f834 	bl	8002c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0220 	mvn.w	r2, #32
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8c6 	bl	8002d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a40      	ldr	r2, [pc, #256]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d00f      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <TIM_Base_SetConfig+0x118>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a3c      	ldr	r2, [pc, #240]	; (8002d50 <TIM_Base_SetConfig+0x11c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d007      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a3b      	ldr	r2, [pc, #236]	; (8002d54 <TIM_Base_SetConfig+0x120>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d108      	bne.n	8002c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d01b      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2c      	ldr	r2, [pc, #176]	; (8002d4c <TIM_Base_SetConfig+0x118>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d017      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <TIM_Base_SetConfig+0x11c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <TIM_Base_SetConfig+0x120>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00f      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00b      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <TIM_Base_SetConfig+0x128>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <TIM_Base_SetConfig+0x12c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <TIM_Base_SetConfig+0x130>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d108      	bne.n	8002ce0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00f      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00b      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <TIM_Base_SetConfig+0x128>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d007      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <TIM_Base_SetConfig+0x12c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <TIM_Base_SetConfig+0x130>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d103      	bne.n	8002d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	615a      	str	r2, [r3, #20]
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40013400 	.word	0x40013400
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	40014400 	.word	0x40014400
 8002d64:	40014800 	.word	0x40014800

08002d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e040      	b.n	8002e38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd fe4a 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fae0 	bl	80033b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f825 	bl	8002e40 <UART_SetConfig>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e01b      	b.n	8002e38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fb5f 	bl	80034f4 <UART_CheckIdleState>
 8002e36:	4603      	mov	r3, r0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b08a      	sub	sp, #40	; 0x28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4ba4      	ldr	r3, [pc, #656]	; (8003100 <UART_SetConfig+0x2c0>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a99      	ldr	r2, [pc, #612]	; (8003104 <UART_SetConfig+0x2c4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a90      	ldr	r2, [pc, #576]	; (8003108 <UART_SetConfig+0x2c8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d126      	bne.n	8002f18 <UART_SetConfig+0xd8>
 8002eca:	4b90      	ldr	r3, [pc, #576]	; (800310c <UART_SetConfig+0x2cc>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d81b      	bhi.n	8002f10 <UART_SetConfig+0xd0>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <UART_SetConfig+0xa0>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002f01 	.word	0x08002f01
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002f09 	.word	0x08002f09
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef6:	e116      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efe:	e112      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002f00:	2304      	movs	r3, #4
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f06:	e10e      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002f08:	2308      	movs	r3, #8
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0e:	e10a      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002f10:	2310      	movs	r3, #16
 8002f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f16:	e106      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7c      	ldr	r2, [pc, #496]	; (8003110 <UART_SetConfig+0x2d0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d138      	bne.n	8002f94 <UART_SetConfig+0x154>
 8002f22:	4b7a      	ldr	r3, [pc, #488]	; (800310c <UART_SetConfig+0x2cc>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d82d      	bhi.n	8002f8c <UART_SetConfig+0x14c>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <UART_SetConfig+0xf8>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08002f8d 	.word	0x08002f8d
 8002f40:	08002f8d 	.word	0x08002f8d
 8002f44:	08002f8d 	.word	0x08002f8d
 8002f48:	08002f7d 	.word	0x08002f7d
 8002f4c:	08002f8d 	.word	0x08002f8d
 8002f50:	08002f8d 	.word	0x08002f8d
 8002f54:	08002f8d 	.word	0x08002f8d
 8002f58:	08002f75 	.word	0x08002f75
 8002f5c:	08002f8d 	.word	0x08002f8d
 8002f60:	08002f8d 	.word	0x08002f8d
 8002f64:	08002f8d 	.word	0x08002f8d
 8002f68:	08002f85 	.word	0x08002f85
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f72:	e0d8      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002f74:	2302      	movs	r3, #2
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7a:	e0d4      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f82:	e0d0      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002f84:	2308      	movs	r3, #8
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8a:	e0cc      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f92:	e0c8      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5e      	ldr	r2, [pc, #376]	; (8003114 <UART_SetConfig+0x2d4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d125      	bne.n	8002fea <UART_SetConfig+0x1aa>
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	; (800310c <UART_SetConfig+0x2cc>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fa8:	2b30      	cmp	r3, #48	; 0x30
 8002faa:	d016      	beq.n	8002fda <UART_SetConfig+0x19a>
 8002fac:	2b30      	cmp	r3, #48	; 0x30
 8002fae:	d818      	bhi.n	8002fe2 <UART_SetConfig+0x1a2>
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d00a      	beq.n	8002fca <UART_SetConfig+0x18a>
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d814      	bhi.n	8002fe2 <UART_SetConfig+0x1a2>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <UART_SetConfig+0x182>
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d008      	beq.n	8002fd2 <UART_SetConfig+0x192>
 8002fc0:	e00f      	b.n	8002fe2 <UART_SetConfig+0x1a2>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc8:	e0ad      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd0:	e0a9      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd8:	e0a5      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe0:	e0a1      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe8:	e09d      	b.n	8003126 <UART_SetConfig+0x2e6>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a4a      	ldr	r2, [pc, #296]	; (8003118 <UART_SetConfig+0x2d8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d125      	bne.n	8003040 <UART_SetConfig+0x200>
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <UART_SetConfig+0x2cc>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8003000:	d016      	beq.n	8003030 <UART_SetConfig+0x1f0>
 8003002:	2bc0      	cmp	r3, #192	; 0xc0
 8003004:	d818      	bhi.n	8003038 <UART_SetConfig+0x1f8>
 8003006:	2b80      	cmp	r3, #128	; 0x80
 8003008:	d00a      	beq.n	8003020 <UART_SetConfig+0x1e0>
 800300a:	2b80      	cmp	r3, #128	; 0x80
 800300c:	d814      	bhi.n	8003038 <UART_SetConfig+0x1f8>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <UART_SetConfig+0x1d8>
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d008      	beq.n	8003028 <UART_SetConfig+0x1e8>
 8003016:	e00f      	b.n	8003038 <UART_SetConfig+0x1f8>
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301e:	e082      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003020:	2302      	movs	r3, #2
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003026:	e07e      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003028:	2304      	movs	r3, #4
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302e:	e07a      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003030:	2308      	movs	r3, #8
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003036:	e076      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003038:	2310      	movs	r3, #16
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800303e:	e072      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a35      	ldr	r2, [pc, #212]	; (800311c <UART_SetConfig+0x2dc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d12a      	bne.n	80030a0 <UART_SetConfig+0x260>
 800304a:	4b30      	ldr	r3, [pc, #192]	; (800310c <UART_SetConfig+0x2cc>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003058:	d01a      	beq.n	8003090 <UART_SetConfig+0x250>
 800305a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800305e:	d81b      	bhi.n	8003098 <UART_SetConfig+0x258>
 8003060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003064:	d00c      	beq.n	8003080 <UART_SetConfig+0x240>
 8003066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306a:	d815      	bhi.n	8003098 <UART_SetConfig+0x258>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <UART_SetConfig+0x238>
 8003070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003074:	d008      	beq.n	8003088 <UART_SetConfig+0x248>
 8003076:	e00f      	b.n	8003098 <UART_SetConfig+0x258>
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307e:	e052      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003080:	2302      	movs	r3, #2
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003086:	e04e      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003088:	2304      	movs	r3, #4
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308e:	e04a      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003090:	2308      	movs	r3, #8
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003096:	e046      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003098:	2310      	movs	r3, #16
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309e:	e042      	b.n	8003126 <UART_SetConfig+0x2e6>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a17      	ldr	r2, [pc, #92]	; (8003104 <UART_SetConfig+0x2c4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d13a      	bne.n	8003120 <UART_SetConfig+0x2e0>
 80030aa:	4b18      	ldr	r3, [pc, #96]	; (800310c <UART_SetConfig+0x2cc>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030b8:	d01a      	beq.n	80030f0 <UART_SetConfig+0x2b0>
 80030ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030be:	d81b      	bhi.n	80030f8 <UART_SetConfig+0x2b8>
 80030c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c4:	d00c      	beq.n	80030e0 <UART_SetConfig+0x2a0>
 80030c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ca:	d815      	bhi.n	80030f8 <UART_SetConfig+0x2b8>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <UART_SetConfig+0x298>
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d4:	d008      	beq.n	80030e8 <UART_SetConfig+0x2a8>
 80030d6:	e00f      	b.n	80030f8 <UART_SetConfig+0x2b8>
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e022      	b.n	8003126 <UART_SetConfig+0x2e6>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e01e      	b.n	8003126 <UART_SetConfig+0x2e6>
 80030e8:	2304      	movs	r3, #4
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e01a      	b.n	8003126 <UART_SetConfig+0x2e6>
 80030f0:	2308      	movs	r3, #8
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e016      	b.n	8003126 <UART_SetConfig+0x2e6>
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e012      	b.n	8003126 <UART_SetConfig+0x2e6>
 8003100:	efff69f3 	.word	0xefff69f3
 8003104:	40008000 	.word	0x40008000
 8003108:	40013800 	.word	0x40013800
 800310c:	40021000 	.word	0x40021000
 8003110:	40004400 	.word	0x40004400
 8003114:	40004800 	.word	0x40004800
 8003118:	40004c00 	.word	0x40004c00
 800311c:	40005000 	.word	0x40005000
 8003120:	2310      	movs	r3, #16
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a9f      	ldr	r2, [pc, #636]	; (80033a8 <UART_SetConfig+0x568>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d17a      	bne.n	8003226 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003134:	2b08      	cmp	r3, #8
 8003136:	d824      	bhi.n	8003182 <UART_SetConfig+0x342>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <UART_SetConfig+0x300>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003165 	.word	0x08003165
 8003144:	08003183 	.word	0x08003183
 8003148:	0800316d 	.word	0x0800316d
 800314c:	08003183 	.word	0x08003183
 8003150:	08003173 	.word	0x08003173
 8003154:	08003183 	.word	0x08003183
 8003158:	08003183 	.word	0x08003183
 800315c:	08003183 	.word	0x08003183
 8003160:	0800317b 	.word	0x0800317b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003164:	f7fe fdf0 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8003168:	61f8      	str	r0, [r7, #28]
        break;
 800316a:	e010      	b.n	800318e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316c:	4b8f      	ldr	r3, [pc, #572]	; (80033ac <UART_SetConfig+0x56c>)
 800316e:	61fb      	str	r3, [r7, #28]
        break;
 8003170:	e00d      	b.n	800318e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	f7fe fd51 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8003176:	61f8      	str	r0, [r7, #28]
        break;
 8003178:	e009      	b.n	800318e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317e:	61fb      	str	r3, [r7, #28]
        break;
 8003180:	e005      	b.n	800318e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800318c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80fb 	beq.w	800338c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d305      	bcc.n	80031b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d903      	bls.n	80031ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031b8:	e0e8      	b.n	800338c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2200      	movs	r2, #0
 80031be:	461c      	mov	r4, r3
 80031c0:	4615      	mov	r5, r2
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	022b      	lsls	r3, r5, #8
 80031cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031d0:	0222      	lsls	r2, r4, #8
 80031d2:	68f9      	ldr	r1, [r7, #12]
 80031d4:	6849      	ldr	r1, [r1, #4]
 80031d6:	0849      	lsrs	r1, r1, #1
 80031d8:	2000      	movs	r0, #0
 80031da:	4688      	mov	r8, r1
 80031dc:	4681      	mov	r9, r0
 80031de:	eb12 0a08 	adds.w	sl, r2, r8
 80031e2:	eb43 0b09 	adc.w	fp, r3, r9
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031f4:	4650      	mov	r0, sl
 80031f6:	4659      	mov	r1, fp
 80031f8:	f7fc ffea 	bl	80001d0 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320a:	d308      	bcc.n	800321e <UART_SetConfig+0x3de>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003212:	d204      	bcs.n	800321e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	e0b6      	b.n	800338c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003224:	e0b2      	b.n	800338c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322e:	d15e      	bne.n	80032ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003230:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003234:	2b08      	cmp	r3, #8
 8003236:	d828      	bhi.n	800328a <UART_SetConfig+0x44a>
 8003238:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <UART_SetConfig+0x400>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003265 	.word	0x08003265
 8003244:	0800326d 	.word	0x0800326d
 8003248:	08003275 	.word	0x08003275
 800324c:	0800328b 	.word	0x0800328b
 8003250:	0800327b 	.word	0x0800327b
 8003254:	0800328b 	.word	0x0800328b
 8003258:	0800328b 	.word	0x0800328b
 800325c:	0800328b 	.word	0x0800328b
 8003260:	08003283 	.word	0x08003283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003264:	f7fe fd70 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8003268:	61f8      	str	r0, [r7, #28]
        break;
 800326a:	e014      	b.n	8003296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800326c:	f7fe fd82 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 8003270:	61f8      	str	r0, [r7, #28]
        break;
 8003272:	e010      	b.n	8003296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003274:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <UART_SetConfig+0x56c>)
 8003276:	61fb      	str	r3, [r7, #28]
        break;
 8003278:	e00d      	b.n	8003296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327a:	f7fe fccd 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 800327e:	61f8      	str	r0, [r7, #28]
        break;
 8003280:	e009      	b.n	8003296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003286:	61fb      	str	r3, [r7, #28]
        break;
 8003288:	e005      	b.n	8003296 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003294:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d077      	beq.n	800338c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005a      	lsls	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	441a      	add	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b0f      	cmp	r3, #15
 80032b6:	d916      	bls.n	80032e6 <UART_SetConfig+0x4a6>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032be:	d212      	bcs.n	80032e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f023 030f 	bic.w	r3, r3, #15
 80032c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	8afb      	ldrh	r3, [r7, #22]
 80032d8:	4313      	orrs	r3, r2
 80032da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	8afa      	ldrh	r2, [r7, #22]
 80032e2:	60da      	str	r2, [r3, #12]
 80032e4:	e052      	b.n	800338c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032ec:	e04e      	b.n	800338c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d827      	bhi.n	8003346 <UART_SetConfig+0x506>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <UART_SetConfig+0x4bc>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003329 	.word	0x08003329
 8003304:	08003331 	.word	0x08003331
 8003308:	08003347 	.word	0x08003347
 800330c:	08003337 	.word	0x08003337
 8003310:	08003347 	.word	0x08003347
 8003314:	08003347 	.word	0x08003347
 8003318:	08003347 	.word	0x08003347
 800331c:	0800333f 	.word	0x0800333f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003320:	f7fe fd12 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8003324:	61f8      	str	r0, [r7, #28]
        break;
 8003326:	e014      	b.n	8003352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003328:	f7fe fd24 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 800332c:	61f8      	str	r0, [r7, #28]
        break;
 800332e:	e010      	b.n	8003352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003330:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <UART_SetConfig+0x56c>)
 8003332:	61fb      	str	r3, [r7, #28]
        break;
 8003334:	e00d      	b.n	8003352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003336:	f7fe fc6f 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 800333a:	61f8      	str	r0, [r7, #28]
        break;
 800333c:	e009      	b.n	8003352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003342:	61fb      	str	r3, [r7, #28]
        break;
 8003344:	e005      	b.n	8003352 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003350:	bf00      	nop
    }

    if (pclk != 0U)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d019      	beq.n	800338c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	085a      	lsrs	r2, r3, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	441a      	add	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	d909      	bls.n	8003386 <UART_SetConfig+0x546>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003378:	d205      	bcs.n	8003386 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60da      	str	r2, [r3, #12]
 8003384:	e002      	b.n	800338c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003398:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800339c:	4618      	mov	r0, r3
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a6:	bf00      	nop
 80033a8:	40008000 	.word	0x40008000
 80033ac:	00f42400 	.word	0x00f42400

080033b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01a      	beq.n	80034c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ae:	d10a      	bne.n	80034c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
  }
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b098      	sub	sp, #96	; 0x60
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003504:	f7fd fb66 	bl	8000bd4 <HAL_GetTick>
 8003508:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b08      	cmp	r3, #8
 8003516:	d12e      	bne.n	8003576 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003520:	2200      	movs	r2, #0
 8003522:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f88c 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d021      	beq.n	8003576 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003546:	653b      	str	r3, [r7, #80]	; 0x50
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
 8003552:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e6      	bne.n	8003532 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e062      	b.n	800363c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d149      	bne.n	8003618 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358c:	2200      	movs	r2, #0
 800358e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f856 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d03c      	beq.n	8003618 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	623b      	str	r3, [r7, #32]
   return(result);
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
 80035be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e6      	bne.n	800359e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3308      	adds	r3, #8
 80035d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	60fb      	str	r3, [r7, #12]
   return(result);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3308      	adds	r3, #8
 80035ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f0:	61fa      	str	r2, [r7, #28]
 80035f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	69b9      	ldr	r1, [r7, #24]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	617b      	str	r3, [r7, #20]
   return(result);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e5      	bne.n	80035d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e011      	b.n	800363c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3758      	adds	r7, #88	; 0x58
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003654:	e049      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365c:	d045      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fd fab9 	bl	8000bd4 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <UART_WaitOnFlagUntilTimeout+0x30>
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e048      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d031      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d110      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f838 	bl	8003712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2208      	movs	r2, #8
 80036a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e029      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c4:	d111      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f81e 	bl	8003712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e00f      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	429a      	cmp	r2, r3
 8003706:	d0a6      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003712:	b480      	push	{r7}
 8003714:	b095      	sub	sp, #84	; 0x54
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800372e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003738:	643b      	str	r3, [r7, #64]	; 0x40
 800373a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800373e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e6      	bne.n	800371a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3308      	adds	r3, #8
 8003752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	61fb      	str	r3, [r7, #28]
   return(result);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	64bb      	str	r3, [r7, #72]	; 0x48
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3308      	adds	r3, #8
 800376a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800376c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e5      	bne.n	800374c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003784:	2b01      	cmp	r3, #1
 8003786:	d118      	bne.n	80037ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	60bb      	str	r3, [r7, #8]
   return(result);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f023 0310 	bic.w	r3, r3, #16
 800379c:	647b      	str	r3, [r7, #68]	; 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6979      	ldr	r1, [r7, #20]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	613b      	str	r3, [r7, #16]
   return(result);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e6      	bne.n	8003788 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037ce:	bf00      	nop
 80037d0:	3754      	adds	r7, #84	; 0x54
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <__NVIC_SetPriority>:
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	db0a      	blt.n	8003806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	490c      	ldr	r1, [pc, #48]	; (8003828 <__NVIC_SetPriority+0x4c>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	440b      	add	r3, r1
 8003800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003804:	e00a      	b.n	800381c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4908      	ldr	r1, [pc, #32]	; (800382c <__NVIC_SetPriority+0x50>)
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3b04      	subs	r3, #4
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	440b      	add	r3, r1
 800381a:	761a      	strb	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000e100 	.word	0xe000e100
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <SysTick_Handler+0x1c>)
 8003836:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003838:	f002 f9bc 	bl	8005bb4 <xTaskGetSchedulerState>
 800383c:	4603      	mov	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d001      	beq.n	8003846 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003842:	f003 f8a1 	bl	8006988 <xPortSysTickHandler>
  }
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	e000e010 	.word	0xe000e010

08003850 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003854:	2100      	movs	r1, #0
 8003856:	f06f 0004 	mvn.w	r0, #4
 800385a:	f7ff ffbf 	bl	80037dc <__NVIC_SetPriority>
#endif
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800386a:	f3ef 8305 	mrs	r3, IPSR
 800386e:	603b      	str	r3, [r7, #0]
  return(result);
 8003870:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003876:	f06f 0305 	mvn.w	r3, #5
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	e00c      	b.n	8003898 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <osKernelInitialize+0x44>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d105      	bne.n	8003892 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <osKernelInitialize+0x44>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800388c:	2300      	movs	r3, #0
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	e002      	b.n	8003898 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003898:	687b      	ldr	r3, [r7, #4]
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000120 	.word	0x20000120

080038ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038b2:	f3ef 8305 	mrs	r3, IPSR
 80038b6:	603b      	str	r3, [r7, #0]
  return(result);
 80038b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80038be:	f06f 0305 	mvn.w	r3, #5
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	e010      	b.n	80038e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <osKernelStart+0x48>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d109      	bne.n	80038e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038ce:	f7ff ffbf 	bl	8003850 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <osKernelStart+0x48>)
 80038d4:	2202      	movs	r2, #2
 80038d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038d8:	f001 fd24 	bl	8005324 <vTaskStartScheduler>
      stat = osOK;
 80038dc:	2300      	movs	r3, #0
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	e002      	b.n	80038e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038e8:	687b      	ldr	r3, [r7, #4]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000120 	.word	0x20000120

080038f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08e      	sub	sp, #56	; 0x38
 80038fc:	af04      	add	r7, sp, #16
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003908:	f3ef 8305 	mrs	r3, IPSR
 800390c:	617b      	str	r3, [r7, #20]
  return(result);
 800390e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003910:	2b00      	cmp	r3, #0
 8003912:	d17e      	bne.n	8003a12 <osThreadNew+0x11a>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d07b      	beq.n	8003a12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800391e:	2318      	movs	r3, #24
 8003920:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800392a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d045      	beq.n	80039be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <osThreadNew+0x48>
        name = attr->name;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <osThreadNew+0x6e>
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b38      	cmp	r3, #56	; 0x38
 8003958:	d805      	bhi.n	8003966 <osThreadNew+0x6e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <osThreadNew+0x72>
        return (NULL);
 8003966:	2300      	movs	r3, #0
 8003968:	e054      	b.n	8003a14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00e      	beq.n	80039a0 <osThreadNew+0xa8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b5b      	cmp	r3, #91	; 0x5b
 8003988:	d90a      	bls.n	80039a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <osThreadNew+0xa8>
        mem = 1;
 800399a:	2301      	movs	r3, #1
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e010      	b.n	80039c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10c      	bne.n	80039c2 <osThreadNew+0xca>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d108      	bne.n	80039c2 <osThreadNew+0xca>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <osThreadNew+0xca>
          mem = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	e001      	b.n	80039c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d110      	bne.n	80039ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039d0:	9202      	str	r2, [sp, #8]
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	6a3a      	ldr	r2, [r7, #32]
 80039dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f001 fa4c 	bl	8004e7c <xTaskCreateStatic>
 80039e4:	4603      	mov	r3, r0
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e013      	b.n	8003a12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d110      	bne.n	8003a12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	f107 0310 	add.w	r3, r7, #16
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f001 fa97 	bl	8004f36 <xTaskCreate>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <osThreadNew+0x11a>
            hTask = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a12:	693b      	ldr	r3, [r7, #16]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a24:	f3ef 8305 	mrs	r3, IPSR
 8003a28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <osDelay+0x1c>
    stat = osErrorISR;
 8003a30:	f06f 0305 	mvn.w	r3, #5
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e007      	b.n	8003a48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f001 fc3a 	bl	80052bc <vTaskDelay>
    }
  }

  return (stat);
 8003a48:	68fb      	ldr	r3, [r7, #12]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b08a      	sub	sp, #40	; 0x28
 8003a56:	af02      	add	r7, sp, #8
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a62:	f3ef 8305 	mrs	r3, IPSR
 8003a66:	613b      	str	r3, [r7, #16]
  return(result);
 8003a68:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d175      	bne.n	8003b5a <osSemaphoreNew+0x108>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d072      	beq.n	8003b5a <osSemaphoreNew+0x108>
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d86e      	bhi.n	8003b5a <osSemaphoreNew+0x108>
    mem = -1;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <osSemaphoreNew+0x4c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b4f      	cmp	r3, #79	; 0x4f
 8003a96:	d902      	bls.n	8003a9e <osSemaphoreNew+0x4c>
        mem = 1;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e00c      	b.n	8003ab8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <osSemaphoreNew+0x66>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <osSemaphoreNew+0x66>
          mem = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e001      	b.n	8003ab8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003abe:	d04c      	beq.n	8003b5a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d128      	bne.n	8003b18 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d10a      	bne.n	8003ae2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	9200      	str	r2, [sp, #0]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f000 fa29 	bl	8003f30 <xQueueGenericCreateStatic>
 8003ade:	61f8      	str	r0, [r7, #28]
 8003ae0:	e005      	b.n	8003aee <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f000 fa9a 	bl	8004020 <xQueueGenericCreate>
 8003aec:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d022      	beq.n	8003b3a <osSemaphoreNew+0xe8>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01f      	beq.n	8003b3a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003afa:	2300      	movs	r3, #0
 8003afc:	2200      	movs	r2, #0
 8003afe:	2100      	movs	r1, #0
 8003b00:	69f8      	ldr	r0, [r7, #28]
 8003b02:	f000 fb55 	bl	80041b0 <xQueueGenericSend>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d016      	beq.n	8003b3a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003b0c:	69f8      	ldr	r0, [r7, #28]
 8003b0e:	f000 ffe1 	bl	8004ad4 <vQueueDelete>
            hSemaphore = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	e010      	b.n	8003b3a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d108      	bne.n	8003b30 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fad7 	bl	80040da <xQueueCreateCountingSemaphoreStatic>
 8003b2c:	61f8      	str	r0, [r7, #28]
 8003b2e:	e004      	b.n	8003b3a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fb08 	bl	8004148 <xQueueCreateCountingSemaphore>
 8003b38:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00c      	beq.n	8003b5a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <osSemaphoreNew+0xfc>
          name = attr->name;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e001      	b.n	8003b52 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003b52:	6979      	ldr	r1, [r7, #20]
 8003b54:	69f8      	ldr	r0, [r7, #28]
 8003b56:	f001 f909 	bl	8004d6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003b5a:	69fb      	ldr	r3, [r7, #28]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d103      	bne.n	8003b84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003b7c:	f06f 0303 	mvn.w	r3, #3
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e039      	b.n	8003bf8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b84:	f3ef 8305 	mrs	r3, IPSR
 8003b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d022      	beq.n	8003bd6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003b96:	f06f 0303 	mvn.w	r3, #3
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e02c      	b.n	8003bf8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2100      	movs	r1, #0
 8003baa:	6938      	ldr	r0, [r7, #16]
 8003bac:	f000 ff12 	bl	80049d4 <xQueueReceiveFromISR>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d003      	beq.n	8003bbe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003bb6:	f06f 0302 	mvn.w	r3, #2
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e01c      	b.n	8003bf8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d019      	beq.n	8003bf8 <osSemaphoreAcquire+0x94>
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <osSemaphoreAcquire+0xa0>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	e010      	b.n	8003bf8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	6938      	ldr	r0, [r7, #16]
 8003bda:	f000 fdef 	bl	80047bc <xQueueSemaphoreTake>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d009      	beq.n	8003bf8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003bea:	f06f 0301 	mvn.w	r3, #1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e002      	b.n	8003bf8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003bf2:	f06f 0302 	mvn.w	r3, #2
 8003bf6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003bf8:	697b      	ldr	r3, [r7, #20]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	e000ed04 	.word	0xe000ed04

08003c08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003c1e:	f06f 0303 	mvn.w	r3, #3
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e02c      	b.n	8003c80 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c26:	f3ef 8305 	mrs	r3, IPSR
 8003c2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01a      	beq.n	8003c68 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003c36:	f107 0308 	add.w	r3, r7, #8
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6938      	ldr	r0, [r7, #16]
 8003c3e:	f000 fc50 	bl	80044e2 <xQueueGiveFromISR>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d003      	beq.n	8003c50 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003c48:	f06f 0302 	mvn.w	r3, #2
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e017      	b.n	8003c80 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <osSemaphoreRelease+0x78>
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <osSemaphoreRelease+0x84>)
 8003c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	e00b      	b.n	8003c80 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	6938      	ldr	r0, [r7, #16]
 8003c70:	f000 fa9e 	bl	80041b0 <xQueueGenericSend>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d002      	beq.n	8003c80 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003c7a:	f06f 0302 	mvn.w	r3, #2
 8003c7e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003c80:	697b      	ldr	r3, [r7, #20]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <vApplicationGetIdleTaskMemory+0x2c>)
 8003ca0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4a06      	ldr	r2, [pc, #24]	; (8003cc0 <vApplicationGetIdleTaskMemory+0x30>)
 8003ca6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000124 	.word	0x20000124
 8003cc0:	20000180 	.word	0x20000180

08003cc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003cd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4a06      	ldr	r2, [pc, #24]	; (8003cf4 <vApplicationGetTimerTaskMemory+0x30>)
 8003cda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ce2:	601a      	str	r2, [r3, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	20000380 	.word	0x20000380
 8003cf4:	200003dc 	.word	0x200003dc

08003cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f103 0208 	add.w	r2, r3, #8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f103 0208 	add.w	r2, r3, #8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f103 0208 	add.w	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db0:	d103      	bne.n	8003dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e00c      	b.n	8003dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	e002      	b.n	8003dc8 <vListInsert+0x2e>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d2f6      	bcs.n	8003dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6892      	ldr	r2, [r2, #8]
 8003e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6852      	ldr	r2, [r2, #4]
 8003e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d103      	bne.n	8003e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	1e5a      	subs	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e8a:	f002 fceb 	bl	8006864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	441a      	add	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	68f9      	ldr	r1, [r7, #12]
 8003ebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	22ff      	movs	r2, #255	; 0xff
 8003ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	22ff      	movs	r2, #255	; 0xff
 8003ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d114      	bne.n	8003f0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3310      	adds	r3, #16
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fca3 	bl	8005838 <xTaskRemoveFromEventList>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <xQueueGenericReset+0xcc>)
 8003efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	e009      	b.n	8003f1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fef2 	bl	8003cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3324      	adds	r3, #36	; 0x24
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff feed 	bl	8003cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f1e:	f002 fcd1 	bl	80068c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f22:	2301      	movs	r3, #1
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	e000ed04 	.word	0xe000ed04

08003f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08e      	sub	sp, #56	; 0x38
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f72:	bf00      	nop
 8003f74:	e7fe      	b.n	8003f74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <xQueueGenericCreateStatic+0x52>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <xQueueGenericCreateStatic+0x56>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <xQueueGenericCreateStatic+0x58>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	623b      	str	r3, [r7, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <xQueueGenericCreateStatic+0x7e>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <xQueueGenericCreateStatic+0x82>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <xQueueGenericCreateStatic+0x84>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	61fb      	str	r3, [r7, #28]
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fce:	2350      	movs	r3, #80	; 0x50
 8003fd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b50      	cmp	r3, #80	; 0x50
 8003fd6:	d00a      	beq.n	8003fee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	61bb      	str	r3, [r7, #24]
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003fee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00d      	beq.n	8004016 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004002:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f83f 	bl	8004094 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004018:	4618      	mov	r0, r3
 800401a:	3730      	adds	r7, #48	; 0x30
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	613b      	str	r3, [r7, #16]
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	3350      	adds	r3, #80	; 0x50
 8004058:	4618      	mov	r0, r3
 800405a:	f002 fd25 	bl	8006aa8 <pvPortMalloc>
 800405e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d011      	beq.n	800408a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	3350      	adds	r3, #80	; 0x50
 800406e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004078:	79fa      	ldrb	r2, [r7, #7]
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	4613      	mov	r3, r2
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f805 	bl	8004094 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800408a:	69bb      	ldr	r3, [r7, #24]
	}
 800408c:	4618      	mov	r0, r3
 800408e:	3720      	adds	r7, #32
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e002      	b.n	80040b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040c2:	2101      	movs	r1, #1
 80040c4:	69b8      	ldr	r0, [r7, #24]
 80040c6:	f7ff fecb 	bl	8003e60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b08a      	sub	sp, #40	; 0x28
 80040de:	af02      	add	r7, sp, #8
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	61bb      	str	r3, [r7, #24]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	429a      	cmp	r2, r3
 8004108:	d90a      	bls.n	8004120 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	617b      	str	r3, [r7, #20]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004120:	2302      	movs	r3, #2
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	2100      	movs	r1, #0
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff ff00 	bl	8003f30 <xQueueGenericCreateStatic>
 8004130:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800413e:	69fb      	ldr	r3, [r7, #28]
	}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	613b      	str	r3, [r7, #16]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d90a      	bls.n	800418c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	60fb      	str	r3, [r7, #12]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800418c:	2202      	movs	r2, #2
 800418e:	2100      	movs	r1, #0
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff45 	bl	8004020 <xQueueGenericCreate>
 8004196:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80041a4:	697b      	ldr	r3, [r7, #20]
	}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	; 0x38
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041be:	2300      	movs	r3, #0
 80041c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <xQueueGenericSend+0x32>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <xQueueGenericSend+0x40>
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <xQueueGenericSend+0x44>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <xQueueGenericSend+0x46>
 80041f4:	2300      	movs	r3, #0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <xQueueGenericSend+0x60>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800420c:	bf00      	nop
 800420e:	e7fe      	b.n	800420e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d103      	bne.n	800421e <xQueueGenericSend+0x6e>
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <xQueueGenericSend+0x72>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <xQueueGenericSend+0x74>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xQueueGenericSend+0x8e>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	623b      	str	r3, [r7, #32]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800423e:	f001 fcb9 	bl	8005bb4 <xTaskGetSchedulerState>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <xQueueGenericSend+0x9e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <xQueueGenericSend+0xa2>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <xQueueGenericSend+0xa4>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <xQueueGenericSend+0xbe>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	61fb      	str	r3, [r7, #28]
}
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800426e:	f002 faf9 	bl	8006864 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <xQueueGenericSend+0xd4>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d129      	bne.n	80042d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800428a:	f000 fc5e 	bl	8004b4a <prvCopyDataToQueue>
 800428e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2b00      	cmp	r3, #0
 8004296:	d010      	beq.n	80042ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	3324      	adds	r3, #36	; 0x24
 800429c:	4618      	mov	r0, r3
 800429e:	f001 facb 	bl	8005838 <xTaskRemoveFromEventList>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d013      	beq.n	80042d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042a8:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <xQueueGenericSend+0x1f8>)
 80042aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	e00a      	b.n	80042d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042c0:	4b39      	ldr	r3, [pc, #228]	; (80043a8 <xQueueGenericSend+0x1f8>)
 80042c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042d0:	f002 faf8 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e063      	b.n	80043a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042de:	f002 faf1 	bl	80068c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e05c      	b.n	80043a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042ec:	f107 0314 	add.w	r3, r7, #20
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 fb05 	bl	8005900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042f6:	2301      	movs	r3, #1
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042fa:	f002 fae3 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042fe:	f001 f877 	bl	80053f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004302:	f002 faaf 	bl	8006864 <vPortEnterCritical>
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800430c:	b25b      	sxtb	r3, r3
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004312:	d103      	bne.n	800431c <xQueueGenericSend+0x16c>
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004322:	b25b      	sxtb	r3, r3
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004328:	d103      	bne.n	8004332 <xQueueGenericSend+0x182>
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004332:	f002 fac7 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004336:	1d3a      	adds	r2, r7, #4
 8004338:	f107 0314 	add.w	r3, r7, #20
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f001 faf4 	bl	800592c <xTaskCheckForTimeOut>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d124      	bne.n	8004394 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800434a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800434c:	f000 fcf5 	bl	8004d3a <prvIsQueueFull>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d018      	beq.n	8004388 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	3310      	adds	r3, #16
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f001 fa1a 	bl	8005798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004366:	f000 fc80 	bl	8004c6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800436a:	f001 f84f 	bl	800540c <xTaskResumeAll>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	f47f af7c 	bne.w	800426e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <xQueueGenericSend+0x1f8>)
 8004378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	e772      	b.n	800426e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800438a:	f000 fc6e 	bl	8004c6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800438e:	f001 f83d 	bl	800540c <xTaskResumeAll>
 8004392:	e76c      	b.n	800426e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004396:	f000 fc68 	bl	8004c6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800439a:	f001 f837 	bl	800540c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800439e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3738      	adds	r7, #56	; 0x38
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b090      	sub	sp, #64	; 0x40
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d103      	bne.n	80043e8 <xQueueGenericSendFromISR+0x3c>
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <xQueueGenericSendFromISR+0x40>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <xQueueGenericSendFromISR+0x42>
 80043ec:	2300      	movs	r3, #0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d103      	bne.n	8004416 <xQueueGenericSendFromISR+0x6a>
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <xQueueGenericSendFromISR+0x6e>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <xQueueGenericSendFromISR+0x70>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	623b      	str	r3, [r7, #32]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004436:	f002 faf7 	bl	8006a28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800443a:	f3ef 8211 	mrs	r2, BASEPRI
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	61fa      	str	r2, [r7, #28]
 8004450:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004452:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	429a      	cmp	r2, r3
 8004460:	d302      	bcc.n	8004468 <xQueueGenericSendFromISR+0xbc>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d12f      	bne.n	80044c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800446e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800447e:	f000 fb64 	bl	8004b4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004482:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800448a:	d112      	bne.n	80044b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	4618      	mov	r0, r3
 800449a:	f001 f9cd 	bl	8005838 <xTaskRemoveFromEventList>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00e      	beq.n	80044c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e007      	b.n	80044c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044b6:	3301      	adds	r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	b25a      	sxtb	r2, r3
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044c2:	2301      	movs	r3, #1
 80044c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80044c6:	e001      	b.n	80044cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3740      	adds	r7, #64	; 0x40
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08e      	sub	sp, #56	; 0x38
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <xQueueGiveFromISR+0x2a>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	623b      	str	r3, [r7, #32]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <xQueueGiveFromISR+0x48>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	61fb      	str	r3, [r7, #28]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <xQueueGiveFromISR+0x58>
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <xQueueGiveFromISR+0x5c>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <xQueueGiveFromISR+0x5e>
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xQueueGiveFromISR+0x78>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	61bb      	str	r3, [r7, #24]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800455a:	f002 fa65 	bl	8006a28 <vPortValidateInterruptPriority>
	__asm volatile
 800455e:	f3ef 8211 	mrs	r2, BASEPRI
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	617a      	str	r2, [r7, #20]
 8004574:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004576:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004586:	429a      	cmp	r2, r3
 8004588:	d22b      	bcs.n	80045e2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800459c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a4:	d112      	bne.n	80045cc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d016      	beq.n	80045dc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	3324      	adds	r3, #36	; 0x24
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 f940 	bl	8005838 <xTaskRemoveFromEventList>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00e      	beq.n	80045dc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e007      	b.n	80045dc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d0:	3301      	adds	r3, #1
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	b25a      	sxtb	r2, r3
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045dc:	2301      	movs	r3, #1
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
 80045e0:	e001      	b.n	80045e6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f383 8811 	msr	BASEPRI, r3
}
 80045f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3738      	adds	r7, #56	; 0x38
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08c      	sub	sp, #48	; 0x30
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004608:	2300      	movs	r3, #0
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <xQueueReceive+0x30>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	623b      	str	r3, [r7, #32]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d103      	bne.n	800463a <xQueueReceive+0x3e>
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <xQueueReceive+0x42>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <xQueueReceive+0x44>
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xQueueReceive+0x5e>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	61fb      	str	r3, [r7, #28]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800465a:	f001 faab 	bl	8005bb4 <xTaskGetSchedulerState>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <xQueueReceive+0x6e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <xQueueReceive+0x72>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <xQueueReceive+0x74>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <xQueueReceive+0x8e>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	61bb      	str	r3, [r7, #24]
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800468a:	f002 f8eb 	bl	8006864 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01f      	beq.n	80046da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800469e:	f000 fabe 	bl	8004c1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1e5a      	subs	r2, r3, #1
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00f      	beq.n	80046d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	3310      	adds	r3, #16
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 f8be 	bl	8005838 <xTaskRemoveFromEventList>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046c2:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <xQueueReceive+0x1bc>)
 80046c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046d2:	f002 f8f7 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e069      	b.n	80047ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d103      	bne.n	80046e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046e0:	f002 f8f0 	bl	80068c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e062      	b.n	80047ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046ee:	f107 0310 	add.w	r3, r7, #16
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 f904 	bl	8005900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046f8:	2301      	movs	r3, #1
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046fc:	f002 f8e2 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004700:	f000 fe76 	bl	80053f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004704:	f002 f8ae 	bl	8006864 <vPortEnterCritical>
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800470e:	b25b      	sxtb	r3, r3
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004714:	d103      	bne.n	800471e <xQueueReceive+0x122>
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004724:	b25b      	sxtb	r3, r3
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472a:	d103      	bne.n	8004734 <xQueueReceive+0x138>
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004734:	f002 f8c6 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004738:	1d3a      	adds	r2, r7, #4
 800473a:	f107 0310 	add.w	r3, r7, #16
 800473e:	4611      	mov	r1, r2
 8004740:	4618      	mov	r0, r3
 8004742:	f001 f8f3 	bl	800592c <xTaskCheckForTimeOut>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d123      	bne.n	8004794 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800474c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474e:	f000 fade 	bl	8004d0e <prvIsQueueEmpty>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d017      	beq.n	8004788 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	3324      	adds	r3, #36	; 0x24
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f001 f819 	bl	8005798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004768:	f000 fa7f 	bl	8004c6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800476c:	f000 fe4e 	bl	800540c <xTaskResumeAll>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d189      	bne.n	800468a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <xQueueReceive+0x1bc>)
 8004778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	e780      	b.n	800468a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478a:	f000 fa6e 	bl	8004c6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800478e:	f000 fe3d 	bl	800540c <xTaskResumeAll>
 8004792:	e77a      	b.n	800468a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004796:	f000 fa68 	bl	8004c6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800479a:	f000 fe37 	bl	800540c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800479e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a0:	f000 fab5 	bl	8004d0e <prvIsQueueEmpty>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f43f af6f 	beq.w	800468a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3730      	adds	r7, #48	; 0x30
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08e      	sub	sp, #56	; 0x38
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	623b      	str	r3, [r7, #32]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <xQueueSemaphoreTake+0x50>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	61fb      	str	r3, [r7, #28]
}
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800480c:	f001 f9d2 	bl	8005bb4 <xTaskGetSchedulerState>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <xQueueSemaphoreTake+0x60>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <xQueueSemaphoreTake+0x64>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <xQueueSemaphoreTake+0x66>
 8004820:	2300      	movs	r3, #0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	61bb      	str	r3, [r7, #24]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800483c:	f002 f812 	bl	8006864 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d024      	beq.n	8004896 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	1e5a      	subs	r2, r3, #1
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800485c:	f001 fb20 	bl	8005ea0 <pvTaskIncrementMutexHeldCount>
 8004860:	4602      	mov	r2, r0
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00f      	beq.n	800488e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	3310      	adds	r3, #16
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ffe0 	bl	8005838 <xTaskRemoveFromEventList>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800487e:	4b54      	ldr	r3, [pc, #336]	; (80049d0 <xQueueSemaphoreTake+0x214>)
 8004880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800488e:	f002 f819 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 8004892:	2301      	movs	r3, #1
 8004894:	e097      	b.n	80049c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d111      	bne.n	80048c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	617b      	str	r3, [r7, #20]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80048b8:	f002 f804 	bl	80068c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048bc:	2300      	movs	r3, #0
 80048be:	e082      	b.n	80049c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 f818 	bl	8005900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048d4:	f001 fff6 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048d8:	f000 fd8a 	bl	80053f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048dc:	f001 ffc2 	bl	8006864 <vPortEnterCritical>
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048e6:	b25b      	sxtb	r3, r3
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ec:	d103      	bne.n	80048f6 <xQueueSemaphoreTake+0x13a>
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004902:	d103      	bne.n	800490c <xQueueSemaphoreTake+0x150>
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800490c:	f001 ffda 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004910:	463a      	mov	r2, r7
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	4611      	mov	r1, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f001 f807 	bl	800592c <xTaskCheckForTimeOut>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d132      	bne.n	800498a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004926:	f000 f9f2 	bl	8004d0e <prvIsQueueEmpty>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d026      	beq.n	800497e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004938:	f001 ff94 	bl	8006864 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4618      	mov	r0, r3
 8004942:	f001 f955 	bl	8005bf0 <xTaskPriorityInherit>
 8004946:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004948:	f001 ffbc 	bl	80068c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	3324      	adds	r3, #36	; 0x24
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f000 ff1f 	bl	8005798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800495a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800495c:	f000 f985 	bl	8004c6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004960:	f000 fd54 	bl	800540c <xTaskResumeAll>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	f47f af68 	bne.w	800483c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800496c:	4b18      	ldr	r3, [pc, #96]	; (80049d0 <xQueueSemaphoreTake+0x214>)
 800496e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	e75e      	b.n	800483c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800497e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004980:	f000 f973 	bl	8004c6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004984:	f000 fd42 	bl	800540c <xTaskResumeAll>
 8004988:	e758      	b.n	800483c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800498a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800498c:	f000 f96d 	bl	8004c6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004990:	f000 fd3c 	bl	800540c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004996:	f000 f9ba 	bl	8004d0e <prvIsQueueEmpty>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	f43f af4d 	beq.w	800483c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80049a8:	f001 ff5c 	bl	8006864 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80049ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049ae:	f000 f8b4 	bl	8004b1a <prvGetDisinheritPriorityAfterTimeout>
 80049b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 f9ee 	bl	8005d9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80049c0:	f001 ff80 	bl	80068c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3738      	adds	r7, #56	; 0x38
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08e      	sub	sp, #56	; 0x38
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	623b      	str	r3, [r7, #32]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <xQueueReceiveFromISR+0x3a>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <xQueueReceiveFromISR+0x3e>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <xQueueReceiveFromISR+0x40>
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	61fb      	str	r3, [r7, #28]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a2e:	f001 fffb 	bl	8006a28 <vPortValidateInterruptPriority>
	__asm volatile
 8004a32:	f3ef 8211 	mrs	r2, BASEPRI
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	61ba      	str	r2, [r7, #24]
 8004a48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d02f      	beq.n	8004aba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a68:	f000 f8d9 	bl	8004c1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	1e5a      	subs	r2, r3, #1
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004a74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a7c:	d112      	bne.n	8004aa4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	3310      	adds	r3, #16
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fed4 	bl	8005838 <xTaskRemoveFromEventList>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00e      	beq.n	8004ab4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e007      	b.n	8004ab4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	b25a      	sxtb	r2, r3
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab8:	e001      	b.n	8004abe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f383 8811 	msr	BASEPRI, r3
}
 8004ac8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3738      	adds	r7, #56	; 0x38
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <vQueueDelete+0x28>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	60bb      	str	r3, [r7, #8]
}
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f95f 	bl	8004dc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f002 f897 	bl	8006c40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d006      	beq.n	8004b38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e001      	b.n	8004b3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
	}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10d      	bne.n	8004b84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d14d      	bne.n	8004c0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f001 f8a3 	bl	8005cc0 <xTaskPriorityDisinherit>
 8004b7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	609a      	str	r2, [r3, #8]
 8004b82:	e043      	b.n	8004c0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d119      	bne.n	8004bbe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6858      	ldr	r0, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	461a      	mov	r2, r3
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	f002 f99d 	bl	8006ed4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	441a      	add	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d32b      	bcc.n	8004c0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	e026      	b.n	8004c0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68d8      	ldr	r0, [r3, #12]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	f002 f983 	bl	8006ed4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	425b      	negs	r3, r3
 8004bd8:	441a      	add	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d207      	bcs.n	8004bfa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	425b      	negs	r3, r3
 8004bf4:	441a      	add	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d105      	bne.n	8004c0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c14:	697b      	ldr	r3, [r7, #20]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d018      	beq.n	8004c62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d303      	bcc.n	8004c52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68d9      	ldr	r1, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6838      	ldr	r0, [r7, #0]
 8004c5e:	f002 f939 	bl	8006ed4 <memcpy>
	}
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c72:	f001 fdf7 	bl	8006864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c7e:	e011      	b.n	8004ca4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d012      	beq.n	8004cae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3324      	adds	r3, #36	; 0x24
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fdd3 	bl	8005838 <xTaskRemoveFromEventList>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c98:	f000 feaa 	bl	80059f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dce9      	bgt.n	8004c80 <prvUnlockQueue+0x16>
 8004cac:	e000      	b.n	8004cb0 <prvUnlockQueue+0x46>
					break;
 8004cae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	22ff      	movs	r2, #255	; 0xff
 8004cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cb8:	f001 fe04 	bl	80068c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cbc:	f001 fdd2 	bl	8006864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cc8:	e011      	b.n	8004cee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d012      	beq.n	8004cf8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3310      	adds	r3, #16
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fdae 	bl	8005838 <xTaskRemoveFromEventList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ce2:	f000 fe85 	bl	80059f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ce6:	7bbb      	ldrb	r3, [r7, #14]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dce9      	bgt.n	8004cca <prvUnlockQueue+0x60>
 8004cf6:	e000      	b.n	8004cfa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cf8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	22ff      	movs	r2, #255	; 0xff
 8004cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d02:	f001 fddf 	bl	80068c4 <vPortExitCritical>
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d16:	f001 fda5 	bl	8006864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d22:	2301      	movs	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e001      	b.n	8004d2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d2c:	f001 fdca 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 8004d30:	68fb      	ldr	r3, [r7, #12]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d42:	f001 fd8f 	bl	8006864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d102      	bne.n	8004d58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d52:	2301      	movs	r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e001      	b.n	8004d5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d5c:	f001 fdb2 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 8004d60:	68fb      	ldr	r3, [r7, #12]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e014      	b.n	8004da6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d7c:	4a0f      	ldr	r2, [pc, #60]	; (8004dbc <vQueueAddToRegistry+0x50>)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d88:	490c      	ldr	r1, [pc, #48]	; (8004dbc <vQueueAddToRegistry+0x50>)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <vQueueAddToRegistry+0x50>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4413      	add	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d9e:	e006      	b.n	8004dae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3301      	adds	r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b07      	cmp	r3, #7
 8004daa:	d9e7      	bls.n	8004d7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	200007dc 	.word	0x200007dc

08004dc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e016      	b.n	8004dfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004dce:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <vQueueUnregisterQueue+0x50>)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d10b      	bne.n	8004df6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004dde:	4a0c      	ldr	r2, [pc, #48]	; (8004e10 <vQueueUnregisterQueue+0x50>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2100      	movs	r1, #0
 8004de4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <vQueueUnregisterQueue+0x50>)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	2200      	movs	r2, #0
 8004df2:	605a      	str	r2, [r3, #4]
				break;
 8004df4:	e006      	b.n	8004e04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b07      	cmp	r3, #7
 8004e00:	d9e5      	bls.n	8004dce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	200007dc 	.word	0x200007dc

08004e14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e24:	f001 fd1e 	bl	8006864 <vPortEnterCritical>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e2e:	b25b      	sxtb	r3, r3
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e34:	d103      	bne.n	8004e3e <vQueueWaitForMessageRestricted+0x2a>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e4a:	d103      	bne.n	8004e54 <vQueueWaitForMessageRestricted+0x40>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e54:	f001 fd36 	bl	80068c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	3324      	adds	r3, #36	; 0x24
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fcb9 	bl	80057e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e6e:	6978      	ldr	r0, [r7, #20]
 8004e70:	f7ff fefb 	bl	8004c6a <prvUnlockQueue>
	}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08e      	sub	sp, #56	; 0x38
 8004e80:	af04      	add	r7, sp, #16
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	61fb      	str	r3, [r7, #28]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ec2:	235c      	movs	r3, #92	; 0x5c
 8004ec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b5c      	cmp	r3, #92	; 0x5c
 8004eca:	d00a      	beq.n	8004ee2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	61bb      	str	r3, [r7, #24]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ee2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01e      	beq.n	8004f28 <xTaskCreateStatic+0xac>
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01b      	beq.n	8004f28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f02:	2300      	movs	r3, #0
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f850 	bl	8004fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f22:	f000 f8dd 	bl	80050e0 <prvAddNewTaskToReadyList>
 8004f26:	e001      	b.n	8004f2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f2c:	697b      	ldr	r3, [r7, #20]
	}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3728      	adds	r7, #40	; 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b08c      	sub	sp, #48	; 0x30
 8004f3a:	af04      	add	r7, sp, #16
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	4613      	mov	r3, r2
 8004f44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 fdac 	bl	8006aa8 <pvPortMalloc>
 8004f50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00e      	beq.n	8004f76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f58:	205c      	movs	r0, #92	; 0x5c
 8004f5a:	f001 fda5 	bl	8006aa8 <pvPortMalloc>
 8004f5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f6c:	e005      	b.n	8004f7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f6e:	6978      	ldr	r0, [r7, #20]
 8004f70:	f001 fe66 	bl	8006c40 <vPortFree>
 8004f74:	e001      	b.n	8004f7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d017      	beq.n	8004fb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9303      	str	r3, [sp, #12]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f80e 	bl	8004fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fa4:	69f8      	ldr	r0, [r7, #28]
 8004fa6:	f000 f89b 	bl	80050e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004faa:	2301      	movs	r3, #1
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	e002      	b.n	8004fb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
	}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	21a5      	movs	r1, #165	; 0xa5
 8004fda:	f001 ff4f 	bl	8006e7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f023 0307 	bic.w	r3, r3, #7
 8004ff6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	617b      	str	r3, [r7, #20]
}
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01f      	beq.n	800505e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e012      	b.n	800504a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	7819      	ldrb	r1, [r3, #0]
 800502c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	3334      	adds	r3, #52	; 0x34
 8005034:	460a      	mov	r2, r1
 8005036:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d006      	beq.n	8005052 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	3301      	adds	r3, #1
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	2b0f      	cmp	r3, #15
 800504e:	d9e9      	bls.n	8005024 <prvInitialiseNewTask+0x64>
 8005050:	e000      	b.n	8005054 <prvInitialiseNewTask+0x94>
			{
				break;
 8005052:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800505c:	e003      	b.n	8005066 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	2b37      	cmp	r3, #55	; 0x37
 800506a:	d901      	bls.n	8005070 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800506c:	2337      	movs	r3, #55	; 0x37
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005074:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	2200      	movs	r2, #0
 8005080:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	3304      	adds	r3, #4
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fe56 	bl	8003d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	3318      	adds	r3, #24
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe fe51 	bl	8003d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2200      	movs	r2, #0
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	69b8      	ldr	r0, [r7, #24]
 80050c0:	f001 faa4 	bl	800660c <pxPortInitialiseStack>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050d6:	bf00      	nop
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050e8:	f001 fbbc 	bl	8006864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050ec:	4b2d      	ldr	r3, [pc, #180]	; (80051a4 <prvAddNewTaskToReadyList+0xc4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	4a2c      	ldr	r2, [pc, #176]	; (80051a4 <prvAddNewTaskToReadyList+0xc4>)
 80050f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050f6:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <prvAddNewTaskToReadyList+0xc8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050fe:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <prvAddNewTaskToReadyList+0xc8>)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005104:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <prvAddNewTaskToReadyList+0xc4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d110      	bne.n	800512e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800510c:	f000 fc94 	bl	8005a38 <prvInitialiseTaskLists>
 8005110:	e00d      	b.n	800512e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005112:	4b26      	ldr	r3, [pc, #152]	; (80051ac <prvAddNewTaskToReadyList+0xcc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800511a:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <prvAddNewTaskToReadyList+0xc8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	429a      	cmp	r2, r3
 8005126:	d802      	bhi.n	800512e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005128:	4a1f      	ldr	r2, [pc, #124]	; (80051a8 <prvAddNewTaskToReadyList+0xc8>)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800512e:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <prvAddNewTaskToReadyList+0xd0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	4a1e      	ldr	r2, [pc, #120]	; (80051b0 <prvAddNewTaskToReadyList+0xd0>)
 8005136:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <prvAddNewTaskToReadyList+0xd0>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <prvAddNewTaskToReadyList+0xd4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d903      	bls.n	8005154 <prvAddNewTaskToReadyList+0x74>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <prvAddNewTaskToReadyList+0xd4>)
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <prvAddNewTaskToReadyList+0xd8>)
 8005162:	441a      	add	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3304      	adds	r3, #4
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f7fe fdf1 	bl	8003d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005170:	f001 fba8 	bl	80068c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <prvAddNewTaskToReadyList+0xcc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00e      	beq.n	800519a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <prvAddNewTaskToReadyList+0xc8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	429a      	cmp	r2, r3
 8005188:	d207      	bcs.n	800519a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <prvAddNewTaskToReadyList+0xdc>)
 800518c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000cf0 	.word	0x20000cf0
 80051a8:	2000081c 	.word	0x2000081c
 80051ac:	20000cfc 	.word	0x20000cfc
 80051b0:	20000d0c 	.word	0x20000d0c
 80051b4:	20000cf8 	.word	0x20000cf8
 80051b8:	20000820 	.word	0x20000820
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <vTaskDelayUntil+0x2a>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	617b      	str	r3, [r7, #20]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <vTaskDelayUntil+0x46>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	613b      	str	r3, [r7, #16]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005206:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <vTaskDelayUntil+0xf0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <vTaskDelayUntil+0x64>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	60fb      	str	r3, [r7, #12]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005224:	f000 f8e4 	bl	80053f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005228:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <vTaskDelayUntil+0xf4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	4413      	add	r3, r2
 8005236:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a3a      	ldr	r2, [r7, #32]
 800523e:	429a      	cmp	r2, r3
 8005240:	d20b      	bcs.n	800525a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	429a      	cmp	r2, r3
 800524a:	d211      	bcs.n	8005270 <vTaskDelayUntil+0xb0>
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	429a      	cmp	r2, r3
 8005252:	d90d      	bls.n	8005270 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
 8005258:	e00a      	b.n	8005270 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	429a      	cmp	r2, r3
 8005262:	d303      	bcc.n	800526c <vTaskDelayUntil+0xac>
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	429a      	cmp	r2, r3
 800526a:	d901      	bls.n	8005270 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800526c:	2301      	movs	r3, #1
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d006      	beq.n	800528a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2100      	movs	r1, #0
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fe1f 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800528a:	f000 f8bf 	bl	800540c <xTaskResumeAll>
 800528e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <vTaskDelayUntil+0xf8>)
 8005298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052a6:	bf00      	nop
 80052a8:	3728      	adds	r7, #40	; 0x28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000d18 	.word	0x20000d18
 80052b4:	20000cf4 	.word	0x20000cf4
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d017      	beq.n	80052fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <vTaskDelay+0x60>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <vTaskDelay+0x30>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60bb      	str	r3, [r7, #8]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052ec:	f000 f880 	bl	80053f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052f0:	2100      	movs	r1, #0
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fde8 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052f8:	f000 f888 	bl	800540c <xTaskResumeAll>
 80052fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <vTaskDelay+0x64>)
 8005306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000d18 	.word	0x20000d18
 8005320:	e000ed04 	.word	0xe000ed04

08005324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800532e:	2300      	movs	r3, #0
 8005330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005332:	463a      	mov	r2, r7
 8005334:	1d39      	adds	r1, r7, #4
 8005336:	f107 0308 	add.w	r3, r7, #8
 800533a:	4618      	mov	r0, r3
 800533c:	f7fe fca8 	bl	8003c90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	9202      	str	r2, [sp, #8]
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	2300      	movs	r3, #0
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	2300      	movs	r3, #0
 8005350:	460a      	mov	r2, r1
 8005352:	4921      	ldr	r1, [pc, #132]	; (80053d8 <vTaskStartScheduler+0xb4>)
 8005354:	4821      	ldr	r0, [pc, #132]	; (80053dc <vTaskStartScheduler+0xb8>)
 8005356:	f7ff fd91 	bl	8004e7c <xTaskCreateStatic>
 800535a:	4603      	mov	r3, r0
 800535c:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <vTaskStartScheduler+0xbc>)
 800535e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005360:	4b1f      	ldr	r3, [pc, #124]	; (80053e0 <vTaskStartScheduler+0xbc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005368:	2301      	movs	r3, #1
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e001      	b.n	8005372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d102      	bne.n	800537e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005378:	f000 fdfa 	bl	8005f70 <xTimerCreateTimerTask>
 800537c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d116      	bne.n	80053b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	613b      	str	r3, [r7, #16]
}
 8005396:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005398:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <vTaskStartScheduler+0xc0>)
 800539a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800539e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053a0:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <vTaskStartScheduler+0xc4>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053a6:	4b11      	ldr	r3, [pc, #68]	; (80053ec <vTaskStartScheduler+0xc8>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053ac:	f001 f9b8 	bl	8006720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053b0:	e00e      	b.n	80053d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b8:	d10a      	bne.n	80053d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60fb      	str	r3, [r7, #12]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <vTaskStartScheduler+0xaa>
}
 80053d0:	bf00      	nop
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	08006f54 	.word	0x08006f54
 80053dc:	08005a09 	.word	0x08005a09
 80053e0:	20000d14 	.word	0x20000d14
 80053e4:	20000d10 	.word	0x20000d10
 80053e8:	20000cfc 	.word	0x20000cfc
 80053ec:	20000cf4 	.word	0x20000cf4

080053f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <vTaskSuspendAll+0x18>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	4a03      	ldr	r2, [pc, #12]	; (8005408 <vTaskSuspendAll+0x18>)
 80053fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	20000d18 	.word	0x20000d18

0800540c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005416:	2300      	movs	r3, #0
 8005418:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800541a:	4b42      	ldr	r3, [pc, #264]	; (8005524 <xTaskResumeAll+0x118>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <xTaskResumeAll+0x2c>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	603b      	str	r3, [r7, #0]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005438:	f001 fa14 	bl	8006864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800543c:	4b39      	ldr	r3, [pc, #228]	; (8005524 <xTaskResumeAll+0x118>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3b01      	subs	r3, #1
 8005442:	4a38      	ldr	r2, [pc, #224]	; (8005524 <xTaskResumeAll+0x118>)
 8005444:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005446:	4b37      	ldr	r3, [pc, #220]	; (8005524 <xTaskResumeAll+0x118>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d162      	bne.n	8005514 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800544e:	4b36      	ldr	r3, [pc, #216]	; (8005528 <xTaskResumeAll+0x11c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d05e      	beq.n	8005514 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005456:	e02f      	b.n	80054b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005458:	4b34      	ldr	r3, [pc, #208]	; (800552c <xTaskResumeAll+0x120>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3318      	adds	r3, #24
 8005464:	4618      	mov	r0, r3
 8005466:	f7fe fcd1 	bl	8003e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3304      	adds	r3, #4
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fccc 	bl	8003e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <xTaskResumeAll+0x124>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d903      	bls.n	8005488 <xTaskResumeAll+0x7c>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <xTaskResumeAll+0x124>)
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4a27      	ldr	r2, [pc, #156]	; (8005534 <xTaskResumeAll+0x128>)
 8005496:	441a      	add	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3304      	adds	r3, #4
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f7fe fc57 	bl	8003d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a8:	4b23      	ldr	r3, [pc, #140]	; (8005538 <xTaskResumeAll+0x12c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80054b2:	4b22      	ldr	r3, [pc, #136]	; (800553c <xTaskResumeAll+0x130>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054b8:	4b1c      	ldr	r3, [pc, #112]	; (800552c <xTaskResumeAll+0x120>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1cb      	bne.n	8005458 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054c6:	f000 fb55 	bl	8005b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054ca:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <xTaskResumeAll+0x134>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054d6:	f000 f847 	bl	8005568 <xTaskIncrementTick>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80054e0:	4b16      	ldr	r3, [pc, #88]	; (800553c <xTaskResumeAll+0x130>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f1      	bne.n	80054d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <xTaskResumeAll+0x134>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054f8:	4b10      	ldr	r3, [pc, #64]	; (800553c <xTaskResumeAll+0x130>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005500:	2301      	movs	r3, #1
 8005502:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <xTaskResumeAll+0x138>)
 8005506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005514:	f001 f9d6 	bl	80068c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005518:	68bb      	ldr	r3, [r7, #8]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000d18 	.word	0x20000d18
 8005528:	20000cf0 	.word	0x20000cf0
 800552c:	20000cb0 	.word	0x20000cb0
 8005530:	20000cf8 	.word	0x20000cf8
 8005534:	20000820 	.word	0x20000820
 8005538:	2000081c 	.word	0x2000081c
 800553c:	20000d04 	.word	0x20000d04
 8005540:	20000d00 	.word	0x20000d00
 8005544:	e000ed04 	.word	0xe000ed04

08005548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800554e:	4b05      	ldr	r3, [pc, #20]	; (8005564 <xTaskGetTickCount+0x1c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005554:	687b      	ldr	r3, [r7, #4]
}
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000cf4 	.word	0x20000cf4

08005568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005572:	4b4f      	ldr	r3, [pc, #316]	; (80056b0 <xTaskIncrementTick+0x148>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 808f 	bne.w	800569a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800557c:	4b4d      	ldr	r3, [pc, #308]	; (80056b4 <xTaskIncrementTick+0x14c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005584:	4a4b      	ldr	r2, [pc, #300]	; (80056b4 <xTaskIncrementTick+0x14c>)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d120      	bne.n	80055d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005590:	4b49      	ldr	r3, [pc, #292]	; (80056b8 <xTaskIncrementTick+0x150>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	603b      	str	r3, [r7, #0]
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <xTaskIncrementTick+0x46>
 80055b0:	4b41      	ldr	r3, [pc, #260]	; (80056b8 <xTaskIncrementTick+0x150>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	4b41      	ldr	r3, [pc, #260]	; (80056bc <xTaskIncrementTick+0x154>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3f      	ldr	r2, [pc, #252]	; (80056b8 <xTaskIncrementTick+0x150>)
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4a3f      	ldr	r2, [pc, #252]	; (80056bc <xTaskIncrementTick+0x154>)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	4b3e      	ldr	r3, [pc, #248]	; (80056c0 <xTaskIncrementTick+0x158>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	4a3d      	ldr	r2, [pc, #244]	; (80056c0 <xTaskIncrementTick+0x158>)
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	f000 fad1 	bl	8005b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055d2:	4b3c      	ldr	r3, [pc, #240]	; (80056c4 <xTaskIncrementTick+0x15c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d349      	bcc.n	8005670 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055dc:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <xTaskIncrementTick+0x150>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e6:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <xTaskIncrementTick+0x15c>)
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055ec:	601a      	str	r2, [r3, #0]
					break;
 80055ee:	e03f      	b.n	8005670 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f0:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <xTaskIncrementTick+0x150>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d203      	bcs.n	8005610 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005608:	4a2e      	ldr	r2, [pc, #184]	; (80056c4 <xTaskIncrementTick+0x15c>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800560e:	e02f      	b.n	8005670 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	3304      	adds	r3, #4
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe fbf9 	bl	8003e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3318      	adds	r3, #24
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe fbf0 	bl	8003e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	4b25      	ldr	r3, [pc, #148]	; (80056c8 <xTaskIncrementTick+0x160>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d903      	bls.n	8005640 <xTaskIncrementTick+0xd8>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	4a22      	ldr	r2, [pc, #136]	; (80056c8 <xTaskIncrementTick+0x160>)
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4a1f      	ldr	r2, [pc, #124]	; (80056cc <xTaskIncrementTick+0x164>)
 800564e:	441a      	add	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f7fe fb7b 	bl	8003d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <xTaskIncrementTick+0x168>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	429a      	cmp	r2, r3
 8005668:	d3b8      	bcc.n	80055dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800566a:	2301      	movs	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800566e:	e7b5      	b.n	80055dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005670:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <xTaskIncrementTick+0x168>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005676:	4915      	ldr	r1, [pc, #84]	; (80056cc <xTaskIncrementTick+0x164>)
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d901      	bls.n	800568c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005688:	2301      	movs	r3, #1
 800568a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <xTaskIncrementTick+0x16c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e004      	b.n	80056a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <xTaskIncrementTick+0x170>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3301      	adds	r3, #1
 80056a0:	4a0d      	ldr	r2, [pc, #52]	; (80056d8 <xTaskIncrementTick+0x170>)
 80056a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056a4:	697b      	ldr	r3, [r7, #20]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000d18 	.word	0x20000d18
 80056b4:	20000cf4 	.word	0x20000cf4
 80056b8:	20000ca8 	.word	0x20000ca8
 80056bc:	20000cac 	.word	0x20000cac
 80056c0:	20000d08 	.word	0x20000d08
 80056c4:	20000d10 	.word	0x20000d10
 80056c8:	20000cf8 	.word	0x20000cf8
 80056cc:	20000820 	.word	0x20000820
 80056d0:	2000081c 	.word	0x2000081c
 80056d4:	20000d04 	.word	0x20000d04
 80056d8:	20000d00 	.word	0x20000d00

080056dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056e2:	4b28      	ldr	r3, [pc, #160]	; (8005784 <vTaskSwitchContext+0xa8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056ea:	4b27      	ldr	r3, [pc, #156]	; (8005788 <vTaskSwitchContext+0xac>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056f0:	e041      	b.n	8005776 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80056f2:	4b25      	ldr	r3, [pc, #148]	; (8005788 <vTaskSwitchContext+0xac>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f8:	4b24      	ldr	r3, [pc, #144]	; (800578c <vTaskSwitchContext+0xb0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e010      	b.n	8005722 <vTaskSwitchContext+0x46>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <vTaskSwitchContext+0x40>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	607b      	str	r3, [r7, #4]
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <vTaskSwitchContext+0x3e>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3b01      	subs	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	491b      	ldr	r1, [pc, #108]	; (8005790 <vTaskSwitchContext+0xb4>)
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0e4      	beq.n	8005700 <vTaskSwitchContext+0x24>
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <vTaskSwitchContext+0xb4>)
 8005742:	4413      	add	r3, r2
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	605a      	str	r2, [r3, #4]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	3308      	adds	r3, #8
 8005758:	429a      	cmp	r2, r3
 800575a:	d104      	bne.n	8005766 <vTaskSwitchContext+0x8a>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a09      	ldr	r2, [pc, #36]	; (8005794 <vTaskSwitchContext+0xb8>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	4a06      	ldr	r2, [pc, #24]	; (800578c <vTaskSwitchContext+0xb0>)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6013      	str	r3, [r2, #0]
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000d18 	.word	0x20000d18
 8005788:	20000d04 	.word	0x20000d04
 800578c:	20000cf8 	.word	0x20000cf8
 8005790:	20000820 	.word	0x20000820
 8005794:	2000081c 	.word	0x2000081c

08005798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	60fb      	str	r3, [r7, #12]
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057be:	4b07      	ldr	r3, [pc, #28]	; (80057dc <vTaskPlaceOnEventList+0x44>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3318      	adds	r3, #24
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fe fae7 	bl	8003d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057cc:	2101      	movs	r1, #1
 80057ce:	6838      	ldr	r0, [r7, #0]
 80057d0:	f000 fb7a 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	2000081c 	.word	0x2000081c

080057e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	617b      	str	r3, [r7, #20]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <vTaskPlaceOnEventListRestricted+0x54>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3318      	adds	r3, #24
 800580e:	4619      	mov	r1, r3
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7fe fa9e 	bl	8003d52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800581c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005820:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	68b8      	ldr	r0, [r7, #8]
 8005826:	f000 fb4f 	bl	8005ec8 <prvAddCurrentTaskToDelayedList>
	}
 800582a:	bf00      	nop
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	2000081c 	.word	0x2000081c

08005838 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	60fb      	str	r3, [r7, #12]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	3318      	adds	r3, #24
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe facf 	bl	8003e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800586e:	4b1e      	ldr	r3, [pc, #120]	; (80058e8 <xTaskRemoveFromEventList+0xb0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d11d      	bne.n	80058b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3304      	adds	r3, #4
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fac6 	bl	8003e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005884:	4b19      	ldr	r3, [pc, #100]	; (80058ec <xTaskRemoveFromEventList+0xb4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d903      	bls.n	8005894 <xTaskRemoveFromEventList+0x5c>
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	4a16      	ldr	r2, [pc, #88]	; (80058ec <xTaskRemoveFromEventList+0xb4>)
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <xTaskRemoveFromEventList+0xb8>)
 80058a2:	441a      	add	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f7fe fa51 	bl	8003d52 <vListInsertEnd>
 80058b0:	e005      	b.n	80058be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	3318      	adds	r3, #24
 80058b6:	4619      	mov	r1, r3
 80058b8:	480e      	ldr	r0, [pc, #56]	; (80058f4 <xTaskRemoveFromEventList+0xbc>)
 80058ba:	f7fe fa4a 	bl	8003d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <xTaskRemoveFromEventList+0xc0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d905      	bls.n	80058d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <xTaskRemoveFromEventList+0xc4>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	e001      	b.n	80058dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058dc:	697b      	ldr	r3, [r7, #20]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000d18 	.word	0x20000d18
 80058ec:	20000cf8 	.word	0x20000cf8
 80058f0:	20000820 	.word	0x20000820
 80058f4:	20000cb0 	.word	0x20000cb0
 80058f8:	2000081c 	.word	0x2000081c
 80058fc:	20000d04 	.word	0x20000d04

08005900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <vTaskInternalSetTimeOutState+0x24>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <vTaskInternalSetTimeOutState+0x28>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	605a      	str	r2, [r3, #4]
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	20000d08 	.word	0x20000d08
 8005928:	20000cf4 	.word	0x20000cf4

0800592c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	613b      	str	r3, [r7, #16]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	60fb      	str	r3, [r7, #12]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800596e:	f000 ff79 	bl	8006864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <xTaskCheckForTimeOut+0xbc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800598a:	d102      	bne.n	8005992 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	e023      	b.n	80059da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <xTaskCheckForTimeOut+0xc0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d007      	beq.n	80059ae <xTaskCheckForTimeOut+0x82>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d302      	bcc.n	80059ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	e015      	b.n	80059da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d20b      	bcs.n	80059d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	1ad2      	subs	r2, r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff ff9b 	bl	8005900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	e004      	b.n	80059da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059da:	f000 ff73 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 80059de:	69fb      	ldr	r3, [r7, #28]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000cf4 	.word	0x20000cf4
 80059ec:	20000d08 	.word	0x20000d08

080059f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059f4:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <vTaskMissedYield+0x14>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
}
 80059fa:	bf00      	nop
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	20000d04 	.word	0x20000d04

08005a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a10:	f000 f852 	bl	8005ab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a14:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <prvIdleTask+0x28>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d9f9      	bls.n	8005a10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <prvIdleTask+0x2c>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a2c:	e7f0      	b.n	8005a10 <prvIdleTask+0x8>
 8005a2e:	bf00      	nop
 8005a30:	20000820 	.word	0x20000820
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a3e:	2300      	movs	r3, #0
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	e00c      	b.n	8005a5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4a12      	ldr	r2, [pc, #72]	; (8005a98 <prvInitialiseTaskLists+0x60>)
 8005a50:	4413      	add	r3, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe f950 	bl	8003cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b37      	cmp	r3, #55	; 0x37
 8005a62:	d9ef      	bls.n	8005a44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a64:	480d      	ldr	r0, [pc, #52]	; (8005a9c <prvInitialiseTaskLists+0x64>)
 8005a66:	f7fe f947 	bl	8003cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a6a:	480d      	ldr	r0, [pc, #52]	; (8005aa0 <prvInitialiseTaskLists+0x68>)
 8005a6c:	f7fe f944 	bl	8003cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a70:	480c      	ldr	r0, [pc, #48]	; (8005aa4 <prvInitialiseTaskLists+0x6c>)
 8005a72:	f7fe f941 	bl	8003cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a76:	480c      	ldr	r0, [pc, #48]	; (8005aa8 <prvInitialiseTaskLists+0x70>)
 8005a78:	f7fe f93e 	bl	8003cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a7c:	480b      	ldr	r0, [pc, #44]	; (8005aac <prvInitialiseTaskLists+0x74>)
 8005a7e:	f7fe f93b 	bl	8003cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <prvInitialiseTaskLists+0x78>)
 8005a84:	4a05      	ldr	r2, [pc, #20]	; (8005a9c <prvInitialiseTaskLists+0x64>)
 8005a86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <prvInitialiseTaskLists+0x7c>)
 8005a8a:	4a05      	ldr	r2, [pc, #20]	; (8005aa0 <prvInitialiseTaskLists+0x68>)
 8005a8c:	601a      	str	r2, [r3, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000820 	.word	0x20000820
 8005a9c:	20000c80 	.word	0x20000c80
 8005aa0:	20000c94 	.word	0x20000c94
 8005aa4:	20000cb0 	.word	0x20000cb0
 8005aa8:	20000cc4 	.word	0x20000cc4
 8005aac:	20000cdc 	.word	0x20000cdc
 8005ab0:	20000ca8 	.word	0x20000ca8
 8005ab4:	20000cac 	.word	0x20000cac

08005ab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005abe:	e019      	b.n	8005af4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ac0:	f000 fed0 	bl	8006864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac4:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <prvCheckTasksWaitingTermination+0x50>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe f99b 	bl	8003e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <prvCheckTasksWaitingTermination+0x54>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	4a0b      	ldr	r2, [pc, #44]	; (8005b0c <prvCheckTasksWaitingTermination+0x54>)
 8005ade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <prvCheckTasksWaitingTermination+0x58>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <prvCheckTasksWaitingTermination+0x58>)
 8005ae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005aea:	f000 feeb 	bl	80068c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f810 	bl	8005b14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <prvCheckTasksWaitingTermination+0x58>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e1      	bne.n	8005ac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000cc4 	.word	0x20000cc4
 8005b0c:	20000cf0 	.word	0x20000cf0
 8005b10:	20000cd8 	.word	0x20000cd8

08005b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d108      	bne.n	8005b38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 f888 	bl	8006c40 <vPortFree>
				vPortFree( pxTCB );
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f001 f885 	bl	8006c40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b36:	e018      	b.n	8005b6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d103      	bne.n	8005b4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 f87c 	bl	8006c40 <vPortFree>
	}
 8005b48:	e00f      	b.n	8005b6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d00a      	beq.n	8005b6a <prvDeleteTCB+0x56>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	60fb      	str	r3, [r7, #12]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <prvDeleteTCB+0x54>
	}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <prvResetNextTaskUnblockTime+0x38>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b8c:	e008      	b.n	8005ba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b8e:	4b07      	ldr	r3, [pc, #28]	; (8005bac <prvResetNextTaskUnblockTime+0x38>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4a04      	ldr	r2, [pc, #16]	; (8005bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005b9e:	6013      	str	r3, [r2, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	20000ca8 	.word	0x20000ca8
 8005bb0:	20000d10 	.word	0x20000d10

08005bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <xTaskGetSchedulerState+0x34>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	e008      	b.n	8005bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc8:	4b08      	ldr	r3, [pc, #32]	; (8005bec <xTaskGetSchedulerState+0x38>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	607b      	str	r3, [r7, #4]
 8005bd4:	e001      	b.n	8005bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bda:	687b      	ldr	r3, [r7, #4]
	}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	20000cfc 	.word	0x20000cfc
 8005bec:	20000d18 	.word	0x20000d18

08005bf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d051      	beq.n	8005caa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0a:	4b2a      	ldr	r3, [pc, #168]	; (8005cb4 <xTaskPriorityInherit+0xc4>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d241      	bcs.n	8005c98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	db06      	blt.n	8005c2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1c:	4b25      	ldr	r3, [pc, #148]	; (8005cb4 <xTaskPriorityInherit+0xc4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6959      	ldr	r1, [r3, #20]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4a1f      	ldr	r2, [pc, #124]	; (8005cb8 <xTaskPriorityInherit+0xc8>)
 8005c3c:	4413      	add	r3, r2
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d122      	bne.n	8005c88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	3304      	adds	r3, #4
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe f8e0 	bl	8003e0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c4c:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <xTaskPriorityInherit+0xc4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <xTaskPriorityInherit+0xcc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d903      	bls.n	8005c6a <xTaskPriorityInherit+0x7a>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	4a15      	ldr	r2, [pc, #84]	; (8005cbc <xTaskPriorityInherit+0xcc>)
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4a10      	ldr	r2, [pc, #64]	; (8005cb8 <xTaskPriorityInherit+0xc8>)
 8005c78:	441a      	add	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f7fe f866 	bl	8003d52 <vListInsertEnd>
 8005c86:	e004      	b.n	8005c92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <xTaskPriorityInherit+0xc4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c92:	2301      	movs	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e008      	b.n	8005caa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <xTaskPriorityInherit+0xc4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d201      	bcs.n	8005caa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005caa:	68fb      	ldr	r3, [r7, #12]
	}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	2000081c 	.word	0x2000081c
 8005cb8:	20000820 	.word	0x20000820
 8005cbc:	20000cf8 	.word	0x20000cf8

08005cc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d056      	beq.n	8005d84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cd6:	4b2e      	ldr	r3, [pc, #184]	; (8005d90 <xTaskPriorityDisinherit+0xd0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d00a      	beq.n	8005cf6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	60fb      	str	r3, [r7, #12]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60bb      	str	r3, [r7, #8]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d02c      	beq.n	8005d84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d128      	bne.n	8005d84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe f868 	bl	8003e0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <xTaskPriorityDisinherit+0xd4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d903      	bls.n	8005d64 <xTaskPriorityDisinherit+0xa4>
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <xTaskPriorityDisinherit+0xd4>)
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4a09      	ldr	r2, [pc, #36]	; (8005d98 <xTaskPriorityDisinherit+0xd8>)
 8005d72:	441a      	add	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7fd ffe9 	bl	8003d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d84:	697b      	ldr	r3, [r7, #20]
	}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	2000081c 	.word	0x2000081c
 8005d94:	20000cf8 	.word	0x20000cf8
 8005d98:	20000820 	.word	0x20000820

08005d9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d06a      	beq.n	8005e8a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d902      	bls.n	8005de2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e002      	b.n	8005de8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d04b      	beq.n	8005e8a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d146      	bne.n	8005e8a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d10a      	bne.n	8005e1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60bb      	str	r3, [r7, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	db04      	blt.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	6959      	ldr	r1, [r3, #20]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005e4a:	4413      	add	r3, r2
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d11c      	bne.n	8005e8a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fd ffd9 	bl	8003e0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d903      	bls.n	8005e6e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	4a0c      	ldr	r2, [pc, #48]	; (8005e9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005e7c:	441a      	add	r2, r3
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4619      	mov	r1, r3
 8005e84:	4610      	mov	r0, r2
 8005e86:	f7fd ff64 	bl	8003d52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e8a:	bf00      	nop
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	2000081c 	.word	0x2000081c
 8005e98:	20000820 	.word	0x20000820
 8005e9c:	20000cf8 	.word	0x20000cf8

08005ea0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eb2:	3201      	adds	r2, #1
 8005eb4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005eb6:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
	}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	2000081c 	.word	0x2000081c

08005ec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ed2:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed8:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3304      	adds	r3, #4
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fd ff94 	bl	8003e0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eea:	d10a      	bne.n	8005f02 <prvAddCurrentTaskToDelayedList+0x3a>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef2:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4819      	ldr	r0, [pc, #100]	; (8005f60 <prvAddCurrentTaskToDelayedList+0x98>)
 8005efc:	f7fd ff29 	bl	8003d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f00:	e026      	b.n	8005f50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4413      	add	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d209      	bcs.n	8005f2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f7fd ff37 	bl	8003d9a <vListInsert>
}
 8005f2c:	e010      	b.n	8005f50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f2e:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fd ff2d 	bl	8003d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f40:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d202      	bcs.n	8005f50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6013      	str	r3, [r2, #0]
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000cf4 	.word	0x20000cf4
 8005f5c:	2000081c 	.word	0x2000081c
 8005f60:	20000cdc 	.word	0x20000cdc
 8005f64:	20000cac 	.word	0x20000cac
 8005f68:	20000ca8 	.word	0x20000ca8
 8005f6c:	20000d10 	.word	0x20000d10

08005f70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f7a:	f000 fb07 	bl	800658c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f7e:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <xTimerCreateTimerTask+0x80>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d021      	beq.n	8005fca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f8e:	1d3a      	adds	r2, r7, #4
 8005f90:	f107 0108 	add.w	r1, r7, #8
 8005f94:	f107 030c 	add.w	r3, r7, #12
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fd fe93 	bl	8003cc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	9202      	str	r2, [sp, #8]
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	2302      	movs	r3, #2
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2300      	movs	r3, #0
 8005fae:	460a      	mov	r2, r1
 8005fb0:	4910      	ldr	r1, [pc, #64]	; (8005ff4 <xTimerCreateTimerTask+0x84>)
 8005fb2:	4811      	ldr	r0, [pc, #68]	; (8005ff8 <xTimerCreateTimerTask+0x88>)
 8005fb4:	f7fe ff62 	bl	8004e7c <xTaskCreateStatic>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <xTimerCreateTimerTask+0x8c>)
 8005fbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fbe:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <xTimerCreateTimerTask+0x8c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	613b      	str	r3, [r7, #16]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fe6:	697b      	ldr	r3, [r7, #20]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000d4c 	.word	0x20000d4c
 8005ff4:	08006f5c 	.word	0x08006f5c
 8005ff8:	08006135 	.word	0x08006135
 8005ffc:	20000d50 	.word	0x20000d50

08006000 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	623b      	str	r3, [r7, #32]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800602e:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <xTimerGenericCommand+0x98>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d02a      	beq.n	800608c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b05      	cmp	r3, #5
 8006046:	dc18      	bgt.n	800607a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006048:	f7ff fdb4 	bl	8005bb4 <xTaskGetSchedulerState>
 800604c:	4603      	mov	r3, r0
 800604e:	2b02      	cmp	r3, #2
 8006050:	d109      	bne.n	8006066 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <xTimerGenericCommand+0x98>)
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	f107 0110 	add.w	r1, r7, #16
 800605a:	2300      	movs	r3, #0
 800605c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605e:	f7fe f8a7 	bl	80041b0 <xQueueGenericSend>
 8006062:	6278      	str	r0, [r7, #36]	; 0x24
 8006064:	e012      	b.n	800608c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <xTimerGenericCommand+0x98>)
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	f107 0110 	add.w	r1, r7, #16
 800606e:	2300      	movs	r3, #0
 8006070:	2200      	movs	r2, #0
 8006072:	f7fe f89d 	bl	80041b0 <xQueueGenericSend>
 8006076:	6278      	str	r0, [r7, #36]	; 0x24
 8006078:	e008      	b.n	800608c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <xTimerGenericCommand+0x98>)
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	f107 0110 	add.w	r1, r7, #16
 8006082:	2300      	movs	r3, #0
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	f7fe f991 	bl	80043ac <xQueueGenericSendFromISR>
 800608a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800608e:	4618      	mov	r0, r3
 8006090:	3728      	adds	r7, #40	; 0x28
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000d4c 	.word	0x20000d4c

0800609c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a6:	4b22      	ldr	r3, [pc, #136]	; (8006130 <prvProcessExpiredTimer+0x94>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fd fea9 	bl	8003e0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d022      	beq.n	800610e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	18d1      	adds	r1, r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	6978      	ldr	r0, [r7, #20]
 80060d6:	f000 f8d1 	bl	800627c <prvInsertTimerInActiveList>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01f      	beq.n	8006120 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060e0:	2300      	movs	r3, #0
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2300      	movs	r3, #0
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	2100      	movs	r1, #0
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	f7ff ff88 	bl	8006000 <xTimerGenericCommand>
 80060f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d113      	bne.n	8006120 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	60fb      	str	r3, [r7, #12]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006114:	f023 0301 	bic.w	r3, r3, #1
 8006118:	b2da      	uxtb	r2, r3
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	6978      	ldr	r0, [r7, #20]
 8006126:	4798      	blx	r3
}
 8006128:	bf00      	nop
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000d44 	.word	0x20000d44

08006134 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800613c:	f107 0308 	add.w	r3, r7, #8
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f857 	bl	80061f4 <prvGetNextExpireTime>
 8006146:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4619      	mov	r1, r3
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f803 	bl	8006158 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006152:	f000 f8d5 	bl	8006300 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006156:	e7f1      	b.n	800613c <prvTimerTask+0x8>

08006158 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006162:	f7ff f945 	bl	80053f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006166:	f107 0308 	add.w	r3, r7, #8
 800616a:	4618      	mov	r0, r3
 800616c:	f000 f866 	bl	800623c <prvSampleTimeNow>
 8006170:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d130      	bne.n	80061da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <prvProcessTimerOrBlockTask+0x3c>
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	429a      	cmp	r2, r3
 8006184:	d806      	bhi.n	8006194 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006186:	f7ff f941 	bl	800540c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff ff85 	bl	800609c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006192:	e024      	b.n	80061de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <prvProcessTimerOrBlockTask+0x90>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <prvProcessTimerOrBlockTask+0x50>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <prvProcessTimerOrBlockTask+0x52>
 80061a8:	2300      	movs	r3, #0
 80061aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <prvProcessTimerOrBlockTask+0x94>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	4619      	mov	r1, r3
 80061ba:	f7fe fe2b 	bl	8004e14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061be:	f7ff f925 	bl	800540c <xTaskResumeAll>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <prvProcessTimerOrBlockTask+0x98>)
 80061ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	f3bf 8f6f 	isb	sy
}
 80061d8:	e001      	b.n	80061de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061da:	f7ff f917 	bl	800540c <xTaskResumeAll>
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000d48 	.word	0x20000d48
 80061ec:	20000d4c 	.word	0x20000d4c
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061fc:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <prvGetNextExpireTime+0x44>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <prvGetNextExpireTime+0x16>
 8006206:	2201      	movs	r2, #1
 8006208:	e000      	b.n	800620c <prvGetNextExpireTime+0x18>
 800620a:	2200      	movs	r2, #0
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006218:	4b07      	ldr	r3, [pc, #28]	; (8006238 <prvGetNextExpireTime+0x44>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e001      	b.n	8006228 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006228:	68fb      	ldr	r3, [r7, #12]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000d44 	.word	0x20000d44

0800623c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006244:	f7ff f980 	bl	8005548 <xTaskGetTickCount>
 8006248:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <prvSampleTimeNow+0x3c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	429a      	cmp	r2, r3
 8006252:	d205      	bcs.n	8006260 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006254:	f000 f936 	bl	80064c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e002      	b.n	8006266 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006266:	4a04      	ldr	r2, [pc, #16]	; (8006278 <prvSampleTimeNow+0x3c>)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000d54 	.word	0x20000d54

0800627c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d812      	bhi.n	80062c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d302      	bcc.n	80062b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062b0:	2301      	movs	r3, #1
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e01b      	b.n	80062ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062b6:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <prvInsertTimerInActiveList+0x7c>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f7fd fd6a 	bl	8003d9a <vListInsert>
 80062c6:	e012      	b.n	80062ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d206      	bcs.n	80062de <prvInsertTimerInActiveList+0x62>
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d302      	bcc.n	80062de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e007      	b.n	80062ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062de:	4b07      	ldr	r3, [pc, #28]	; (80062fc <prvInsertTimerInActiveList+0x80>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	4610      	mov	r0, r2
 80062ea:	f7fd fd56 	bl	8003d9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062ee:	697b      	ldr	r3, [r7, #20]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000d48 	.word	0x20000d48
 80062fc:	20000d44 	.word	0x20000d44

08006300 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08e      	sub	sp, #56	; 0x38
 8006304:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006306:	e0ca      	b.n	800649e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	da18      	bge.n	8006340 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	3304      	adds	r3, #4
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	61fb      	str	r3, [r7, #28]
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006336:	6850      	ldr	r0, [r2, #4]
 8006338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800633a:	6892      	ldr	r2, [r2, #8]
 800633c:	4611      	mov	r1, r2
 800633e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f2c0 80ab 	blt.w	800649e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	3304      	adds	r3, #4
 8006358:	4618      	mov	r0, r3
 800635a:	f7fd fd57 	bl	8003e0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800635e:	463b      	mov	r3, r7
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff ff6b 	bl	800623c <prvSampleTimeNow>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b09      	cmp	r3, #9
 800636c:	f200 8096 	bhi.w	800649c <prvProcessReceivedCommands+0x19c>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <prvProcessReceivedCommands+0x78>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	080063a1 	.word	0x080063a1
 800637c:	080063a1 	.word	0x080063a1
 8006380:	080063a1 	.word	0x080063a1
 8006384:	08006415 	.word	0x08006415
 8006388:	08006429 	.word	0x08006429
 800638c:	08006473 	.word	0x08006473
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063a1 	.word	0x080063a1
 8006398:	08006415 	.word	0x08006415
 800639c:	08006429 	.word	0x08006429
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	18d1      	adds	r1, r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c0:	f7ff ff5c 	bl	800627c <prvInsertTimerInActiveList>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d069      	beq.n	800649e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05e      	beq.n	800649e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	441a      	add	r2, r3
 80063e8:	2300      	movs	r3, #0
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	2300      	movs	r3, #0
 80063ee:	2100      	movs	r1, #0
 80063f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f2:	f7ff fe05 	bl	8006000 <xTimerGenericCommand>
 80063f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d14f      	bne.n	800649e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	61bb      	str	r3, [r7, #24]
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800641a:	f023 0301 	bic.w	r3, r3, #1
 800641e:	b2da      	uxtb	r2, r3
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006426:	e03a      	b.n	800649e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	b2da      	uxtb	r2, r3
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	617b      	str	r3, [r7, #20]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	18d1      	adds	r1, r2, r3
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800646c:	f7ff ff06 	bl	800627c <prvInsertTimerInActiveList>
					break;
 8006470:	e015      	b.n	800649e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006482:	f000 fbdd 	bl	8006c40 <vPortFree>
 8006486:	e00a      	b.n	800649e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800648e:	f023 0301 	bic.w	r3, r3, #1
 8006492:	b2da      	uxtb	r2, r3
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800649a:	e000      	b.n	800649e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800649c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <prvProcessReceivedCommands+0x1c0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	1d39      	adds	r1, r7, #4
 80064a4:	2200      	movs	r2, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe f8a8 	bl	80045fc <xQueueReceive>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f47f af2a 	bne.w	8006308 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	3730      	adds	r7, #48	; 0x30
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000d4c 	.word	0x20000d4c

080064c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064ca:	e048      	b.n	800655e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064cc:	4b2d      	ldr	r3, [pc, #180]	; (8006584 <prvSwitchTimerLists+0xc0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d6:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <prvSwitchTimerLists+0xc0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fd fc91 	bl	8003e0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d02e      	beq.n	800655e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4413      	add	r3, r2
 8006508:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	429a      	cmp	r2, r3
 8006510:	d90e      	bls.n	8006530 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800651e:	4b19      	ldr	r3, [pc, #100]	; (8006584 <prvSwitchTimerLists+0xc0>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f7fd fc36 	bl	8003d9a <vListInsert>
 800652e:	e016      	b.n	800655e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006530:	2300      	movs	r3, #0
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	2100      	movs	r1, #0
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff fd60 	bl	8006000 <xTimerGenericCommand>
 8006540:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	603b      	str	r3, [r7, #0]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <prvSwitchTimerLists+0xc0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1b1      	bne.n	80064cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <prvSwitchTimerLists+0xc0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <prvSwitchTimerLists+0xc4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a04      	ldr	r2, [pc, #16]	; (8006584 <prvSwitchTimerLists+0xc0>)
 8006574:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006576:	4a04      	ldr	r2, [pc, #16]	; (8006588 <prvSwitchTimerLists+0xc4>)
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6013      	str	r3, [r2, #0]
}
 800657c:	bf00      	nop
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000d44 	.word	0x20000d44
 8006588:	20000d48 	.word	0x20000d48

0800658c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006592:	f000 f967 	bl	8006864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <prvCheckForValidListAndQueue+0x60>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d120      	bne.n	80065e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800659e:	4814      	ldr	r0, [pc, #80]	; (80065f0 <prvCheckForValidListAndQueue+0x64>)
 80065a0:	f7fd fbaa 	bl	8003cf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065a4:	4813      	ldr	r0, [pc, #76]	; (80065f4 <prvCheckForValidListAndQueue+0x68>)
 80065a6:	f7fd fba7 	bl	8003cf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <prvCheckForValidListAndQueue+0x6c>)
 80065ac:	4a10      	ldr	r2, [pc, #64]	; (80065f0 <prvCheckForValidListAndQueue+0x64>)
 80065ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065b0:	4b12      	ldr	r3, [pc, #72]	; (80065fc <prvCheckForValidListAndQueue+0x70>)
 80065b2:	4a10      	ldr	r2, [pc, #64]	; (80065f4 <prvCheckForValidListAndQueue+0x68>)
 80065b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065b6:	2300      	movs	r3, #0
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4b11      	ldr	r3, [pc, #68]	; (8006600 <prvCheckForValidListAndQueue+0x74>)
 80065bc:	4a11      	ldr	r2, [pc, #68]	; (8006604 <prvCheckForValidListAndQueue+0x78>)
 80065be:	2110      	movs	r1, #16
 80065c0:	200a      	movs	r0, #10
 80065c2:	f7fd fcb5 	bl	8003f30 <xQueueGenericCreateStatic>
 80065c6:	4603      	mov	r3, r0
 80065c8:	4a08      	ldr	r2, [pc, #32]	; (80065ec <prvCheckForValidListAndQueue+0x60>)
 80065ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065cc:	4b07      	ldr	r3, [pc, #28]	; (80065ec <prvCheckForValidListAndQueue+0x60>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <prvCheckForValidListAndQueue+0x60>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	490b      	ldr	r1, [pc, #44]	; (8006608 <prvCheckForValidListAndQueue+0x7c>)
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fbc6 	bl	8004d6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065e0:	f000 f970 	bl	80068c4 <vPortExitCritical>
}
 80065e4:	bf00      	nop
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000d4c 	.word	0x20000d4c
 80065f0:	20000d1c 	.word	0x20000d1c
 80065f4:	20000d30 	.word	0x20000d30
 80065f8:	20000d44 	.word	0x20000d44
 80065fc:	20000d48 	.word	0x20000d48
 8006600:	20000df8 	.word	0x20000df8
 8006604:	20000d58 	.word	0x20000d58
 8006608:	08006f64 	.word	0x08006f64

0800660c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3b04      	subs	r3, #4
 800661c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3b04      	subs	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f023 0201 	bic.w	r2, r3, #1
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b04      	subs	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800663c:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <pxPortInitialiseStack+0x64>)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3b14      	subs	r3, #20
 8006646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3b04      	subs	r3, #4
 8006652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f06f 0202 	mvn.w	r2, #2
 800665a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3b20      	subs	r3, #32
 8006660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	08006675 	.word	0x08006675

08006674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <prvTaskExitError+0x54>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006686:	d00a      	beq.n	800669e <prvTaskExitError+0x2a>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	60fb      	str	r3, [r7, #12]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <prvTaskExitError+0x28>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	60bb      	str	r3, [r7, #8]
}
 80066b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066b2:	bf00      	nop
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0fc      	beq.n	80066b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	2000000c 	.word	0x2000000c
 80066cc:	00000000 	.word	0x00000000

080066d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <pxCurrentTCBConst2>)
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	6808      	ldr	r0, [r1, #0]
 80066d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	f380 8809 	msr	PSP, r0
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8811 	msr	BASEPRI, r0
 80066ea:	4770      	bx	lr
 80066ec:	f3af 8000 	nop.w

080066f0 <pxCurrentTCBConst2>:
 80066f0:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066f8:	4808      	ldr	r0, [pc, #32]	; (800671c <prvPortStartFirstTask+0x24>)
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	6800      	ldr	r0, [r0, #0]
 80066fe:	f380 8808 	msr	MSP, r0
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8814 	msr	CONTROL, r0
 800670a:	b662      	cpsie	i
 800670c:	b661      	cpsie	f
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	df00      	svc	0
 8006718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800671a:	bf00      	nop
 800671c:	e000ed08 	.word	0xe000ed08

08006720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006726:	4b46      	ldr	r3, [pc, #280]	; (8006840 <xPortStartScheduler+0x120>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a46      	ldr	r2, [pc, #280]	; (8006844 <xPortStartScheduler+0x124>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d10a      	bne.n	8006746 <xPortStartScheduler+0x26>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	613b      	str	r3, [r7, #16]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006746:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <xPortStartScheduler+0x120>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3f      	ldr	r2, [pc, #252]	; (8006848 <xPortStartScheduler+0x128>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10a      	bne.n	8006766 <xPortStartScheduler+0x46>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60fb      	str	r3, [r7, #12]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006766:	4b39      	ldr	r3, [pc, #228]	; (800684c <xPortStartScheduler+0x12c>)
 8006768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006788:	b2da      	uxtb	r2, r3
 800678a:	4b31      	ldr	r3, [pc, #196]	; (8006850 <xPortStartScheduler+0x130>)
 800678c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <xPortStartScheduler+0x134>)
 8006790:	2207      	movs	r2, #7
 8006792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006794:	e009      	b.n	80067aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006796:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <xPortStartScheduler+0x134>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3b01      	subs	r3, #1
 800679c:	4a2d      	ldr	r2, [pc, #180]	; (8006854 <xPortStartScheduler+0x134>)
 800679e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d0ef      	beq.n	8006796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067b6:	4b27      	ldr	r3, [pc, #156]	; (8006854 <xPortStartScheduler+0x134>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1c3 0307 	rsb	r3, r3, #7
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d00a      	beq.n	80067d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	60bb      	str	r3, [r7, #8]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067d8:	4b1e      	ldr	r3, [pc, #120]	; (8006854 <xPortStartScheduler+0x134>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	4a1d      	ldr	r2, [pc, #116]	; (8006854 <xPortStartScheduler+0x134>)
 80067e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067e2:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <xPortStartScheduler+0x134>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067ea:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <xPortStartScheduler+0x134>)
 80067ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067f6:	4b18      	ldr	r3, [pc, #96]	; (8006858 <xPortStartScheduler+0x138>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a17      	ldr	r2, [pc, #92]	; (8006858 <xPortStartScheduler+0x138>)
 80067fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <xPortStartScheduler+0x138>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a14      	ldr	r2, [pc, #80]	; (8006858 <xPortStartScheduler+0x138>)
 8006808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800680c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800680e:	f000 f8dd 	bl	80069cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <xPortStartScheduler+0x13c>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006818:	f000 f8fc 	bl	8006a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800681c:	4b10      	ldr	r3, [pc, #64]	; (8006860 <xPortStartScheduler+0x140>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a0f      	ldr	r2, [pc, #60]	; (8006860 <xPortStartScheduler+0x140>)
 8006822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006828:	f7ff ff66 	bl	80066f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800682c:	f7fe ff56 	bl	80056dc <vTaskSwitchContext>
	prvTaskExitError();
 8006830:	f7ff ff20 	bl	8006674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	e000ed00 	.word	0xe000ed00
 8006844:	410fc271 	.word	0x410fc271
 8006848:	410fc270 	.word	0x410fc270
 800684c:	e000e400 	.word	0xe000e400
 8006850:	20000e48 	.word	0x20000e48
 8006854:	20000e4c 	.word	0x20000e4c
 8006858:	e000ed20 	.word	0xe000ed20
 800685c:	2000000c 	.word	0x2000000c
 8006860:	e000ef34 	.word	0xe000ef34

08006864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	607b      	str	r3, [r7, #4]
}
 800687c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800687e:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <vPortEnterCritical+0x58>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a0d      	ldr	r2, [pc, #52]	; (80068bc <vPortEnterCritical+0x58>)
 8006886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006888:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <vPortEnterCritical+0x58>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10f      	bne.n	80068b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <vPortEnterCritical+0x5c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	603b      	str	r3, [r7, #0]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <vPortEnterCritical+0x4a>
	}
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	2000000c 	.word	0x2000000c
 80068c0:	e000ed04 	.word	0xe000ed04

080068c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <vPortExitCritical+0x50>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10a      	bne.n	80068e8 <vPortExitCritical+0x24>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	607b      	str	r3, [r7, #4]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <vPortExitCritical+0x50>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4a09      	ldr	r2, [pc, #36]	; (8006914 <vPortExitCritical+0x50>)
 80068f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <vPortExitCritical+0x50>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <vPortExitCritical+0x42>
 80068fa:	2300      	movs	r3, #0
 80068fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	f383 8811 	msr	BASEPRI, r3
}
 8006904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	2000000c 	.word	0x2000000c
	...

08006920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006920:	f3ef 8009 	mrs	r0, PSP
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4b15      	ldr	r3, [pc, #84]	; (8006980 <pxCurrentTCBConst>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	f01e 0f10 	tst.w	lr, #16
 8006930:	bf08      	it	eq
 8006932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	6010      	str	r0, [r2, #0]
 800693c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006944:	f380 8811 	msr	BASEPRI, r0
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f7fe fec4 	bl	80056dc <vTaskSwitchContext>
 8006954:	f04f 0000 	mov.w	r0, #0
 8006958:	f380 8811 	msr	BASEPRI, r0
 800695c:	bc09      	pop	{r0, r3}
 800695e:	6819      	ldr	r1, [r3, #0]
 8006960:	6808      	ldr	r0, [r1, #0]
 8006962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006966:	f01e 0f10 	tst.w	lr, #16
 800696a:	bf08      	it	eq
 800696c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006970:	f380 8809 	msr	PSP, r0
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w

08006980 <pxCurrentTCBConst>:
 8006980:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop

08006988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
}
 80069a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069a2:	f7fe fde1 	bl	8005568 <xTaskIncrementTick>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <xPortSysTickHandler+0x40>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f383 8811 	msr	BASEPRI, r3
}
 80069be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <vPortSetupTimerInterrupt+0x38>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <vPortSetupTimerInterrupt+0x3c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a0a      	ldr	r2, [pc, #40]	; (8006a0c <vPortSetupTimerInterrupt+0x40>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	099b      	lsrs	r3, r3, #6
 80069e8:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <vPortSetupTimerInterrupt+0x44>)
 80069ea:	3b01      	subs	r3, #1
 80069ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ee:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069f0:	2207      	movs	r2, #7
 80069f2:	601a      	str	r2, [r3, #0]
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	e000e010 	.word	0xe000e010
 8006a04:	e000e018 	.word	0xe000e018
 8006a08:	20000000 	.word	0x20000000
 8006a0c:	10624dd3 	.word	0x10624dd3
 8006a10:	e000e014 	.word	0xe000e014

08006a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a24 <vPortEnableVFP+0x10>
 8006a18:	6801      	ldr	r1, [r0, #0]
 8006a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a1e:	6001      	str	r1, [r0, #0]
 8006a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a22:	bf00      	nop
 8006a24:	e000ed88 	.word	0xe000ed88

08006a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a2e:	f3ef 8305 	mrs	r3, IPSR
 8006a32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b0f      	cmp	r3, #15
 8006a38:	d914      	bls.n	8006a64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <vPortValidateInterruptPriority+0x70>)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a44:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <vPortValidateInterruptPriority+0x74>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	7afa      	ldrb	r2, [r7, #11]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d20a      	bcs.n	8006a64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a64:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <vPortValidateInterruptPriority+0x78>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a6c:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <vPortValidateInterruptPriority+0x7c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d90a      	bls.n	8006a8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	603b      	str	r3, [r7, #0]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <vPortValidateInterruptPriority+0x60>
	}
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	e000e3f0 	.word	0xe000e3f0
 8006a9c:	20000e48 	.word	0x20000e48
 8006aa0:	e000ed0c 	.word	0xe000ed0c
 8006aa4:	20000e4c 	.word	0x20000e4c

08006aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	; 0x28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ab4:	f7fe fc9c 	bl	80053f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ab8:	4b5b      	ldr	r3, [pc, #364]	; (8006c28 <pvPortMalloc+0x180>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ac0:	f000 f920 	bl	8006d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ac4:	4b59      	ldr	r3, [pc, #356]	; (8006c2c <pvPortMalloc+0x184>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 8093 	bne.w	8006bf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01d      	beq.n	8006b14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ad8:	2208      	movs	r2, #8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4413      	add	r3, r2
 8006ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d014      	beq.n	8006b14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f023 0307 	bic.w	r3, r3, #7
 8006af0:	3308      	adds	r3, #8
 8006af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <pvPortMalloc+0x6c>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	617b      	str	r3, [r7, #20]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d06e      	beq.n	8006bf8 <pvPortMalloc+0x150>
 8006b1a:	4b45      	ldr	r3, [pc, #276]	; (8006c30 <pvPortMalloc+0x188>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d869      	bhi.n	8006bf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b24:	4b43      	ldr	r3, [pc, #268]	; (8006c34 <pvPortMalloc+0x18c>)
 8006b26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b28:	4b42      	ldr	r3, [pc, #264]	; (8006c34 <pvPortMalloc+0x18c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b2e:	e004      	b.n	8006b3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d903      	bls.n	8006b4c <pvPortMalloc+0xa4>
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f1      	bne.n	8006b30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b4c:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <pvPortMalloc+0x180>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d050      	beq.n	8006bf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	4413      	add	r3, r2
 8006b5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	2308      	movs	r3, #8
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d91f      	bls.n	8006bb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <pvPortMalloc+0xf8>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	613b      	str	r3, [r7, #16]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bb2:	69b8      	ldr	r0, [r7, #24]
 8006bb4:	f000 f908 	bl	8006dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bb8:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <pvPortMalloc+0x188>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	4a1b      	ldr	r2, [pc, #108]	; (8006c30 <pvPortMalloc+0x188>)
 8006bc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bc6:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <pvPortMalloc+0x188>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <pvPortMalloc+0x190>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d203      	bcs.n	8006bda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bd2:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <pvPortMalloc+0x188>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <pvPortMalloc+0x190>)
 8006bd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <pvPortMalloc+0x184>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <pvPortMalloc+0x194>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4a11      	ldr	r2, [pc, #68]	; (8006c3c <pvPortMalloc+0x194>)
 8006bf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bf8:	f7fe fc08 	bl	800540c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <pvPortMalloc+0x174>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	60fb      	str	r3, [r7, #12]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <pvPortMalloc+0x172>
	return pvReturn;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3728      	adds	r7, #40	; 0x28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20001df8 	.word	0x20001df8
 8006c2c:	20001e0c 	.word	0x20001e0c
 8006c30:	20001dfc 	.word	0x20001dfc
 8006c34:	20001df0 	.word	0x20001df0
 8006c38:	20001e00 	.word	0x20001e00
 8006c3c:	20001e04 	.word	0x20001e04

08006c40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d04d      	beq.n	8006cee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c52:	2308      	movs	r3, #8
 8006c54:	425b      	negs	r3, r3
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <vPortFree+0xb8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <vPortFree+0x44>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	60fb      	str	r3, [r7, #12]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <vPortFree+0x62>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	60bb      	str	r3, [r7, #8]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <vPortFree+0xb8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01e      	beq.n	8006cee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11a      	bne.n	8006cee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <vPortFree+0xb8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cc8:	f7fe fb92 	bl	80053f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <vPortFree+0xbc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <vPortFree+0xbc>)
 8006cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cda:	6938      	ldr	r0, [r7, #16]
 8006cdc:	f000 f874 	bl	8006dc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <vPortFree+0xc0>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a06      	ldr	r2, [pc, #24]	; (8006d00 <vPortFree+0xc0>)
 8006ce8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cea:	f7fe fb8f 	bl	800540c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20001e0c 	.word	0x20001e0c
 8006cfc:	20001dfc 	.word	0x20001dfc
 8006d00:	20001e08 	.word	0x20001e08

08006d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d0a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d10:	4b27      	ldr	r3, [pc, #156]	; (8006db0 <prvHeapInit+0xac>)
 8006d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00c      	beq.n	8006d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3307      	adds	r3, #7
 8006d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0307 	bic.w	r3, r3, #7
 8006d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	4a1f      	ldr	r2, [pc, #124]	; (8006db0 <prvHeapInit+0xac>)
 8006d34:	4413      	add	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d3c:	4a1d      	ldr	r2, [pc, #116]	; (8006db4 <prvHeapInit+0xb0>)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d42:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <prvHeapInit+0xb0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d50:	2208      	movs	r2, #8
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0307 	bic.w	r3, r3, #7
 8006d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a15      	ldr	r2, [pc, #84]	; (8006db8 <prvHeapInit+0xb4>)
 8006d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <prvHeapInit+0xb4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d6e:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <prvHeapInit+0xb4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d84:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <prvHeapInit+0xb4>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a0a      	ldr	r2, [pc, #40]	; (8006dbc <prvHeapInit+0xb8>)
 8006d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4a09      	ldr	r2, [pc, #36]	; (8006dc0 <prvHeapInit+0xbc>)
 8006d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d9c:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <prvHeapInit+0xc0>)
 8006d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	20000e50 	.word	0x20000e50
 8006db4:	20001df0 	.word	0x20001df0
 8006db8:	20001df8 	.word	0x20001df8
 8006dbc:	20001e00 	.word	0x20001e00
 8006dc0:	20001dfc 	.word	0x20001dfc
 8006dc4:	20001e0c 	.word	0x20001e0c

08006dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dd0:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <prvInsertBlockIntoFreeList+0xac>)
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e002      	b.n	8006ddc <prvInsertBlockIntoFreeList+0x14>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d8f7      	bhi.n	8006dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	4413      	add	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d108      	bne.n	8006e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	441a      	add	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	441a      	add	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d118      	bne.n	8006e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <prvInsertBlockIntoFreeList+0xb0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d00d      	beq.n	8006e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	441a      	add	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e008      	b.n	8006e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <prvInsertBlockIntoFreeList+0xb0>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e003      	b.n	8006e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d002      	beq.n	8006e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20001df0 	.word	0x20001df0
 8006e78:	20001df8 	.word	0x20001df8

08006e7c <memset>:
 8006e7c:	4402      	add	r2, r0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d100      	bne.n	8006e86 <memset+0xa>
 8006e84:	4770      	bx	lr
 8006e86:	f803 1b01 	strb.w	r1, [r3], #1
 8006e8a:	e7f9      	b.n	8006e80 <memset+0x4>

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ec4 <__libc_init_array+0x38>)
 8006e90:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e92:	1b64      	subs	r4, r4, r5
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	2600      	movs	r6, #0
 8006e98:	42a6      	cmp	r6, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	4d0b      	ldr	r5, [pc, #44]	; (8006ecc <__libc_init_array+0x40>)
 8006e9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea0:	f000 f826 	bl	8006ef0 <_init>
 8006ea4:	1b64      	subs	r4, r4, r5
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb4:	4798      	blx	r3
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebe:	4798      	blx	r3
 8006ec0:	3601      	adds	r6, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	08007080 	.word	0x08007080
 8006ec8:	08007080 	.word	0x08007080
 8006ecc:	08007080 	.word	0x08007080
 8006ed0:	08007084 	.word	0x08007084

08006ed4 <memcpy>:
 8006ed4:	440a      	add	r2, r1
 8006ed6:	4291      	cmp	r1, r2
 8006ed8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006edc:	d100      	bne.n	8006ee0 <memcpy+0xc>
 8006ede:	4770      	bx	lr
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eea:	4291      	cmp	r1, r2
 8006eec:	d1f9      	bne.n	8006ee2 <memcpy+0xe>
 8006eee:	bd10      	pop	{r4, pc}

08006ef0 <_init>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	bf00      	nop
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr

08006efc <_fini>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	bf00      	nop
 8006f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f02:	bc08      	pop	{r3}
 8006f04:	469e      	mov	lr, r3
 8006f06:	4770      	bx	lr


Pingpong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c4  080025c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025c4  080025c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025c4  080025c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c8  080025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080025d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080025d8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004dcc  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013d1  00000000  00000000  00024e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  00026220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000046e  00000000  00000000  00026848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024961  00000000  00000000  00026cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007729  00000000  00000000  0004b617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de46d  00000000  00000000  00052d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001694  00000000  00000000  001311b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00132844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800253c 	.word	0x0800253c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800253c 	.word	0x0800253c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <SystemClock_Config>:
  */

#include "clock.h"
#include "gpio.h"

void SystemClock_Config(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	; 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	; 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fe7e 	bl	80024e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fa:	f001 f855 	bl	80018a8 <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000804:	f000 f901 	bl	8000a0a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000810:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2310      	movs	r3, #16
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081a:	2302      	movs	r3, #2
 800081c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000822:	230a      	movs	r3, #10
 8000824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000826:	2307      	movs	r3, #7
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f88c 	bl	8001954 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000842:	f000 f8e2 	bl	8000a0a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2303      	movs	r3, #3
 800084c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	2104      	movs	r1, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fc54 	bl	800210c <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086a:	f000 f8ce 	bl	8000a0a <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3758      	adds	r7, #88	; 0x58
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b56      	ldr	r3, [pc, #344]	; (80009e8 <MX_GPIO_Init+0x170>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a55      	ldr	r2, [pc, #340]	; (80009e8 <MX_GPIO_Init+0x170>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b53      	ldr	r3, [pc, #332]	; (80009e8 <MX_GPIO_Init+0x170>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b50      	ldr	r3, [pc, #320]	; (80009e8 <MX_GPIO_Init+0x170>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a4f      	ldr	r2, [pc, #316]	; (80009e8 <MX_GPIO_Init+0x170>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b4d      	ldr	r3, [pc, #308]	; (80009e8 <MX_GPIO_Init+0x170>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b4a      	ldr	r3, [pc, #296]	; (80009e8 <MX_GPIO_Init+0x170>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a49      	ldr	r2, [pc, #292]	; (80009e8 <MX_GPIO_Init+0x170>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b47      	ldr	r3, [pc, #284]	; (80009e8 <MX_GPIO_Init+0x170>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <MX_GPIO_Init+0x170>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <MX_GPIO_Init+0x170>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <MX_GPIO_Init+0x170>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f000 ffb0 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED7_Pin|LED8_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2160      	movs	r1, #96	; 0x60
 8000900:	483a      	ldr	r0, [pc, #232]	; (80009ec <MX_GPIO_Init+0x174>)
 8000902:	f000 ffab 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f641 0106 	movw	r1, #6150	; 0x1806
 800090c:	4838      	ldr	r0, [pc, #224]	; (80009f0 <MX_GPIO_Init+0x178>)
 800090e:	f000 ffa5 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000918:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4830      	ldr	r0, [pc, #192]	; (80009ec <MX_GPIO_Init+0x174>)
 800092a:	f000 fdd5 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f000 fdc4 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED5_Pin|LED6_Pin;
 8000950:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 fdb4 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED7_Pin|LED8_Pin;
 8000970:	2360      	movs	r3, #96	; 0x60
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4819      	ldr	r0, [pc, #100]	; (80009ec <MX_GPIO_Init+0x174>)
 8000988:	f000 fda6 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 800098c:	f641 0306 	movw	r3, #6150	; 0x1806
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_GPIO_Init+0x178>)
 80009a6:	f000 fd97 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_button_Pin;
 80009aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_button_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_GPIO_Init+0x178>)
 80009c0:	f000 fd8a 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_button_Pin;
 80009c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_button_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0x174>)
 80009da:	f000 fd7d 	bl	80014d8 <HAL_GPIO_Init>

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000800 	.word	0x48000800
 80009f0:	48000400 	.word	0x48000400

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 fbe8 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f7ff feea 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f7ff ff3a 	bl	8000878 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
Test_program();
#else
Pingpong();
 8000a04:	f000 f808 	bl	8000a18 <Pingpong>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x14>

08000a0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0e:	b672      	cpsid	i
}
 8000a10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <Error_Handler+0x8>
 8000a14:	0000      	movs	r0, r0
	...

08000a18 <Pingpong>:
} states;

static states State, NextState;

void Pingpong(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
	bool ButtonPressed = false; // To remember that button is pressed
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73fb      	strb	r3, [r7, #15]
	bool LeftServe = true;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73bb      	strb	r3, [r7, #14]
	bool RightServe = true; // To remember which players' serve it is
 8000a26:	2301      	movs	r3, #1
 8000a28:	737b      	strb	r3, [r7, #13]

	uint32_t Varv, Speed; // Ball speed
	uint8_t Led; // LED nr
	uint8_t LeftScore, RightScore = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	707b      	strb	r3, [r7, #1]

	State= Start; // Initiate State to Start
 8000a2e:	4b9a      	ldr	r3, [pc, #616]	; (8000c98 <Pingpong+0x280>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
	NextState= Start;
 8000a34:	4b99      	ldr	r3, [pc, #612]	; (8000c9c <Pingpong+0x284>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]

	Speed= 500000; // Number of loops
 8000a3a:	4b99      	ldr	r3, [pc, #612]	; (8000ca0 <Pingpong+0x288>)
 8000a3c:	607b      	str	r3, [r7, #4]

	/* Infinite loop */
	while (1)
	{
		State = NextState;
 8000a3e:	4b97      	ldr	r3, [pc, #604]	; (8000c9c <Pingpong+0x284>)
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	4b95      	ldr	r3, [pc, #596]	; (8000c98 <Pingpong+0x280>)
 8000a44:	701a      	strb	r2, [r3, #0]
		switch (State) // State machine
 8000a46:	4b94      	ldr	r3, [pc, #592]	; (8000c98 <Pingpong+0x280>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	f200 811d 	bhi.w	8000c8a <Pingpong+0x272>
 8000a50:	a201      	add	r2, pc, #4	; (adr r2, 8000a58 <Pingpong+0x40>)
 8000a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a56:	bf00      	nop
 8000a58:	08000a69 	.word	0x08000a69
 8000a5c:	08000af1 	.word	0x08000af1
 8000a60:	08000bb1 	.word	0x08000bb1
 8000a64:	08000c71 	.word	0x08000c71
		{
			case Start:
				Led_on(0); // Turn off all LEDs
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f000 f91d 	bl	8000ca8 <Led_on>
				Speed = 500000;
 8000a6e:	4b8c      	ldr	r3, [pc, #560]	; (8000ca0 <Pingpong+0x288>)
 8000a70:	607b      	str	r3, [r7, #4]
				if (LeftScore == 4 || RightScore == 4)
 8000a72:	78bb      	ldrb	r3, [r7, #2]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d002      	beq.n	8000a7e <Pingpong+0x66>
 8000a78:	787b      	ldrb	r3, [r7, #1]
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d103      	bne.n	8000a86 <Pingpong+0x6e>
				{
					NextState = GameOver;
 8000a7e:	4b87      	ldr	r3, [pc, #540]	; (8000c9c <Pingpong+0x284>)
 8000a80:	2203      	movs	r2, #3
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	e033      	b.n	8000aee <Pingpong+0xd6>
				}
				else if ( L_hit() == true && LeftServe == true) // L serve
 8000a86:	f000 faf3 	bl	8001070 <L_hit>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d012      	beq.n	8000ab6 <Pingpong+0x9e>
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00f      	beq.n	8000ab6 <Pingpong+0x9e>
				{
					LeftServe = false;
 8000a96:	2300      	movs	r3, #0
 8000a98:	73bb      	strb	r3, [r7, #14]
					RightServe = true;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	737b      	strb	r3, [r7, #13]
					Led = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	70fb      	strb	r3, [r7, #3]
					NextState = MoveRight;
 8000aa2:	4b7e      	ldr	r3, [pc, #504]	; (8000c9c <Pingpong+0x284>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
					while ( L_hit() == true ); // wait until button is released
 8000aa8:	bf00      	nop
 8000aaa:	f000 fae1 	bl	8001070 <L_hit>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1fa      	bne.n	8000aaa <Pingpong+0x92>
				else if ( L_hit() == true && LeftServe == true) // L serve
 8000ab4:	e01b      	b.n	8000aee <Pingpong+0xd6>
				}
				else if ( R_hit() == true && RightServe == true) // R serve
 8000ab6:	f000 faed 	bl	8001094 <R_hit>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d012      	beq.n	8000ae6 <Pingpong+0xce>
 8000ac0:	7b7b      	ldrb	r3, [r7, #13]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00f      	beq.n	8000ae6 <Pingpong+0xce>
				{
					LeftServe = true;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73bb      	strb	r3, [r7, #14]
					RightServe = false;
 8000aca:	2300      	movs	r3, #0
 8000acc:	737b      	strb	r3, [r7, #13]
					Led = 8;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	70fb      	strb	r3, [r7, #3]
					NextState= MoveLeft;
 8000ad2:	4b72      	ldr	r3, [pc, #456]	; (8000c9c <Pingpong+0x284>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	701a      	strb	r2, [r3, #0]
					while ( R_hit() == true ); // wait until button is released
 8000ad8:	bf00      	nop
 8000ada:	f000 fadb 	bl	8001094 <R_hit>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1fa      	bne.n	8000ada <Pingpong+0xc2>
				else if ( R_hit() == true && RightServe == true) // R serve
 8000ae4:	e003      	b.n	8000aee <Pingpong+0xd6>
				}
				else
				NextState = Start; // Stay in Start state
 8000ae6:	4b6d      	ldr	r3, [pc, #436]	; (8000c9c <Pingpong+0x284>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
			break;
 8000aec:	e0ce      	b.n	8000c8c <Pingpong+0x274>
 8000aee:	e0cd      	b.n	8000c8c <Pingpong+0x274>
			case MoveRight:
			{
				Led_on(Led);
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f8d8 	bl	8000ca8 <Led_on>
				Varv = Speed;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	60bb      	str	r3, [r7, #8]
				while( Varv != 0 )
 8000afc:	e009      	b.n	8000b12 <Pingpong+0xfa>
				{
					if ( R_hit() ) ButtonPressed = true; // R hit
 8000afe:	f000 fac9 	bl	8001094 <R_hit>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <Pingpong+0xf4>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
					Varv--;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
				while( Varv != 0 )
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f2      	bne.n	8000afe <Pingpong+0xe6>
				}
				if ( ButtonPressed ) // R pressed
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d029      	beq.n	8000b72 <Pingpong+0x15a>
				{
					if ( Led == 8 ) // and LED8 active
 8000b1e:	78fb      	ldrb	r3, [r7, #3]
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d119      	bne.n	8000b58 <Pingpong+0x140>
					{
						NextState=MoveLeft; // return ball
 8000b24:	4b5d      	ldr	r3, [pc, #372]	; (8000c9c <Pingpong+0x284>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	701a      	strb	r2, [r3, #0]
						Led=7;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	70fb      	strb	r3, [r7, #3]
						if (Speed >= 250000) Speed = Speed * 0.9;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a5c      	ldr	r2, [pc, #368]	; (8000ca4 <Pingpong+0x28c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d930      	bls.n	8000b98 <Pingpong+0x180>
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fdb2 	bl	80006a0 <__aeabi_ui2d>
 8000b3c:	a354      	add	r3, pc, #336	; (adr r3, 8000c90 <Pingpong+0x278>)
 8000b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b42:	f7ff fb41 	bl	80001c8 <__aeabi_dmul>
 8000b46:	4602      	mov	r2, r0
 8000b48:	460b      	mov	r3, r1
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f7ff fe21 	bl	8000794 <__aeabi_d2uiz>
 8000b52:	4603      	mov	r3, r0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	e01f      	b.n	8000b98 <Pingpong+0x180>
					}
					else
					{
						LeftScore++;
 8000b58:	78bb      	ldrb	r3, [r7, #2]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	70bb      	strb	r3, [r7, #2]
						Show_points(LeftScore, RightScore);
 8000b5e:	787a      	ldrb	r2, [r7, #1]
 8000b60:	78bb      	ldrb	r3, [r7, #2]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f95b 	bl	8000e20 <Show_points>
						NextState = Start; // hit too early
 8000b6a:	4b4c      	ldr	r3, [pc, #304]	; (8000c9c <Pingpong+0x284>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e012      	b.n	8000b98 <Pingpong+0x180>
					}
				}
				else
				{
					if ( Led == 9 ) // no hit or too late
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	2b09      	cmp	r3, #9
 8000b76:	d10c      	bne.n	8000b92 <Pingpong+0x17a>
					{
						LeftScore++;
 8000b78:	78bb      	ldrb	r3, [r7, #2]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	70bb      	strb	r3, [r7, #2]
						Show_points(LeftScore, RightScore);
 8000b7e:	787a      	ldrb	r2, [r7, #1]
 8000b80:	78bb      	ldrb	r3, [r7, #2]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f94b 	bl	8000e20 <Show_points>
						NextState = Start;
 8000b8a:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <Pingpong+0x284>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e002      	b.n	8000b98 <Pingpong+0x180>
					}
					else
						NextState = MoveRight; // ball continues to move right
 8000b92:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <Pingpong+0x284>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
				}
				if ( !ButtonPressed ) Led++; // prepare to turn next LED on
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	f083 0301 	eor.w	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <Pingpong+0x192>
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	70fb      	strb	r3, [r7, #3]
				ButtonPressed=false;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8000bae:	e06d      	b.n	8000c8c <Pingpong+0x274>
			case MoveLeft:
			{
				Led_on(Led);
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f878 	bl	8000ca8 <Led_on>
				Varv = Speed;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	60bb      	str	r3, [r7, #8]
				while(Varv != 0)
 8000bbc:	e009      	b.n	8000bd2 <Pingpong+0x1ba>
				{
					if ( L_hit() ) ButtonPressed = true; // L hit
 8000bbe:	f000 fa57 	bl	8001070 <L_hit>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <Pingpong+0x1b4>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
					Varv--;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
				while(Varv != 0)
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1f2      	bne.n	8000bbe <Pingpong+0x1a6>
				}
				if ( ButtonPressed ) // L pressed
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d029      	beq.n	8000c32 <Pingpong+0x21a>
				{
					if ( Led == 1 ) // and LED1 active
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d119      	bne.n	8000c18 <Pingpong+0x200>
					{
						NextState = MoveRight; // return ball
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <Pingpong+0x284>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
						Led=2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	70fb      	strb	r3, [r7, #3]
						if (Speed >= 250000) Speed = Speed * 0.9;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <Pingpong+0x28c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d930      	bls.n	8000c58 <Pingpong+0x240>
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fd52 	bl	80006a0 <__aeabi_ui2d>
 8000bfc:	a324      	add	r3, pc, #144	; (adr r3, 8000c90 <Pingpong+0x278>)
 8000bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c02:	f7ff fae1 	bl	80001c8 <__aeabi_dmul>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff fdc1 	bl	8000794 <__aeabi_d2uiz>
 8000c12:	4603      	mov	r3, r0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	e01f      	b.n	8000c58 <Pingpong+0x240>
					}
					else
					{
						RightScore++;
 8000c18:	787b      	ldrb	r3, [r7, #1]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	707b      	strb	r3, [r7, #1]
						Show_points(LeftScore, RightScore);
 8000c1e:	787a      	ldrb	r2, [r7, #1]
 8000c20:	78bb      	ldrb	r3, [r7, #2]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f8fb 	bl	8000e20 <Show_points>
						NextState = Start; // hit too early
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <Pingpong+0x284>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e012      	b.n	8000c58 <Pingpong+0x240>
					}
				}
				else
				{
					if ( Led == 0 ) // no hit or too late
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10c      	bne.n	8000c52 <Pingpong+0x23a>
					{
						RightScore++;
 8000c38:	787b      	ldrb	r3, [r7, #1]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	707b      	strb	r3, [r7, #1]
						Show_points(LeftScore, RightScore);
 8000c3e:	787a      	ldrb	r2, [r7, #1]
 8000c40:	78bb      	ldrb	r3, [r7, #2]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f8eb 	bl	8000e20 <Show_points>
						NextState = Start;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <Pingpong+0x284>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e002      	b.n	8000c58 <Pingpong+0x240>
					}
					else
						NextState = MoveLeft; // ball continues to move left
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <Pingpong+0x284>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]
				}
				if ( !ButtonPressed ) Led--; // prepare to turn next LED on
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	f083 0301 	eor.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <Pingpong+0x252>
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	70fb      	strb	r3, [r7, #3]
				ButtonPressed=false;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73fb      	strb	r3, [r7, #15]
				}
			break;
 8000c6e:	e00d      	b.n	8000c8c <Pingpong+0x274>
			case GameOver:
			{
				Show_gamepoints(LeftScore, RightScore);
 8000c70:	787a      	ldrb	r2, [r7, #1]
 8000c72:	78bb      	ldrb	r3, [r7, #2]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f982 	bl	8000f80 <Show_gamepoints>
				LeftScore = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	70bb      	strb	r3, [r7, #2]
				RightScore = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	707b      	strb	r3, [r7, #1]
				NextState = Start;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <Pingpong+0x284>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
			}
			default:
			break;
 8000c8a:	bf00      	nop
		State = NextState;
 8000c8c:	e6d7      	b.n	8000a3e <Pingpong+0x26>
 8000c8e:	bf00      	nop
 8000c90:	cccccccd 	.word	0xcccccccd
 8000c94:	3feccccc 	.word	0x3feccccc
 8000c98:	20000028 	.word	0x20000028
 8000c9c:	20000029 	.word	0x20000029
 8000ca0:	0007a120 	.word	0x0007a120
 8000ca4:	0003d08f 	.word	0x0003d08f

08000ca8 <Led_on>:
/**
@brief Led_on, turn one of the pingpong leds on
@param uint8_t Lednr , number to the Led that is turned on Lednr can be 1-8, all other values turns all leds off
@return void
*/
void Led_on(uint8_t Lednr) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i=1; i<=8; i++){
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e0a6      	b.n	8000e06 <Led_on+0x15e>
		switch(i){
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	2b07      	cmp	r3, #7
 8000cbe:	f200 809f 	bhi.w	8000e00 <Led_on+0x158>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <Led_on+0x20>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	08000d09 	.word	0x08000d09
 8000cd0:	08000d29 	.word	0x08000d29
 8000cd4:	08000d4d 	.word	0x08000d4d
 8000cd8:	08000d71 	.word	0x08000d71
 8000cdc:	08000d99 	.word	0x08000d99
 8000ce0:	08000dc1 	.word	0x08000dc1
 8000ce4:	08000de1 	.word	0x08000de1
		case 1 : //Led1
		if (Lednr==i) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000ce8:	79fa      	ldrb	r2, [r7, #7]
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d105      	bne.n	8000cfc <Led_on+0x54>
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4848      	ldr	r0, [pc, #288]	; (8000e18 <Led_on+0x170>)
 8000cf6:	f000 fdb1 	bl	800185c <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
		break;
 8000cfa:	e081      	b.n	8000e00 <Led_on+0x158>
		else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2102      	movs	r1, #2
 8000d00:	4845      	ldr	r0, [pc, #276]	; (8000e18 <Led_on+0x170>)
 8000d02:	f000 fdab 	bl	800185c <HAL_GPIO_WritePin>
		break;
 8000d06:	e07b      	b.n	8000e00 <Led_on+0x158>
		case 2 : //Led2
		if (Lednr==i) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d105      	bne.n	8000d1c <Led_on+0x74>
 8000d10:	2201      	movs	r2, #1
 8000d12:	2104      	movs	r1, #4
 8000d14:	4840      	ldr	r0, [pc, #256]	; (8000e18 <Led_on+0x170>)
 8000d16:	f000 fda1 	bl	800185c <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
		break;
 8000d1a:	e071      	b.n	8000e00 <Led_on+0x158>
		else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2104      	movs	r1, #4
 8000d20:	483d      	ldr	r0, [pc, #244]	; (8000e18 <Led_on+0x170>)
 8000d22:	f000 fd9b 	bl	800185c <HAL_GPIO_WritePin>
		break;
 8000d26:	e06b      	b.n	8000e00 <Led_on+0x158>
		case 3 : //Led3
		if (Lednr==i) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000d28:	79fa      	ldrb	r2, [r7, #7]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d106      	bne.n	8000d3e <Led_on+0x96>
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d36:	4838      	ldr	r0, [pc, #224]	; (8000e18 <Led_on+0x170>)
 8000d38:	f000 fd90 	bl	800185c <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
		break;
 8000d3c:	e060      	b.n	8000e00 <Led_on+0x158>
		else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d44:	4834      	ldr	r0, [pc, #208]	; (8000e18 <Led_on+0x170>)
 8000d46:	f000 fd89 	bl	800185c <HAL_GPIO_WritePin>
		break;
 8000d4a:	e059      	b.n	8000e00 <Led_on+0x158>
		case 4 : //Led4
		if (Lednr==i) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d106      	bne.n	8000d62 <Led_on+0xba>
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	482f      	ldr	r0, [pc, #188]	; (8000e18 <Led_on+0x170>)
 8000d5c:	f000 fd7e 	bl	800185c <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
		break;
 8000d60:	e04e      	b.n	8000e00 <Led_on+0x158>
		else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d68:	482b      	ldr	r0, [pc, #172]	; (8000e18 <Led_on+0x170>)
 8000d6a:	f000 fd77 	bl	800185c <HAL_GPIO_WritePin>
		break;
 8000d6e:	e047      	b.n	8000e00 <Led_on+0x158>
		case 5 : //Led5
		if (Lednr==i) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d107      	bne.n	8000d88 <Led_on+0xe0>
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f000 fd6b 	bl	800185c <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
		break;
 8000d86:	e03b      	b.n	8000e00 <Led_on+0x158>
		else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f000 fd63 	bl	800185c <HAL_GPIO_WritePin>
		break;
 8000d96:	e033      	b.n	8000e00 <Led_on+0x158>
		case 6 : //Led6
		if (Lednr==i) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000d98:	79fa      	ldrb	r2, [r7, #7]
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d107      	bne.n	8000db0 <Led_on+0x108>
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f000 fd57 	bl	800185c <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
		break;
 8000dae:	e027      	b.n	8000e00 <Led_on+0x158>
		else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f000 fd4f 	bl	800185c <HAL_GPIO_WritePin>
		break;
 8000dbe:	e01f      	b.n	8000e00 <Led_on+0x158>
		case 7 : //Led7
		if (Lednr==i) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000dc0:	79fa      	ldrb	r2, [r7, #7]
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d105      	bne.n	8000dd4 <Led_on+0x12c>
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2120      	movs	r1, #32
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <Led_on+0x174>)
 8000dce:	f000 fd45 	bl	800185c <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
		break;
 8000dd2:	e015      	b.n	8000e00 <Led_on+0x158>
		else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2120      	movs	r1, #32
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <Led_on+0x174>)
 8000dda:	f000 fd3f 	bl	800185c <HAL_GPIO_WritePin>
		break;
 8000dde:	e00f      	b.n	8000e00 <Led_on+0x158>
		case 8 : //Led8
		if (Lednr==i) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d105      	bne.n	8000df4 <Led_on+0x14c>
 8000de8:	2201      	movs	r2, #1
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <Led_on+0x174>)
 8000dee:	f000 fd35 	bl	800185c <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
		break;
 8000df2:	e004      	b.n	8000dfe <Led_on+0x156>
		else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <Led_on+0x174>)
 8000dfa:	f000 fd2f 	bl	800185c <HAL_GPIO_WritePin>
		break;
 8000dfe:	bf00      	nop
	for (i=1; i<=8; i++){
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	3301      	adds	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	f67f af55 	bls.w	8000cb8 <Led_on+0x10>
		default : ;
		} // end switch
		} // end for-loop return;
return;
 8000e0e:	bf00      	nop
} // End of function Led_on
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000800 	.word	0x48000800

08000e20 <Show_points>:

void Show_points(uint8_t L_points, uint8_t R_points) {
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b094      	sub	sp, #80	; 0x50
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
	// Define arrays to store GPIO ports and pins for each LED
	    GPIO_TypeDef* LED_GPIO_Port[] = {LED1_GPIO_Port, LED2_GPIO_Port, LED3_GPIO_Port, LED4_GPIO_Port, LED5_GPIO_Port, LED6_GPIO_Port, LED7_GPIO_Port, LED8_GPIO_Port};
 8000e30:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <Show_points+0x158>)
 8000e32:	f107 041c 	add.w	r4, r7, #28
 8000e36:	461d      	mov	r5, r3
 8000e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    uint16_t LED_Pin[] = {LED1_Pin, LED2_Pin, LED3_Pin, LED4_Pin, LED5_Pin, LED6_Pin, LED7_Pin, LED8_Pin};
 8000e44:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <Show_points+0x15c>)
 8000e46:	f107 040c 	add.w	r4, r7, #12
 8000e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	    // Turn on all LEDs
	    for (int i = 0; i < 8; i++) {
 8000e50:	2300      	movs	r3, #0
 8000e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e54:	e012      	b.n	8000e7c <Show_points+0x5c>
	    	HAL_GPIO_WritePin(LED_GPIO_Port[i], LED_Pin[i], GPIO_PIN_SET);
 8000e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	3350      	adds	r3, #80	; 0x50
 8000e5c:	443b      	add	r3, r7
 8000e5e:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	3350      	adds	r3, #80	; 0x50
 8000e68:	443b      	add	r3, r7
 8000e6a:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	f000 fcf3 	bl	800185c <HAL_GPIO_WritePin>
	    for (int i = 0; i < 8; i++) {
 8000e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e78:	3301      	adds	r3, #1
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	dde9      	ble.n	8000e56 <Show_points+0x36>
	    }

	    HAL_Delay(100);
 8000e82:	2064      	movs	r0, #100	; 0x64
 8000e84:	f000 fa1e 	bl	80012c4 <HAL_Delay>

	    // Turn off all LEDs
	    for (int i = 0; i < 8; i++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e8c:	e012      	b.n	8000eb4 <Show_points+0x94>
	        HAL_GPIO_WritePin(LED_GPIO_Port[i], LED_Pin[i], GPIO_PIN_RESET);
 8000e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	3350      	adds	r3, #80	; 0x50
 8000e94:	443b      	add	r3, r7
 8000e96:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	3350      	adds	r3, #80	; 0x50
 8000ea0:	443b      	add	r3, r7
 8000ea2:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f000 fcd7 	bl	800185c <HAL_GPIO_WritePin>
	    for (int i = 0; i < 8; i++) {
 8000eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eb6:	2b07      	cmp	r3, #7
 8000eb8:	dde9      	ble.n	8000e8e <Show_points+0x6e>
	    }

	    HAL_Delay(500);
 8000eba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ebe:	f000 fa01 	bl	80012c4 <HAL_Delay>

	    // Display points for player L (from the left side to the middle)
	    for (int i = 0; i < L_points; i++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ec6:	e012      	b.n	8000eee <Show_points+0xce>
	        HAL_GPIO_WritePin(LED_GPIO_Port[i], LED_Pin[i], GPIO_PIN_SET);
 8000ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	3350      	adds	r3, #80	; 0x50
 8000ece:	443b      	add	r3, r7
 8000ed0:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	3350      	adds	r3, #80	; 0x50
 8000eda:	443b      	add	r3, r7
 8000edc:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f000 fcba 	bl	800185c <HAL_GPIO_WritePin>
	    for (int i = 0; i < L_points; i++) {
 8000ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eea:	3301      	adds	r3, #1
 8000eec:	647b      	str	r3, [r7, #68]	; 0x44
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dbe8      	blt.n	8000ec8 <Show_points+0xa8>
	    }

	    // Display points for player R (from the right side to the middle)
	    for (int i = 7; i >= 8 - R_points; i--) {
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8000efa:	e012      	b.n	8000f22 <Show_points+0x102>
	        HAL_GPIO_WritePin(LED_GPIO_Port[i], LED_Pin[i], GPIO_PIN_SET);
 8000efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	3350      	adds	r3, #80	; 0x50
 8000f02:	443b      	add	r3, r7
 8000f04:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	3350      	adds	r3, #80	; 0x50
 8000f0e:	443b      	add	r3, r7
 8000f10:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	f000 fca0 	bl	800185c <HAL_GPIO_WritePin>
	    for (int i = 7; i >= 8 - R_points; i--) {
 8000f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	643b      	str	r3, [r7, #64]	; 0x40
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	f1c3 0308 	rsb	r3, r3, #8
 8000f28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dae6      	bge.n	8000efc <Show_points+0xdc>
	    }

	    HAL_Delay(1000);
 8000f2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f32:	f000 f9c7 	bl	80012c4 <HAL_Delay>
	    // Turn off all LEDs
	    for (int i = 0; i < 8; i++) {
 8000f36:	2300      	movs	r3, #0
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f3a:	e012      	b.n	8000f62 <Show_points+0x142>
	    	HAL_GPIO_WritePin(LED_GPIO_Port[i], LED_Pin[i], GPIO_PIN_RESET);
 8000f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	3350      	adds	r3, #80	; 0x50
 8000f42:	443b      	add	r3, r7
 8000f44:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8000f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	3350      	adds	r3, #80	; 0x50
 8000f4e:	443b      	add	r3, r7
 8000f50:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	f000 fc80 	bl	800185c <HAL_GPIO_WritePin>
	    for (int i = 0; i < 8; i++) {
 8000f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f5e:	3301      	adds	r3, #1
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f64:	2b07      	cmp	r3, #7
 8000f66:	dde9      	ble.n	8000f3c <Show_points+0x11c>
	    }
	    HAL_Delay(500);
 8000f68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f6c:	f000 f9aa 	bl	80012c4 <HAL_Delay>
}
 8000f70:	bf00      	nop
 8000f72:	3750      	adds	r7, #80	; 0x50
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bdb0      	pop	{r4, r5, r7, pc}
 8000f78:	08002554 	.word	0x08002554
 8000f7c:	08002574 	.word	0x08002574

08000f80 <Show_gamepoints>:

void Show_gamepoints(uint8_t L_points, uint8_t R_points) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b092      	sub	sp, #72	; 0x48
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	460a      	mov	r2, r1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]
    	// Define arrays to store GPIO ports and pins for each LED
        GPIO_TypeDef* LED_GPIO_Port[] = {LED1_GPIO_Port, LED2_GPIO_Port, LED3_GPIO_Port, LED4_GPIO_Port, LED5_GPIO_Port, LED6_GPIO_Port, LED7_GPIO_Port, LED8_GPIO_Port};
 8000f90:	4b35      	ldr	r3, [pc, #212]	; (8001068 <Show_gamepoints+0xe8>)
 8000f92:	f107 041c 	add.w	r4, r7, #28
 8000f96:	461d      	mov	r5, r3
 8000f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uint16_t LED_Pin[] = {LED1_Pin, LED2_Pin, LED3_Pin, LED4_Pin, LED5_Pin, LED6_Pin, LED7_Pin, LED8_Pin};
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <Show_gamepoints+0xec>)
 8000fa6:	f107 040c 	add.w	r4, r7, #12
 8000faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


        // Display points for player L (from the left side to the middle)
        for (int i = 0; i < L_points; i++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8000fb4:	e012      	b.n	8000fdc <Show_gamepoints+0x5c>
            HAL_GPIO_WritePin(LED_GPIO_Port[i], LED_Pin[i], GPIO_PIN_SET);
 8000fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	3348      	adds	r3, #72	; 0x48
 8000fbc:	443b      	add	r3, r7
 8000fbe:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8000fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	3348      	adds	r3, #72	; 0x48
 8000fc8:	443b      	add	r3, r7
 8000fca:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f000 fc43 	bl	800185c <HAL_GPIO_WritePin>
        for (int i = 0; i < L_points; i++) {
 8000fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd8:	3301      	adds	r3, #1
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbe8      	blt.n	8000fb6 <Show_gamepoints+0x36>
        }

        // Display points for player R (from the right side to the middle)
        for (int i = 7; i >= 8 - R_points; i--) {
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8000fe8:	e012      	b.n	8001010 <Show_gamepoints+0x90>
            HAL_GPIO_WritePin(LED_GPIO_Port[i], LED_Pin[i], GPIO_PIN_SET);
 8000fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	3348      	adds	r3, #72	; 0x48
 8000ff0:	443b      	add	r3, r7
 8000ff2:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8000ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	3348      	adds	r3, #72	; 0x48
 8000ffc:	443b      	add	r3, r7
 8000ffe:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8001002:	2201      	movs	r2, #1
 8001004:	4619      	mov	r1, r3
 8001006:	f000 fc29 	bl	800185c <HAL_GPIO_WritePin>
        for (int i = 7; i >= 8 - R_points; i--) {
 800100a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800100c:	3b01      	subs	r3, #1
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	f1c3 0308 	rsb	r3, r3, #8
 8001016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001018:	429a      	cmp	r2, r3
 800101a:	dae6      	bge.n	8000fea <Show_gamepoints+0x6a>
        }

        HAL_Delay(5000);
 800101c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001020:	f000 f950 	bl	80012c4 <HAL_Delay>
        // Turn off all LEDs
        for (int i = 0; i < 8; i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001028:	e012      	b.n	8001050 <Show_gamepoints+0xd0>
            HAL_GPIO_WritePin(LED_GPIO_Port[i], LED_Pin[i], GPIO_PIN_RESET);
 800102a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	3348      	adds	r3, #72	; 0x48
 8001030:	443b      	add	r3, r7
 8001032:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8001036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	3348      	adds	r3, #72	; 0x48
 800103c:	443b      	add	r3, r7
 800103e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	f000 fc09 	bl	800185c <HAL_GPIO_WritePin>
        for (int i = 0; i < 8; i++) {
 800104a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104c:	3301      	adds	r3, #1
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001052:	2b07      	cmp	r3, #7
 8001054:	dde9      	ble.n	800102a <Show_gamepoints+0xaa>
        }
        HAL_Delay(500);
 8001056:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105a:	f000 f933 	bl	80012c4 <HAL_Delay>
}
 800105e:	bf00      	nop
 8001060:	3748      	adds	r7, #72	; 0x48
 8001062:	46bd      	mov	sp, r7
 8001064:	bdb0      	pop	{r4, r5, r7, pc}
 8001066:	bf00      	nop
 8001068:	08002554 	.word	0x08002554
 800106c:	08002574 	.word	0x08002574

08001070 <L_hit>:

bool L_hit(void)
{ if (HAL_GPIO_ReadPin(L_button_GPIO_Port, L_button_Pin) == 0) return true;
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
 8001074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <L_hit+0x20>)
 800107a:	f000 fbd7 	bl	800182c <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <L_hit+0x18>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <L_hit+0x1a>
else return false; }
 8001088:	2300      	movs	r3, #0
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	48000400 	.word	0x48000400

08001094 <R_hit>:

bool R_hit(void)
{ if (HAL_GPIO_ReadPin(R_button_GPIO_Port, R_button_Pin) == 0) return true;
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <R_hit+0x20>)
 800109e:	f000 fbc5 	bl	800182c <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <R_hit+0x18>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <R_hit+0x1a>
else return false; }
 80010ac:	2300      	movs	r3, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	48000800 	.word	0x48000800

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x44>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x44>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x44>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6593      	str	r3, [r2, #88]	; 0x58
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler+0x4>

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f89a 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff ffea 	bl	8001154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <LoopForever+0xe>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	; (80011c4 <LoopForever+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f001 f9a5 	bl	80024f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011aa:	f7ff fc23 	bl	80009f4 <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011bc:	080025cc 	.word	0x080025cc
  ldr r2, =_sbss
 80011c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c4:	20000030 	.word	0x20000030

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>
	...

080011cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_Init+0x3c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_Init+0x3c>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e2:	2003      	movs	r0, #3
 80011e4:	f000 f944 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e8:	2000      	movs	r0, #0
 80011ea:	f000 f80f 	bl	800120c <HAL_InitTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	e001      	b.n	80011fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fa:	f7ff ff5d 	bl	80010b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_InitTick+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d023      	beq.n	8001268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_InitTick+0x70>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_InitTick+0x6c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f941 	bl	80014be <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10f      	bne.n	8001262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d809      	bhi.n	800125c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001250:	f000 f919 	bl	8001486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_InitTick+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e007      	b.n	800126c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e004      	b.n	800126c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e001      	b.n	800126c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008
 800127c:	20000000 	.word	0x20000000
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008
 80012a8:	2000002c 	.word	0x2000002c

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	2000002c 	.word	0x2000002c

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff47 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff5c 	bl	8001354 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffb0 	bl	800142c <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	e17f      	b.n	80017e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8171 	beq.w	80017e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d005      	beq.n	8001518 <HAL_GPIO_Init+0x40>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 0201 	and.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b03      	cmp	r3, #3
 8001584:	d118      	bne.n	80015b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800158c:	2201      	movs	r2, #1
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	08db      	lsrs	r3, r3, #3
 80015a2:	f003 0201 	and.w	r2, r3, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d017      	beq.n	80015f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d123      	bne.n	8001648 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80ac 	beq.w	80017e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <HAL_GPIO_Init+0x330>)
 800168c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168e:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <HAL_GPIO_Init+0x330>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6613      	str	r3, [r2, #96]	; 0x60
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <HAL_GPIO_Init+0x330>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016a2:	4a5a      	ldr	r2, [pc, #360]	; (800180c <HAL_GPIO_Init+0x334>)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	220f      	movs	r2, #15
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016cc:	d025      	beq.n	800171a <HAL_GPIO_Init+0x242>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4f      	ldr	r2, [pc, #316]	; (8001810 <HAL_GPIO_Init+0x338>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01f      	beq.n	8001716 <HAL_GPIO_Init+0x23e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4e      	ldr	r2, [pc, #312]	; (8001814 <HAL_GPIO_Init+0x33c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0x23a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4d      	ldr	r2, [pc, #308]	; (8001818 <HAL_GPIO_Init+0x340>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x236>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4c      	ldr	r2, [pc, #304]	; (800181c <HAL_GPIO_Init+0x344>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x232>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4b      	ldr	r2, [pc, #300]	; (8001820 <HAL_GPIO_Init+0x348>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x22e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4a      	ldr	r2, [pc, #296]	; (8001824 <HAL_GPIO_Init+0x34c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x22a>
 80016fe:	2306      	movs	r3, #6
 8001700:	e00c      	b.n	800171c <HAL_GPIO_Init+0x244>
 8001702:	2307      	movs	r3, #7
 8001704:	e00a      	b.n	800171c <HAL_GPIO_Init+0x244>
 8001706:	2305      	movs	r3, #5
 8001708:	e008      	b.n	800171c <HAL_GPIO_Init+0x244>
 800170a:	2304      	movs	r3, #4
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x244>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x244>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x244>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x244>
 800171a:	2300      	movs	r3, #0
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	f002 0203 	and.w	r2, r2, #3
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800172c:	4937      	ldr	r1, [pc, #220]	; (800180c <HAL_GPIO_Init+0x334>)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <HAL_GPIO_Init+0x350>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800175e:	4a32      	ldr	r2, [pc, #200]	; (8001828 <HAL_GPIO_Init+0x350>)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001764:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_GPIO_Init+0x350>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_GPIO_Init+0x350>)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_GPIO_Init+0x350>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017b2:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_GPIO_Init+0x350>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_GPIO_Init+0x350>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_GPIO_Init+0x350>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa22 f303 	lsr.w	r3, r2, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f47f ae78 	bne.w	80014e8 <HAL_GPIO_Init+0x10>
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	48000400 	.word	0x48000400
 8001814:	48000800 	.word	0x48000800
 8001818:	48000c00 	.word	0x48000c00
 800181c:	48001000 	.word	0x48001000
 8001820:	48001400 	.word	0x48001400
 8001824:	48001800 	.word	0x48001800
 8001828:	40010400 	.word	0x40010400

0800182c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	e001      	b.n	800184e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001878:	e002      	b.n	8001880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40007000 	.word	0x40007000

080018a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b6:	d130      	bne.n	800191a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c4:	d038      	beq.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ce:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2232      	movs	r2, #50	; 0x32
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	0c9b      	lsrs	r3, r3, #18
 80018e8:	3301      	adds	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ec:	e002      	b.n	80018f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001900:	d102      	bne.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f2      	bne.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001914:	d110      	bne.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e00f      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001926:	d007      	beq.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001930:	4a05      	ldr	r2, [pc, #20]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001936:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000
 800194c:	20000000 	.word	0x20000000
 8001950:	431bde83 	.word	0x431bde83

08001954 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e3ca      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001966:	4b97      	ldr	r3, [pc, #604]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001970:	4b94      	ldr	r3, [pc, #592]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80e4 	beq.w	8001b50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_RCC_OscConfig+0x4a>
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b0c      	cmp	r3, #12
 8001992:	f040 808b 	bne.w	8001aac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b01      	cmp	r3, #1
 800199a:	f040 8087 	bne.w	8001aac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800199e:	4b89      	ldr	r3, [pc, #548]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x62>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e3a2      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1a      	ldr	r2, [r3, #32]
 80019ba:	4b82      	ldr	r3, [pc, #520]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_RCC_OscConfig+0x7c>
 80019c6:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ce:	e005      	b.n	80019dc <HAL_RCC_OscConfig+0x88>
 80019d0:	4b7c      	ldr	r3, [pc, #496]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019dc:	4293      	cmp	r3, r2
 80019de:	d223      	bcs.n	8001a28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fd1d 	bl	8002424 <RCC_SetFlashLatencyFromMSIRange>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e383      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f4:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a72      	ldr	r2, [pc, #456]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b70      	ldr	r3, [pc, #448]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	496d      	ldr	r1, [pc, #436]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a12:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	4968      	ldr	r1, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	e025      	b.n	8001a74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a65      	ldr	r2, [pc, #404]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4960      	ldr	r1, [pc, #384]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a46:	4b5f      	ldr	r3, [pc, #380]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	495b      	ldr	r1, [pc, #364]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fcdd 	bl	8002424 <RCC_SetFlashLatencyFromMSIRange>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e343      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a74:	f000 fc4a 	bl	800230c <HAL_RCC_GetSysClockFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	4950      	ldr	r1, [pc, #320]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	4a4e      	ldr	r2, [pc, #312]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001a92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a94:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fbb7 	bl	800120c <HAL_InitTick>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d052      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	e327      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d032      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ab4:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a42      	ldr	r2, [pc, #264]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fbf4 	bl	80012ac <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fbf0 	bl	80012ac <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e310      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ada:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a36      	ldr	r2, [pc, #216]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4931      	ldr	r1, [pc, #196]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b04:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	492c      	ldr	r1, [pc, #176]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
 8001b18:	e01a      	b.n	8001b50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a29      	ldr	r2, [pc, #164]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b26:	f7ff fbc1 	bl	80012ac <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b2e:	f7ff fbbd 	bl	80012ac <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e2dd      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x1da>
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d074      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d005      	beq.n	8001b6e <HAL_RCC_OscConfig+0x21a>
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d10e      	bne.n	8001b86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d10b      	bne.n	8001b86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d064      	beq.n	8001c44 <HAL_RCC_OscConfig+0x2f0>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d160      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e2ba      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x24a>
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	e026      	b.n	8001bec <HAL_RCC_OscConfig+0x298>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba6:	d115      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x280>
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a02      	ldr	r2, [pc, #8]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x298>
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08002584 	.word	0x08002584
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	4ba0      	ldr	r3, [pc, #640]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a9f      	ldr	r2, [pc, #636]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b9d      	ldr	r3, [pc, #628]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a9c      	ldr	r2, [pc, #624]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fb5a 	bl	80012ac <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fb56 	bl	80012ac <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e276      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	4b92      	ldr	r3, [pc, #584]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x2a8>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb46 	bl	80012ac <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fb42 	bl	80012ac <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e262      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c36:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2d0>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d060      	beq.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_OscConfig+0x310>
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d119      	bne.n	8001c92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d116      	bne.n	8001c92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c64:	4b7c      	ldr	r3, [pc, #496]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x328>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e23f      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	4973      	ldr	r1, [pc, #460]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c90:	e040      	b.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d023      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6e      	ldr	r2, [pc, #440]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fb01 	bl	80012ac <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff fafd 	bl	80012ac <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e21d      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc0:	4b65      	ldr	r3, [pc, #404]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	4b62      	ldr	r3, [pc, #392]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	495f      	ldr	r1, [pc, #380]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
 8001ce0:	e018      	b.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff fadd 	bl	80012ac <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fad9 	bl	80012ac <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1f9      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01c      	beq.n	8001d62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d28:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2e:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7ff fab8 	bl	80012ac <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff fab4 	bl	80012ac <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e1d4      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ef      	beq.n	8001d40 <HAL_RCC_OscConfig+0x3ec>
 8001d60:	e01b      	b.n	8001d9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d68:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d72:	f7ff fa9b 	bl	80012ac <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fa97 	bl	80012ac <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1b7      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d8c:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1ef      	bne.n	8001d7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80a6 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10d      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_RCC_OscConfig+0x508>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d118      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCC_OscConfig+0x508>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <HAL_RCC_OscConfig+0x508>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fa5e 	bl	80012ac <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df4:	f7ff fa5a 	bl	80012ac <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e17a      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_RCC_OscConfig+0x508>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d108      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4d8>
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2a:	e029      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d115      	bne.n	8001e60 <HAL_RCC_OscConfig+0x50c>
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e54:	e014      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	4b9c      	ldr	r3, [pc, #624]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	4a9b      	ldr	r2, [pc, #620]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e70:	4b98      	ldr	r3, [pc, #608]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e76:	4a97      	ldr	r2, [pc, #604]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d016      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7ff fa10 	bl	80012ac <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7ff fa0c 	bl	80012ac <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e12a      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ed      	beq.n	8001e90 <HAL_RCC_OscConfig+0x53c>
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb6:	f7ff f9f9 	bl	80012ac <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7ff f9f5 	bl	80012ac <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e113      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed4:	4b7f      	ldr	r3, [pc, #508]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ed      	bne.n	8001ebe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee2:	7ffb      	ldrb	r3, [r7, #31]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee8:	4b7a      	ldr	r3, [pc, #488]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	4a79      	ldr	r2, [pc, #484]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80fe 	beq.w	80020fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	f040 80d0 	bne.w	80020a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f08:	4b72      	ldr	r3, [pc, #456]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d130      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	3b01      	subs	r3, #1
 8001f28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d127      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d11f      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f48:	2a07      	cmp	r2, #7
 8001f4a:	bf14      	ite	ne
 8001f4c:	2201      	movne	r2, #1
 8001f4e:	2200      	moveq	r2, #0
 8001f50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d113      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	3b01      	subs	r3, #1
 8001f78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d06e      	beq.n	800205c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d069      	beq.n	8002058 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f84:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f90:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0ad      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a4b      	ldr	r2, [pc, #300]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fac:	f7ff f97e 	bl	80012ac <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff f97a 	bl	80012ac <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e09a      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <HAL_RCC_OscConfig+0x784>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fe2:	3a01      	subs	r2, #1
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fec:	0212      	lsls	r2, r2, #8
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ff4:	0852      	lsrs	r2, r2, #1
 8001ff6:	3a01      	subs	r2, #1
 8001ff8:	0552      	lsls	r2, r2, #21
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002000:	0852      	lsrs	r2, r2, #1
 8002002:	3a01      	subs	r2, #1
 8002004:	0652      	lsls	r2, r2, #25
 8002006:	4311      	orrs	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800200c:	0912      	lsrs	r2, r2, #4
 800200e:	0452      	lsls	r2, r2, #17
 8002010:	430a      	orrs	r2, r1
 8002012:	4930      	ldr	r1, [pc, #192]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800201e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800202a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002030:	f7ff f93c 	bl	80012ac <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff f938 	bl	80012ac <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e058      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002056:	e050      	b.n	80020fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e04f      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d148      	bne.n	80020fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800206e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002072:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002080:	f7ff f914 	bl	80012ac <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff f910 	bl	80012ac <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e030      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x734>
 80020a6:	e028      	b.n	80020fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d023      	beq.n	80020f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <HAL_RCC_OscConfig+0x780>)
 80020b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7ff f8f7 	bl	80012ac <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c0:	e00c      	b.n	80020dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7ff f8f3 	bl	80012ac <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d905      	bls.n	80020dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e013      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x7b0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ec      	bne.n	80020c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_RCC_OscConfig+0x7b0>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4905      	ldr	r1, [pc, #20]	; (8002104 <HAL_RCC_OscConfig+0x7b0>)
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_OscConfig+0x7b4>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
 80020f4:	e001      	b.n	80020fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	feeefffc 	.word	0xfeeefffc

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0e7      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4970      	ldr	r1, [pc, #448]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b6e      	ldr	r3, [pc, #440]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0cf      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	4b66      	ldr	r3, [pc, #408]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002168:	429a      	cmp	r2, r3
 800216a:	d908      	bls.n	800217e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b63      	ldr	r3, [pc, #396]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4960      	ldr	r1, [pc, #384]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d04c      	beq.n	8002224 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d121      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0a6      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021aa:	4b54      	ldr	r3, [pc, #336]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d115      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e09a      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c2:	4b4e      	ldr	r3, [pc, #312]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e08e      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e086      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4943      	ldr	r1, [pc, #268]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f4:	f7ff f85a 	bl	80012ac <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7ff f856 	bl	80012ac <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e06e      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 020c 	and.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1eb      	bne.n	80021fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800223c:	429a      	cmp	r2, r3
 800223e:	d208      	bcs.n	8002252 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	492b      	ldr	r1, [pc, #172]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d210      	bcs.n	8002282 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 0207 	bic.w	r2, r3, #7
 8002268:	4923      	ldr	r1, [pc, #140]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e036      	b.n	80022f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4918      	ldr	r1, [pc, #96]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4910      	ldr	r1, [pc, #64]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c0:	f000 f824 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	490b      	ldr	r1, [pc, #44]	; (8002300 <HAL_RCC_ClockConfig+0x1f4>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	4a09      	ldr	r2, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1fc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe ff91 	bl	800120c <HAL_InitTick>
 80022ea:	4603      	mov	r3, r0
 80022ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80022ee:	7afb      	ldrb	r3, [r7, #11]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40021000 	.word	0x40021000
 8002300:	08002584 	.word	0x08002584
 8002304:	20000000 	.word	0x20000000
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231a:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x34>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d121      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d11e      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002340:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e005      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002368:	4a2b      	ldr	r2, [pc, #172]	; (8002418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d102      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <HAL_RCC_GetSysClockFreq+0x110>)
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	e004      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d101      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCC_GetSysClockFreq+0x114>)
 8002392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d134      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d003      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0xac>
 80023b0:	e005      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_RCC_GetSysClockFreq+0x110>)
 80023b4:	617b      	str	r3, [r7, #20]
      break;
 80023b6:	e005      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ba:	617b      	str	r3, [r7, #20]
      break;
 80023bc:	e002      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	617b      	str	r3, [r7, #20]
      break;
 80023c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	3301      	adds	r3, #1
 80023d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	fb03 f202 	mul.w	r2, r3, r2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	0e5b      	lsrs	r3, r3, #25
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	3301      	adds	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002404:	69bb      	ldr	r3, [r7, #24]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	08002594 	.word	0x08002594
 800241c:	00f42400 	.word	0x00f42400
 8002420:	007a1200 	.word	0x007a1200

08002424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800243c:	f7ff fa26 	bl	800188c <HAL_PWREx_GetVoltageRange>
 8002440:	6178      	str	r0, [r7, #20]
 8002442:	e014      	b.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b25      	ldr	r3, [pc, #148]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a24      	ldr	r2, [pc, #144]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58
 8002450:	4b22      	ldr	r3, [pc, #136]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800245c:	f7ff fa16 	bl	800188c <HAL_PWREx_GetVoltageRange>
 8002460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002474:	d10b      	bne.n	800248e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d919      	bls.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2ba0      	cmp	r3, #160	; 0xa0
 8002480:	d902      	bls.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002482:	2302      	movs	r3, #2
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e013      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002488:	2301      	movs	r3, #1
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e010      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b80      	cmp	r3, #128	; 0x80
 8002492:	d902      	bls.n	800249a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002494:	2303      	movs	r3, #3
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	e00a      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b80      	cmp	r3, #128	; 0x80
 800249e:	d102      	bne.n	80024a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024a0:	2302      	movs	r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	e004      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b70      	cmp	r3, #112	; 0x70
 80024aa:	d101      	bne.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024ac:	2301      	movs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 0207 	bic.w	r2, r3, #7
 80024b8:	4909      	ldr	r1, [pc, #36]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40022000 	.word	0x40022000

080024e4 <memset>:
 80024e4:	4402      	add	r2, r0
 80024e6:	4603      	mov	r3, r0
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d100      	bne.n	80024ee <memset+0xa>
 80024ec:	4770      	bx	lr
 80024ee:	f803 1b01 	strb.w	r1, [r3], #1
 80024f2:	e7f9      	b.n	80024e8 <memset+0x4>

080024f4 <__libc_init_array>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	4d0d      	ldr	r5, [pc, #52]	; (800252c <__libc_init_array+0x38>)
 80024f8:	4c0d      	ldr	r4, [pc, #52]	; (8002530 <__libc_init_array+0x3c>)
 80024fa:	1b64      	subs	r4, r4, r5
 80024fc:	10a4      	asrs	r4, r4, #2
 80024fe:	2600      	movs	r6, #0
 8002500:	42a6      	cmp	r6, r4
 8002502:	d109      	bne.n	8002518 <__libc_init_array+0x24>
 8002504:	4d0b      	ldr	r5, [pc, #44]	; (8002534 <__libc_init_array+0x40>)
 8002506:	4c0c      	ldr	r4, [pc, #48]	; (8002538 <__libc_init_array+0x44>)
 8002508:	f000 f818 	bl	800253c <_init>
 800250c:	1b64      	subs	r4, r4, r5
 800250e:	10a4      	asrs	r4, r4, #2
 8002510:	2600      	movs	r6, #0
 8002512:	42a6      	cmp	r6, r4
 8002514:	d105      	bne.n	8002522 <__libc_init_array+0x2e>
 8002516:	bd70      	pop	{r4, r5, r6, pc}
 8002518:	f855 3b04 	ldr.w	r3, [r5], #4
 800251c:	4798      	blx	r3
 800251e:	3601      	adds	r6, #1
 8002520:	e7ee      	b.n	8002500 <__libc_init_array+0xc>
 8002522:	f855 3b04 	ldr.w	r3, [r5], #4
 8002526:	4798      	blx	r3
 8002528:	3601      	adds	r6, #1
 800252a:	e7f2      	b.n	8002512 <__libc_init_array+0x1e>
 800252c:	080025c4 	.word	0x080025c4
 8002530:	080025c4 	.word	0x080025c4
 8002534:	080025c4 	.word	0x080025c4
 8002538:	080025c8 	.word	0x080025c8

0800253c <_init>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	bf00      	nop
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr

08002548 <_fini>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	bf00      	nop
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr
